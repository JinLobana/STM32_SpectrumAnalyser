
STM32_fft_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083b8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001347c  08008580  08008580  00018580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b9fc  0801b9fc  00030090  2**0
                  CONTENTS
  4 .ARM          00000008  0801b9fc  0801b9fc  0002b9fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba04  0801ba04  00030090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba04  0801ba04  0002ba04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ba08  0801ba08  0002ba08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0801ba0c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000db40  20000090  0801ba9c  00030090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000dbd0  0801ba9c  0003dbd0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000198c4  00000000  00000000  000300be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003776  00000000  00000000  00049982  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  0004d0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001030  00000000  00000000  0004e2f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002780b  00000000  00000000  0004f320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018457  00000000  00000000  00076b2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0065  00000000  00000000  0008ef82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c0  00000000  00000000  0017efe7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a98  00000000  00000000  0017f0a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    0000318f  00000000  00000000  00183b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000090 	.word	0x20000090
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008568 	.word	0x08008568

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000094 	.word	0x20000094
 8000204:	08008568 	.word	0x08008568

08000208 <arm_bitreversal_32>:
 8000208:	1c4b      	adds	r3, r1, #1
 800020a:	2b01      	cmp	r3, #1
 800020c:	bf98      	it	ls
 800020e:	4770      	bxls	lr
 8000210:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8000214:	1c91      	adds	r1, r2, #2
 8000216:	089b      	lsrs	r3, r3, #2

08000218 <arm_bitreversal_32_0>:
 8000218:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 800021c:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 8000220:	880a      	ldrh	r2, [r1, #0]
 8000222:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000226:	4480      	add	r8, r0
 8000228:	4481      	add	r9, r0
 800022a:	4402      	add	r2, r0
 800022c:	4484      	add	ip, r0
 800022e:	f8d9 7000 	ldr.w	r7, [r9]
 8000232:	f8d8 6000 	ldr.w	r6, [r8]
 8000236:	6815      	ldr	r5, [r2, #0]
 8000238:	f8dc 4000 	ldr.w	r4, [ip]
 800023c:	f8c9 6000 	str.w	r6, [r9]
 8000240:	f8c8 7000 	str.w	r7, [r8]
 8000244:	f8cc 5000 	str.w	r5, [ip]
 8000248:	6014      	str	r4, [r2, #0]
 800024a:	f8d9 7004 	ldr.w	r7, [r9, #4]
 800024e:	f8d8 6004 	ldr.w	r6, [r8, #4]
 8000252:	6855      	ldr	r5, [r2, #4]
 8000254:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8000258:	f8c9 6004 	str.w	r6, [r9, #4]
 800025c:	f8c8 7004 	str.w	r7, [r8, #4]
 8000260:	f8cc 5004 	str.w	r5, [ip, #4]
 8000264:	6054      	str	r4, [r2, #4]
 8000266:	3108      	adds	r1, #8
 8000268:	3b01      	subs	r3, #1
 800026a:	d1d5      	bne.n	8000218 <arm_bitreversal_32_0>
 800026c:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 8000270:	4770      	bx	lr

08000272 <arm_bitreversal_16>:
 8000272:	1c4b      	adds	r3, r1, #1
 8000274:	2b01      	cmp	r3, #1
 8000276:	bf98      	it	ls
 8000278:	4770      	bxls	lr
 800027a:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800027e:	1c91      	adds	r1, r2, #2
 8000280:	089b      	lsrs	r3, r3, #2

08000282 <arm_bitreversal_16_0>:
 8000282:	f8b1 8004 	ldrh.w	r8, [r1, #4]
 8000286:	f8b1 9002 	ldrh.w	r9, [r1, #2]
 800028a:	880a      	ldrh	r2, [r1, #0]
 800028c:	f831 cc02 	ldrh.w	ip, [r1, #-2]
 8000290:	eb00 0858 	add.w	r8, r0, r8, lsr #1
 8000294:	eb00 0959 	add.w	r9, r0, r9, lsr #1
 8000298:	eb00 0252 	add.w	r2, r0, r2, lsr #1
 800029c:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
 80002a0:	f8d9 7000 	ldr.w	r7, [r9]
 80002a4:	f8d8 6000 	ldr.w	r6, [r8]
 80002a8:	6815      	ldr	r5, [r2, #0]
 80002aa:	f8dc 4000 	ldr.w	r4, [ip]
 80002ae:	f8c9 6000 	str.w	r6, [r9]
 80002b2:	f8c8 7000 	str.w	r7, [r8]
 80002b6:	f8cc 5000 	str.w	r5, [ip]
 80002ba:	6014      	str	r4, [r2, #0]
 80002bc:	3108      	adds	r1, #8
 80002be:	3b01      	subs	r3, #1
 80002c0:	d1df      	bne.n	8000282 <arm_bitreversal_16_0>
 80002c2:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_uldivmod>:
 80002c8:	b953      	cbnz	r3, 80002e0 <__aeabi_uldivmod+0x18>
 80002ca:	b94a      	cbnz	r2, 80002e0 <__aeabi_uldivmod+0x18>
 80002cc:	2900      	cmp	r1, #0
 80002ce:	bf08      	it	eq
 80002d0:	2800      	cmpeq	r0, #0
 80002d2:	bf1c      	itt	ne
 80002d4:	f04f 31ff 	movne.w	r1, #4294967295
 80002d8:	f04f 30ff 	movne.w	r0, #4294967295
 80002dc:	f000 b974 	b.w	80005c8 <__aeabi_idiv0>
 80002e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e8:	f000 f806 	bl	80002f8 <__udivmoddi4>
 80002ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f4:	b004      	add	sp, #16
 80002f6:	4770      	bx	lr

080002f8 <__udivmoddi4>:
 80002f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002fc:	9d08      	ldr	r5, [sp, #32]
 80002fe:	4604      	mov	r4, r0
 8000300:	468e      	mov	lr, r1
 8000302:	2b00      	cmp	r3, #0
 8000304:	d14d      	bne.n	80003a2 <__udivmoddi4+0xaa>
 8000306:	428a      	cmp	r2, r1
 8000308:	4694      	mov	ip, r2
 800030a:	d969      	bls.n	80003e0 <__udivmoddi4+0xe8>
 800030c:	fab2 f282 	clz	r2, r2
 8000310:	b152      	cbz	r2, 8000328 <__udivmoddi4+0x30>
 8000312:	fa01 f302 	lsl.w	r3, r1, r2
 8000316:	f1c2 0120 	rsb	r1, r2, #32
 800031a:	fa20 f101 	lsr.w	r1, r0, r1
 800031e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000322:	ea41 0e03 	orr.w	lr, r1, r3
 8000326:	4094      	lsls	r4, r2
 8000328:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800032c:	0c21      	lsrs	r1, r4, #16
 800032e:	fbbe f6f8 	udiv	r6, lr, r8
 8000332:	fa1f f78c 	uxth.w	r7, ip
 8000336:	fb08 e316 	mls	r3, r8, r6, lr
 800033a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800033e:	fb06 f107 	mul.w	r1, r6, r7
 8000342:	4299      	cmp	r1, r3
 8000344:	d90a      	bls.n	800035c <__udivmoddi4+0x64>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f106 30ff 	add.w	r0, r6, #4294967295
 800034e:	f080 811f 	bcs.w	8000590 <__udivmoddi4+0x298>
 8000352:	4299      	cmp	r1, r3
 8000354:	f240 811c 	bls.w	8000590 <__udivmoddi4+0x298>
 8000358:	3e02      	subs	r6, #2
 800035a:	4463      	add	r3, ip
 800035c:	1a5b      	subs	r3, r3, r1
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb3 f0f8 	udiv	r0, r3, r8
 8000364:	fb08 3310 	mls	r3, r8, r0, r3
 8000368:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800036c:	fb00 f707 	mul.w	r7, r0, r7
 8000370:	42a7      	cmp	r7, r4
 8000372:	d90a      	bls.n	800038a <__udivmoddi4+0x92>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 33ff 	add.w	r3, r0, #4294967295
 800037c:	f080 810a 	bcs.w	8000594 <__udivmoddi4+0x29c>
 8000380:	42a7      	cmp	r7, r4
 8000382:	f240 8107 	bls.w	8000594 <__udivmoddi4+0x29c>
 8000386:	4464      	add	r4, ip
 8000388:	3802      	subs	r0, #2
 800038a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800038e:	1be4      	subs	r4, r4, r7
 8000390:	2600      	movs	r6, #0
 8000392:	b11d      	cbz	r5, 800039c <__udivmoddi4+0xa4>
 8000394:	40d4      	lsrs	r4, r2
 8000396:	2300      	movs	r3, #0
 8000398:	e9c5 4300 	strd	r4, r3, [r5]
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	428b      	cmp	r3, r1
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0xc2>
 80003a6:	2d00      	cmp	r5, #0
 80003a8:	f000 80ef 	beq.w	800058a <__udivmoddi4+0x292>
 80003ac:	2600      	movs	r6, #0
 80003ae:	e9c5 0100 	strd	r0, r1, [r5]
 80003b2:	4630      	mov	r0, r6
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	fab3 f683 	clz	r6, r3
 80003be:	2e00      	cmp	r6, #0
 80003c0:	d14a      	bne.n	8000458 <__udivmoddi4+0x160>
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d302      	bcc.n	80003cc <__udivmoddi4+0xd4>
 80003c6:	4282      	cmp	r2, r0
 80003c8:	f200 80f9 	bhi.w	80005be <__udivmoddi4+0x2c6>
 80003cc:	1a84      	subs	r4, r0, r2
 80003ce:	eb61 0303 	sbc.w	r3, r1, r3
 80003d2:	2001      	movs	r0, #1
 80003d4:	469e      	mov	lr, r3
 80003d6:	2d00      	cmp	r5, #0
 80003d8:	d0e0      	beq.n	800039c <__udivmoddi4+0xa4>
 80003da:	e9c5 4e00 	strd	r4, lr, [r5]
 80003de:	e7dd      	b.n	800039c <__udivmoddi4+0xa4>
 80003e0:	b902      	cbnz	r2, 80003e4 <__udivmoddi4+0xec>
 80003e2:	deff      	udf	#255	; 0xff
 80003e4:	fab2 f282 	clz	r2, r2
 80003e8:	2a00      	cmp	r2, #0
 80003ea:	f040 8092 	bne.w	8000512 <__udivmoddi4+0x21a>
 80003ee:	eba1 010c 	sub.w	r1, r1, ip
 80003f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003f6:	fa1f fe8c 	uxth.w	lr, ip
 80003fa:	2601      	movs	r6, #1
 80003fc:	0c20      	lsrs	r0, r4, #16
 80003fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000402:	fb07 1113 	mls	r1, r7, r3, r1
 8000406:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040a:	fb0e f003 	mul.w	r0, lr, r3
 800040e:	4288      	cmp	r0, r1
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x12c>
 8000412:	eb1c 0101 	adds.w	r1, ip, r1
 8000416:	f103 38ff 	add.w	r8, r3, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x12a>
 800041c:	4288      	cmp	r0, r1
 800041e:	f200 80cb 	bhi.w	80005b8 <__udivmoddi4+0x2c0>
 8000422:	4643      	mov	r3, r8
 8000424:	1a09      	subs	r1, r1, r0
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb1 f0f7 	udiv	r0, r1, r7
 800042c:	fb07 1110 	mls	r1, r7, r0, r1
 8000430:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000434:	fb0e fe00 	mul.w	lr, lr, r0
 8000438:	45a6      	cmp	lr, r4
 800043a:	d908      	bls.n	800044e <__udivmoddi4+0x156>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d202      	bcs.n	800044c <__udivmoddi4+0x154>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f200 80bb 	bhi.w	80005c2 <__udivmoddi4+0x2ca>
 800044c:	4608      	mov	r0, r1
 800044e:	eba4 040e 	sub.w	r4, r4, lr
 8000452:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000456:	e79c      	b.n	8000392 <__udivmoddi4+0x9a>
 8000458:	f1c6 0720 	rsb	r7, r6, #32
 800045c:	40b3      	lsls	r3, r6
 800045e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000462:	ea4c 0c03 	orr.w	ip, ip, r3
 8000466:	fa20 f407 	lsr.w	r4, r0, r7
 800046a:	fa01 f306 	lsl.w	r3, r1, r6
 800046e:	431c      	orrs	r4, r3
 8000470:	40f9      	lsrs	r1, r7
 8000472:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000476:	fa00 f306 	lsl.w	r3, r0, r6
 800047a:	fbb1 f8f9 	udiv	r8, r1, r9
 800047e:	0c20      	lsrs	r0, r4, #16
 8000480:	fa1f fe8c 	uxth.w	lr, ip
 8000484:	fb09 1118 	mls	r1, r9, r8, r1
 8000488:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800048c:	fb08 f00e 	mul.w	r0, r8, lr
 8000490:	4288      	cmp	r0, r1
 8000492:	fa02 f206 	lsl.w	r2, r2, r6
 8000496:	d90b      	bls.n	80004b0 <__udivmoddi4+0x1b8>
 8000498:	eb1c 0101 	adds.w	r1, ip, r1
 800049c:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a0:	f080 8088 	bcs.w	80005b4 <__udivmoddi4+0x2bc>
 80004a4:	4288      	cmp	r0, r1
 80004a6:	f240 8085 	bls.w	80005b4 <__udivmoddi4+0x2bc>
 80004aa:	f1a8 0802 	sub.w	r8, r8, #2
 80004ae:	4461      	add	r1, ip
 80004b0:	1a09      	subs	r1, r1, r0
 80004b2:	b2a4      	uxth	r4, r4
 80004b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b8:	fb09 1110 	mls	r1, r9, r0, r1
 80004bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004c4:	458e      	cmp	lr, r1
 80004c6:	d908      	bls.n	80004da <__udivmoddi4+0x1e2>
 80004c8:	eb1c 0101 	adds.w	r1, ip, r1
 80004cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004d0:	d26c      	bcs.n	80005ac <__udivmoddi4+0x2b4>
 80004d2:	458e      	cmp	lr, r1
 80004d4:	d96a      	bls.n	80005ac <__udivmoddi4+0x2b4>
 80004d6:	3802      	subs	r0, #2
 80004d8:	4461      	add	r1, ip
 80004da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004de:	fba0 9402 	umull	r9, r4, r0, r2
 80004e2:	eba1 010e 	sub.w	r1, r1, lr
 80004e6:	42a1      	cmp	r1, r4
 80004e8:	46c8      	mov	r8, r9
 80004ea:	46a6      	mov	lr, r4
 80004ec:	d356      	bcc.n	800059c <__udivmoddi4+0x2a4>
 80004ee:	d053      	beq.n	8000598 <__udivmoddi4+0x2a0>
 80004f0:	b15d      	cbz	r5, 800050a <__udivmoddi4+0x212>
 80004f2:	ebb3 0208 	subs.w	r2, r3, r8
 80004f6:	eb61 010e 	sbc.w	r1, r1, lr
 80004fa:	fa01 f707 	lsl.w	r7, r1, r7
 80004fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000502:	40f1      	lsrs	r1, r6
 8000504:	431f      	orrs	r7, r3
 8000506:	e9c5 7100 	strd	r7, r1, [r5]
 800050a:	2600      	movs	r6, #0
 800050c:	4631      	mov	r1, r6
 800050e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000512:	f1c2 0320 	rsb	r3, r2, #32
 8000516:	40d8      	lsrs	r0, r3
 8000518:	fa0c fc02 	lsl.w	ip, ip, r2
 800051c:	fa21 f303 	lsr.w	r3, r1, r3
 8000520:	4091      	lsls	r1, r2
 8000522:	4301      	orrs	r1, r0
 8000524:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000528:	fa1f fe8c 	uxth.w	lr, ip
 800052c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000530:	fb07 3610 	mls	r6, r7, r0, r3
 8000534:	0c0b      	lsrs	r3, r1, #16
 8000536:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800053a:	fb00 f60e 	mul.w	r6, r0, lr
 800053e:	429e      	cmp	r6, r3
 8000540:	fa04 f402 	lsl.w	r4, r4, r2
 8000544:	d908      	bls.n	8000558 <__udivmoddi4+0x260>
 8000546:	eb1c 0303 	adds.w	r3, ip, r3
 800054a:	f100 38ff 	add.w	r8, r0, #4294967295
 800054e:	d22f      	bcs.n	80005b0 <__udivmoddi4+0x2b8>
 8000550:	429e      	cmp	r6, r3
 8000552:	d92d      	bls.n	80005b0 <__udivmoddi4+0x2b8>
 8000554:	3802      	subs	r0, #2
 8000556:	4463      	add	r3, ip
 8000558:	1b9b      	subs	r3, r3, r6
 800055a:	b289      	uxth	r1, r1
 800055c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000560:	fb07 3316 	mls	r3, r7, r6, r3
 8000564:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000568:	fb06 f30e 	mul.w	r3, r6, lr
 800056c:	428b      	cmp	r3, r1
 800056e:	d908      	bls.n	8000582 <__udivmoddi4+0x28a>
 8000570:	eb1c 0101 	adds.w	r1, ip, r1
 8000574:	f106 38ff 	add.w	r8, r6, #4294967295
 8000578:	d216      	bcs.n	80005a8 <__udivmoddi4+0x2b0>
 800057a:	428b      	cmp	r3, r1
 800057c:	d914      	bls.n	80005a8 <__udivmoddi4+0x2b0>
 800057e:	3e02      	subs	r6, #2
 8000580:	4461      	add	r1, ip
 8000582:	1ac9      	subs	r1, r1, r3
 8000584:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000588:	e738      	b.n	80003fc <__udivmoddi4+0x104>
 800058a:	462e      	mov	r6, r5
 800058c:	4628      	mov	r0, r5
 800058e:	e705      	b.n	800039c <__udivmoddi4+0xa4>
 8000590:	4606      	mov	r6, r0
 8000592:	e6e3      	b.n	800035c <__udivmoddi4+0x64>
 8000594:	4618      	mov	r0, r3
 8000596:	e6f8      	b.n	800038a <__udivmoddi4+0x92>
 8000598:	454b      	cmp	r3, r9
 800059a:	d2a9      	bcs.n	80004f0 <__udivmoddi4+0x1f8>
 800059c:	ebb9 0802 	subs.w	r8, r9, r2
 80005a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005a4:	3801      	subs	r0, #1
 80005a6:	e7a3      	b.n	80004f0 <__udivmoddi4+0x1f8>
 80005a8:	4646      	mov	r6, r8
 80005aa:	e7ea      	b.n	8000582 <__udivmoddi4+0x28a>
 80005ac:	4620      	mov	r0, r4
 80005ae:	e794      	b.n	80004da <__udivmoddi4+0x1e2>
 80005b0:	4640      	mov	r0, r8
 80005b2:	e7d1      	b.n	8000558 <__udivmoddi4+0x260>
 80005b4:	46d0      	mov	r8, sl
 80005b6:	e77b      	b.n	80004b0 <__udivmoddi4+0x1b8>
 80005b8:	3b02      	subs	r3, #2
 80005ba:	4461      	add	r1, ip
 80005bc:	e732      	b.n	8000424 <__udivmoddi4+0x12c>
 80005be:	4630      	mov	r0, r6
 80005c0:	e709      	b.n	80003d6 <__udivmoddi4+0xde>
 80005c2:	4464      	add	r4, ip
 80005c4:	3802      	subs	r0, #2
 80005c6:	e742      	b.n	800044e <__udivmoddi4+0x156>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <abs_complex>:
#include "arm_math.h"
#include "ssd1306.h"

// Returns absolute value of complex number
float abs_complex(float real, float imag)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	ed87 0a01 	vstr	s0, [r7, #4]
 80005d6:	edc7 0a00 	vstr	s1, [r7]
	return sqrtf(real * real + imag * imag);
 80005da:	edd7 7a01 	vldr	s15, [r7, #4]
 80005de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80005e2:	edd7 7a00 	vldr	s15, [r7]
 80005e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80005ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80005ee:	eeb0 0a67 	vmov.f32	s0, s15
 80005f2:	f007 fe49 	bl	8008288 <sqrtf>
 80005f6:	eef0 7a40 	vmov.f32	s15, s0
}
 80005fa:	eeb0 0a67 	vmov.f32	s0, s15
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}

08000604 <DisplayFFT>:

// Displays FFT result on a screen
void DisplayFFT()
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af02      	add	r7, sp, #8
	ssd1306_Fill(Black);
 800060a:	2000      	movs	r0, #0
 800060c:	f000 fd08 	bl	8001020 <ssd1306_Fill>
	switch(display_state)
 8000610:	4b2e      	ldr	r3, [pc, #184]	; (80006cc <DisplayFFT+0xc8>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b02      	cmp	r3, #2
 8000616:	d04c      	beq.n	80006b2 <DisplayFFT+0xae>
 8000618:	2b02      	cmp	r3, #2
 800061a:	dc4c      	bgt.n	80006b6 <DisplayFFT+0xb2>
 800061c:	2b00      	cmp	r3, #0
 800061e:	d002      	beq.n	8000626 <DisplayFFT+0x22>
 8000620:	2b01      	cmp	r3, #1
 8000622:	d01c      	beq.n	800065e <DisplayFFT+0x5a>
		for(int i=0; i<16; i++) ssd1306_FillRectangle(17+6*i, 0, 20+6*i, freqs[chosen_freqs[i]], White);
		break;
	case DISPLAY_COW:
		break;
	default:
		break;
 8000624:	e047      	b.n	80006b6 <DisplayFFT+0xb2>
		for(int i =0; i<128; i++) ssd1306_FillRectangle(i, 0, i,(uint8_t)freqs[3*i], White);
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	e014      	b.n	8000656 <DisplayFFT+0x52>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	b2d8      	uxtb	r0, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	b2d9      	uxtb	r1, r3
 8000634:	687a      	ldr	r2, [r7, #4]
 8000636:	4613      	mov	r3, r2
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	4413      	add	r3, r2
 800063c:	4a24      	ldr	r2, [pc, #144]	; (80006d0 <DisplayFFT+0xcc>)
 800063e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000642:	b2db      	uxtb	r3, r3
 8000644:	2201      	movs	r2, #1
 8000646:	9200      	str	r2, [sp, #0]
 8000648:	460a      	mov	r2, r1
 800064a:	2100      	movs	r1, #0
 800064c:	f000 fd88 	bl	8001160 <ssd1306_FillRectangle>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	3301      	adds	r3, #1
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2b7f      	cmp	r3, #127	; 0x7f
 800065a:	dde7      	ble.n	800062c <DisplayFFT+0x28>
		break;
 800065c:	e02c      	b.n	80006b8 <DisplayFFT+0xb4>
		for(int i=0; i<16; i++) ssd1306_FillRectangle(17+6*i, 0, 20+6*i, freqs[chosen_freqs[i]], White);
 800065e:	2300      	movs	r3, #0
 8000660:	603b      	str	r3, [r7, #0]
 8000662:	e022      	b.n	80006aa <DisplayFFT+0xa6>
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	b2db      	uxtb	r3, r3
 8000668:	461a      	mov	r2, r3
 800066a:	0052      	lsls	r2, r2, #1
 800066c:	4413      	add	r3, r2
 800066e:	005b      	lsls	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	3311      	adds	r3, #17
 8000674:	b2d8      	uxtb	r0, r3
 8000676:	683b      	ldr	r3, [r7, #0]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	461a      	mov	r2, r3
 800067c:	0052      	lsls	r2, r2, #1
 800067e:	4413      	add	r3, r2
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	b2db      	uxtb	r3, r3
 8000684:	3314      	adds	r3, #20
 8000686:	b2da      	uxtb	r2, r3
 8000688:	4912      	ldr	r1, [pc, #72]	; (80006d4 <DisplayFFT+0xd0>)
 800068a:	683b      	ldr	r3, [r7, #0]
 800068c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000690:	4619      	mov	r1, r3
 8000692:	4b0f      	ldr	r3, [pc, #60]	; (80006d0 <DisplayFFT+0xcc>)
 8000694:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000698:	b2db      	uxtb	r3, r3
 800069a:	2101      	movs	r1, #1
 800069c:	9100      	str	r1, [sp, #0]
 800069e:	2100      	movs	r1, #0
 80006a0:	f000 fd5e 	bl	8001160 <ssd1306_FillRectangle>
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	2b0f      	cmp	r3, #15
 80006ae:	ddd9      	ble.n	8000664 <DisplayFFT+0x60>
		break;
 80006b0:	e002      	b.n	80006b8 <DisplayFFT+0xb4>
		break;
 80006b2:	bf00      	nop
 80006b4:	e000      	b.n	80006b8 <DisplayFFT+0xb4>
		break;
 80006b6:	bf00      	nop
	}
	ssd1306_UpdateScreen();
 80006b8:	f000 fcd6 	bl	8001068 <ssd1306_UpdateScreen>
	buffer_state = FFT_BUFFER_CLEAR;
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <DisplayFFT+0xd4>)
 80006be:	2200      	movs	r2, #0
 80006c0:	701a      	strb	r2, [r3, #0]
}
 80006c2:	bf00      	nop
 80006c4:	3708      	adds	r7, #8
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	200000ad 	.word	0x200000ad
 80006d0:	2000c0c0 	.word	0x2000c0c0
 80006d4:	20000000 	.word	0x20000000
 80006d8:	200000ac 	.word	0x200000ac

080006dc <FFT>:

// Calculates FFT
void FFT(UART_HandleTypeDef *huart)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b084      	sub	sp, #16
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
	arm_rfft_fast_f32(&fft_handler, fft_input_buffer, fft_output_buffer, 0);
 80006e4:	2300      	movs	r3, #0
 80006e6:	4a57      	ldr	r2, [pc, #348]	; (8000844 <FFT+0x168>)
 80006e8:	4957      	ldr	r1, [pc, #348]	; (8000848 <FFT+0x16c>)
 80006ea:	4858      	ldr	r0, [pc, #352]	; (800084c <FFT+0x170>)
 80006ec:	f006 fe26 	bl	800733c <arm_rfft_fast_f32>

	int freqs_ptr = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	60fb      	str	r3, [r7, #12]

	for (int i=0; i<2048; i=i+2)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
 80006f8:	e03f      	b.n	800077a <FFT+0x9e>
	{
		freqs[freqs_ptr] = (int)(20*log10f(abs_complex(fft_output_buffer[i], fft_output_buffer[i+1]))) - 150.0f;
 80006fa:	4a52      	ldr	r2, [pc, #328]	; (8000844 <FFT+0x168>)
 80006fc:	68bb      	ldr	r3, [r7, #8]
 80006fe:	009b      	lsls	r3, r3, #2
 8000700:	4413      	add	r3, r2
 8000702:	edd3 7a00 	vldr	s15, [r3]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	3301      	adds	r3, #1
 800070a:	4a4e      	ldr	r2, [pc, #312]	; (8000844 <FFT+0x168>)
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	4413      	add	r3, r2
 8000710:	ed93 7a00 	vldr	s14, [r3]
 8000714:	eef0 0a47 	vmov.f32	s1, s14
 8000718:	eeb0 0a67 	vmov.f32	s0, s15
 800071c:	f7ff ff56 	bl	80005cc <abs_complex>
 8000720:	eef0 7a40 	vmov.f32	s15, s0
 8000724:	eeb0 0a67 	vmov.f32	s0, s15
 8000728:	f007 fd80 	bl	800822c <log10f>
 800072c:	eef0 7a40 	vmov.f32	s15, s0
 8000730:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8000734:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000738:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800073c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000740:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8000850 <FFT+0x174>
 8000744:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000748:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800074c:	ee17 1a90 	vmov	r1, s15
 8000750:	4a40      	ldr	r2, [pc, #256]	; (8000854 <FFT+0x178>)
 8000752:	68fb      	ldr	r3, [r7, #12]
 8000754:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		if (freqs[freqs_ptr] < 0)
 8000758:	4a3e      	ldr	r2, [pc, #248]	; (8000854 <FFT+0x178>)
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000760:	2b00      	cmp	r3, #0
 8000762:	da04      	bge.n	800076e <FFT+0x92>
			freqs[freqs_ptr] = 0;
 8000764:	4a3b      	ldr	r2, [pc, #236]	; (8000854 <FFT+0x178>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	2100      	movs	r1, #0
 800076a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		++freqs_ptr;
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
	for (int i=0; i<2048; i=i+2)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	3302      	adds	r3, #2
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
 800077c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000780:	dbbb      	blt.n	80006fa <FFT+0x1e>
	}

	uart_freq_buffer[0]  = 0xff;
 8000782:	4b35      	ldr	r3, [pc, #212]	; (8000858 <FFT+0x17c>)
 8000784:	22ff      	movs	r2, #255	; 0xff
 8000786:	701a      	strb	r2, [r3, #0]
	uart_freq_buffer[1]  = freqs[1];
 8000788:	4b32      	ldr	r3, [pc, #200]	; (8000854 <FFT+0x178>)
 800078a:	685b      	ldr	r3, [r3, #4]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4b32      	ldr	r3, [pc, #200]	; (8000858 <FFT+0x17c>)
 8000790:	705a      	strb	r2, [r3, #1]
	uart_freq_buffer[2]  = freqs[2];
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <FFT+0x178>)
 8000794:	689b      	ldr	r3, [r3, #8]
 8000796:	b2da      	uxtb	r2, r3
 8000798:	4b2f      	ldr	r3, [pc, #188]	; (8000858 <FFT+0x17c>)
 800079a:	709a      	strb	r2, [r3, #2]
	uart_freq_buffer[3]  = freqs[3];
 800079c:	4b2d      	ldr	r3, [pc, #180]	; (8000854 <FFT+0x178>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b2d      	ldr	r3, [pc, #180]	; (8000858 <FFT+0x17c>)
 80007a4:	70da      	strb	r2, [r3, #3]
	uart_freq_buffer[4]  = freqs[5];
 80007a6:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <FFT+0x178>)
 80007a8:	695b      	ldr	r3, [r3, #20]
 80007aa:	b2da      	uxtb	r2, r3
 80007ac:	4b2a      	ldr	r3, [pc, #168]	; (8000858 <FFT+0x17c>)
 80007ae:	711a      	strb	r2, [r3, #4]
	uart_freq_buffer[5]  = freqs[7];
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <FFT+0x178>)
 80007b2:	69db      	ldr	r3, [r3, #28]
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	4b28      	ldr	r3, [pc, #160]	; (8000858 <FFT+0x17c>)
 80007b8:	715a      	strb	r2, [r3, #5]
	uart_freq_buffer[6]  = freqs[11];
 80007ba:	4b26      	ldr	r3, [pc, #152]	; (8000854 <FFT+0x178>)
 80007bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007be:	b2da      	uxtb	r2, r3
 80007c0:	4b25      	ldr	r3, [pc, #148]	; (8000858 <FFT+0x17c>)
 80007c2:	719a      	strb	r2, [r3, #6]
	uart_freq_buffer[7]  = freqs[18];
 80007c4:	4b23      	ldr	r3, [pc, #140]	; (8000854 <FFT+0x178>)
 80007c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80007c8:	b2da      	uxtb	r2, r3
 80007ca:	4b23      	ldr	r3, [pc, #140]	; (8000858 <FFT+0x17c>)
 80007cc:	71da      	strb	r2, [r3, #7]
	uart_freq_buffer[8]  = freqs[29];
 80007ce:	4b21      	ldr	r3, [pc, #132]	; (8000854 <FFT+0x178>)
 80007d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	4b20      	ldr	r3, [pc, #128]	; (8000858 <FFT+0x17c>)
 80007d6:	721a      	strb	r2, [r3, #8]
	uart_freq_buffer[9]  = freqs[45];
 80007d8:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <FFT+0x178>)
 80007da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80007de:	b2da      	uxtb	r2, r3
 80007e0:	4b1d      	ldr	r3, [pc, #116]	; (8000858 <FFT+0x17c>)
 80007e2:	725a      	strb	r2, [r3, #9]
	uart_freq_buffer[10] = freqs[73];
 80007e4:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <FFT+0x178>)
 80007e6:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
 80007ea:	b2da      	uxtb	r2, r3
 80007ec:	4b1a      	ldr	r3, [pc, #104]	; (8000858 <FFT+0x17c>)
 80007ee:	729a      	strb	r2, [r3, #10]
	uart_freq_buffer[11] = freqs[115];
 80007f0:	4b18      	ldr	r3, [pc, #96]	; (8000854 <FFT+0x178>)
 80007f2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	4b17      	ldr	r3, [pc, #92]	; (8000858 <FFT+0x17c>)
 80007fa:	72da      	strb	r2, [r3, #11]
	uart_freq_buffer[12] = freqs[145];
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <FFT+0x178>)
 80007fe:	f8d3 3244 	ldr.w	r3, [r3, #580]	; 0x244
 8000802:	b2da      	uxtb	r2, r3
 8000804:	4b14      	ldr	r3, [pc, #80]	; (8000858 <FFT+0x17c>)
 8000806:	731a      	strb	r2, [r3, #12]
	uart_freq_buffer[13] = freqs[182];
 8000808:	4b12      	ldr	r3, [pc, #72]	; (8000854 <FFT+0x178>)
 800080a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800080e:	b2da      	uxtb	r2, r3
 8000810:	4b11      	ldr	r3, [pc, #68]	; (8000858 <FFT+0x17c>)
 8000812:	735a      	strb	r2, [r3, #13]
	uart_freq_buffer[14] = freqs[291];
 8000814:	4b0f      	ldr	r3, [pc, #60]	; (8000854 <FFT+0x178>)
 8000816:	f8d3 348c 	ldr.w	r3, [r3, #1164]	; 0x48c
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b0e      	ldr	r3, [pc, #56]	; (8000858 <FFT+0x17c>)
 800081e:	739a      	strb	r2, [r3, #14]
	uart_freq_buffer[15] = freqs[364];
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <FFT+0x178>)
 8000822:	f8d3 35b0 	ldr.w	r3, [r3, #1456]	; 0x5b0
 8000826:	b2da      	uxtb	r2, r3
 8000828:	4b0b      	ldr	r3, [pc, #44]	; (8000858 <FFT+0x17c>)
 800082a:	73da      	strb	r2, [r3, #15]

	HAL_UART_Transmit_DMA(huart, uart_freq_buffer, 16);
 800082c:	2210      	movs	r2, #16
 800082e:	490a      	ldr	r1, [pc, #40]	; (8000858 <FFT+0x17c>)
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f005 f8ff 	bl	8005a34 <HAL_UART_Transmit_DMA>
	buffer_state = FFT_DISPLAY;
 8000836:	4b09      	ldr	r3, [pc, #36]	; (800085c <FFT+0x180>)
 8000838:	2203      	movs	r2, #3
 800083a:	701a      	strb	r2, [r3, #0]
}
 800083c:	bf00      	nop
 800083e:	3710      	adds	r7, #16
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	2000a0b0 	.word	0x2000a0b0
 8000848:	200080b0 	.word	0x200080b0
 800084c:	2000d0c0 	.word	0x2000d0c0
 8000850:	43160000 	.word	0x43160000
 8000854:	2000c0c0 	.word	0x2000c0c0
 8000858:	2000c0b0 	.word	0x2000c0b0
 800085c:	200000ac 	.word	0x200000ac

08000860 <HAL_ADC_ConvHalfCpltCallback>:

#define USER_Btn_Pin GPIO_PIN_13
#define USER_Btn_GPIO_Port GPIOC

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
	if (buffer_state != FFT_DISPLAY)
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b03      	cmp	r3, #3
 800086e:	d002      	beq.n	8000876 <HAL_ADC_ConvHalfCpltCallback+0x16>
		buffer_state = FFT_BUFFER_HALF;
 8000870:	4b04      	ldr	r3, [pc, #16]	; (8000884 <HAL_ADC_ConvHalfCpltCallback+0x24>)
 8000872:	2201      	movs	r2, #1
 8000874:	701a      	strb	r2, [r3, #0]
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	200000ac 	.word	0x200000ac

08000888 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
	if (buffer_state != FFT_DISPLAY)
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <HAL_ADC_ConvCpltCallback+0x24>)
 8000892:	781b      	ldrb	r3, [r3, #0]
 8000894:	2b03      	cmp	r3, #3
 8000896:	d002      	beq.n	800089e <HAL_ADC_ConvCpltCallback+0x16>
		buffer_state = FFT_BUFFER_FULL;
 8000898:	4b04      	ldr	r3, [pc, #16]	; (80008ac <HAL_ADC_ConvCpltCallback+0x24>)
 800089a:	2202      	movs	r2, #2
 800089c:	701a      	strb	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	200000ac 	.word	0x200000ac

080008b0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	4603      	mov	r3, r0
 80008b8:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_Btn_Pin)
 80008ba:	88fb      	ldrh	r3, [r7, #6]
 80008bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80008c0:	d10a      	bne.n	80008d8 <HAL_GPIO_EXTI_Callback+0x28>
	{
		if(display_state++ >= 3) display_state = DISPLAY_MANY;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	1c5a      	adds	r2, r3, #1
 80008c8:	b2d1      	uxtb	r1, r2
 80008ca:	4a06      	ldr	r2, [pc, #24]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80008cc:	7011      	strb	r1, [r2, #0]
 80008ce:	2b02      	cmp	r3, #2
 80008d0:	d902      	bls.n	80008d8 <HAL_GPIO_EXTI_Callback+0x28>
 80008d2:	4b04      	ldr	r3, [pc, #16]	; (80008e4 <HAL_GPIO_EXTI_Callback+0x34>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	701a      	strb	r2, [r3, #0]
	}
}
 80008d8:	bf00      	nop
 80008da:	370c      	adds	r7, #12
 80008dc:	46bd      	mov	sp, r7
 80008de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e2:	4770      	bx	lr
 80008e4:	200000ad 	.word	0x200000ad

080008e8 <main_loop>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void main_loop()
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b082      	sub	sp, #8
 80008ec:	af00      	add	r7, sp, #0
	if (buffer_state == FFT_BUFFER_HALF)
 80008ee:	4b24      	ldr	r3, [pc, #144]	; (8000980 <main_loop+0x98>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d11a      	bne.n	800092c <main_loop+0x44>
		  {
			  for (int i = 0;i < 2048; i++)
 80008f6:	2300      	movs	r3, #0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	e010      	b.n	800091e <main_loop+0x36>
				  fft_input_buffer[i] = (float)(int)adc_buffer[i];
 80008fc:	4a21      	ldr	r2, [pc, #132]	; (8000984 <main_loop+0x9c>)
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000904:	ee07 3a90 	vmov	s15, r3
 8000908:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800090c:	4a1e      	ldr	r2, [pc, #120]	; (8000988 <main_loop+0xa0>)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	edc3 7a00 	vstr	s15, [r3]
			  for (int i = 0;i < 2048; i++)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	3301      	adds	r3, #1
 800091c:	607b      	str	r3, [r7, #4]
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000924:	dbea      	blt.n	80008fc <main_loop+0x14>
			  FFT(&huart3);
 8000926:	4819      	ldr	r0, [pc, #100]	; (800098c <main_loop+0xa4>)
 8000928:	f7ff fed8 	bl	80006dc <FFT>
		  }

		  if (buffer_state == FFT_BUFFER_FULL)
 800092c:	4b14      	ldr	r3, [pc, #80]	; (8000980 <main_loop+0x98>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	2b02      	cmp	r3, #2
 8000932:	d11b      	bne.n	800096c <main_loop+0x84>
		  {
			  for (int i = 2048;i < 4096; i++)
 8000934:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000938:	603b      	str	r3, [r7, #0]
 800093a:	e010      	b.n	800095e <main_loop+0x76>
				  fft_input_buffer[i] = (float)(int)adc_buffer[i];
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <main_loop+0x9c>)
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000944:	ee07 3a90 	vmov	s15, r3
 8000948:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800094c:	4a0e      	ldr	r2, [pc, #56]	; (8000988 <main_loop+0xa0>)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	4413      	add	r3, r2
 8000954:	edc3 7a00 	vstr	s15, [r3]
			  for (int i = 2048;i < 4096; i++)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	3301      	adds	r3, #1
 800095c:	603b      	str	r3, [r7, #0]
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000964:	dbea      	blt.n	800093c <main_loop+0x54>
			  FFT(&huart3);
 8000966:	4809      	ldr	r0, [pc, #36]	; (800098c <main_loop+0xa4>)
 8000968:	f7ff feb8 	bl	80006dc <FFT>
		  }

		  if (buffer_state == FFT_DISPLAY)
 800096c:	4b04      	ldr	r3, [pc, #16]	; (8000980 <main_loop+0x98>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b03      	cmp	r3, #3
 8000972:	d101      	bne.n	8000978 <main_loop+0x90>
		  {
			  DisplayFFT();
 8000974:	f7ff fe46 	bl	8000604 <DisplayFFT>
		  }
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200000ac 	.word	0x200000ac
 8000984:	200000b0 	.word	0x200000b0
 8000988:	200080b0 	.word	0x200080b0
 800098c:	2000d1d4 	.word	0x2000d1d4

08000990 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000994:	f000 ff31 	bl	80017fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000998:	f000 f822 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800099c:	f000 f9aa 	bl	8000cf4 <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 80009a0:	f000 f948 	bl	8000c34 <MX_USB_OTG_FS_PCD_Init>
  MX_DMA_Init();
 80009a4:	f000 f974 	bl	8000c90 <MX_DMA_Init>
  MX_ADC1_Init();
 80009a8:	f000 f882 	bl	8000ab0 <MX_ADC1_Init>
  MX_I2C1_Init();
 80009ac:	f000 f8d2 	bl	8000b54 <MX_I2C1_Init>
  MX_USART3_UART_Init();
 80009b0:	f000 f910 	bl	8000bd4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80009b4:	f000 faca 	bl	8000f4c <ssd1306_Init>
  //SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk | SCB_SHCSR_BUSFAULTENA_Msk; // Enables Advanced error handling
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_ADC_Start_DMA(&hadc1, adc_buffer, 4096);
 80009b8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80009bc:	4905      	ldr	r1, [pc, #20]	; (80009d4 <main+0x44>)
 80009be:	4806      	ldr	r0, [pc, #24]	; (80009d8 <main+0x48>)
 80009c0:	f001 f8f0 	bl	8001ba4 <HAL_ADC_Start_DMA>
  arm_rfft_fast_init_f32(&fft_handler, 2048);
 80009c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c8:	4804      	ldr	r0, [pc, #16]	; (80009dc <main+0x4c>)
 80009ca:	f006 fc05 	bl	80071d8 <arm_rfft_fast_init_f32>
  while (1)
  {
	main_loop();
 80009ce:	f7ff ff8b 	bl	80008e8 <main_loop>
 80009d2:	e7fc      	b.n	80009ce <main+0x3e>
 80009d4:	200000b0 	.word	0x200000b0
 80009d8:	2000d0d8 	.word	0x2000d0d8
 80009dc:	2000d0c0 	.word	0x2000d0c0

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 0320 	add.w	r3, r7, #32
 80009ea:	2230      	movs	r2, #48	; 0x30
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f007 fc14 	bl	800821c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a04:	f003 fefe 	bl	8004804 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a08:	4b27      	ldr	r3, [pc, #156]	; (8000aa8 <SystemClock_Config+0xc8>)
 8000a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a0c:	4a26      	ldr	r2, [pc, #152]	; (8000aa8 <SystemClock_Config+0xc8>)
 8000a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a12:	6413      	str	r3, [r2, #64]	; 0x40
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <SystemClock_Config+0xc8>)
 8000a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1c:	60bb      	str	r3, [r7, #8]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a20:	4b22      	ldr	r3, [pc, #136]	; (8000aac <SystemClock_Config+0xcc>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a28:	4a20      	ldr	r2, [pc, #128]	; (8000aac <SystemClock_Config+0xcc>)
 8000a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2e:	6013      	str	r3, [r2, #0]
 8000a30:	4b1e      	ldr	r3, [pc, #120]	; (8000aac <SystemClock_Config+0xcc>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a38:	607b      	str	r3, [r7, #4]
 8000a3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a3c:	2301      	movs	r3, #1
 8000a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a40:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a46:	2302      	movs	r3, #2
 8000a48:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a4a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a50:	2304      	movs	r3, #4
 8000a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000a54:	2348      	movs	r3, #72	; 0x48
 8000a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a5c:	2303      	movs	r3, #3
 8000a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 0320 	add.w	r3, r7, #32
 8000a64:	4618      	mov	r0, r3
 8000a66:	f003 fedd 	bl	8004824 <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a70:	f000 fa2e 	bl	8000ed0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a74:	230f      	movs	r3, #15
 8000a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8a:	f107 030c 	add.w	r3, r7, #12
 8000a8e:	2102      	movs	r1, #2
 8000a90:	4618      	mov	r0, r3
 8000a92:	f004 f96b 	bl	8004d6c <HAL_RCC_ClockConfig>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a9c:	f000 fa18 	bl	8000ed0 <Error_Handler>
  }
}
 8000aa0:	bf00      	nop
 8000aa2:	3750      	adds	r7, #80	; 0x50
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40007000 	.word	0x40007000

08000ab0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2200      	movs	r2, #0
 8000aba:	601a      	str	r2, [r3, #0]
 8000abc:	605a      	str	r2, [r3, #4]
 8000abe:	609a      	str	r2, [r3, #8]
 8000ac0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ac2:	4b21      	ldr	r3, [pc, #132]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000ac4:	4a21      	ldr	r2, [pc, #132]	; (8000b4c <MX_ADC1_Init+0x9c>)
 8000ac6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ac8:	4b1f      	ldr	r3, [pc, #124]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ace:	4b1e      	ldr	r3, [pc, #120]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ad4:	4b1c      	ldr	r3, [pc, #112]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000ada:	4b1b      	ldr	r3, [pc, #108]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000adc:	2201      	movs	r2, #1
 8000ade:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000ae0:	4b19      	ldr	r3, [pc, #100]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000af0:	4a17      	ldr	r2, [pc, #92]	; (8000b50 <MX_ADC1_Init+0xa0>)
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000af4:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000afc:	2201      	movs	r2, #1
 8000afe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000b00:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000b02:	2201      	movs	r2, #1
 8000b04:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000b0a:	2201      	movs	r2, #1
 8000b0c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b0e:	480e      	ldr	r0, [pc, #56]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000b10:	f000 fef4 	bl	80018fc <HAL_ADC_Init>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000b1a:	f000 f9d9 	bl	8000ed0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b22:	2301      	movs	r3, #1
 8000b24:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8000b26:	2306      	movs	r3, #6
 8000b28:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b2a:	463b      	mov	r3, r7
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_ADC1_Init+0x98>)
 8000b30:	f001 f946 	bl	8001dc0 <HAL_ADC_ConfigChannel>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000b3a:	f000 f9c9 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	2000d0d8 	.word	0x2000d0d8
 8000b4c:	40012000 	.word	0x40012000
 8000b50:	0f000001 	.word	0x0f000001

08000b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b58:	4b1b      	ldr	r3, [pc, #108]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b5a:	4a1c      	ldr	r2, [pc, #112]	; (8000bcc <MX_I2C1_Init+0x78>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8000b5e:	4b1a      	ldr	r3, [pc, #104]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b60:	4a1b      	ldr	r2, [pc, #108]	; (8000bd0 <MX_I2C1_Init+0x7c>)
 8000b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000b64:	4b18      	ldr	r3, [pc, #96]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b6a:	4b17      	ldr	r3, [pc, #92]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b70:	4b15      	ldr	r3, [pc, #84]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b76:	4b14      	ldr	r3, [pc, #80]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b7c:	4b12      	ldr	r3, [pc, #72]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b82:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b88:	4b0f      	ldr	r3, [pc, #60]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b8e:	480e      	ldr	r0, [pc, #56]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000b90:	f002 fafa 	bl	8003188 <HAL_I2C_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b9a:	f000 f999 	bl	8000ed0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b9e:	2100      	movs	r1, #0
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000ba2:	f003 fc4f 	bl	8004444 <HAL_I2CEx_ConfigAnalogFilter>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d001      	beq.n	8000bb0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000bac:	f000 f990 	bl	8000ed0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	4805      	ldr	r0, [pc, #20]	; (8000bc8 <MX_I2C1_Init+0x74>)
 8000bb4:	f003 fc91 	bl	80044da <HAL_I2CEx_ConfigDigitalFilter>
 8000bb8:	4603      	mov	r3, r0
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d001      	beq.n	8000bc2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000bbe:	f000 f987 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bc2:	bf00      	nop
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	2000d180 	.word	0x2000d180
 8000bcc:	40005400 	.word	0x40005400
 8000bd0:	00808cd2 	.word	0x00808cd2

08000bd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000bd8:	4b14      	ldr	r3, [pc, #80]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000bda:	4a15      	ldr	r2, [pc, #84]	; (8000c30 <MX_USART3_UART_Init+0x5c>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000bde:	4b13      	ldr	r3, [pc, #76]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b11      	ldr	r3, [pc, #68]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0f      	ldr	r3, [pc, #60]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b0c      	ldr	r3, [pc, #48]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b0b      	ldr	r3, [pc, #44]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b09      	ldr	r3, [pc, #36]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c10:	4b06      	ldr	r3, [pc, #24]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000c16:	4805      	ldr	r0, [pc, #20]	; (8000c2c <MX_USART3_UART_Init+0x58>)
 8000c18:	f004 febe 	bl	8005998 <HAL_UART_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000c22:	f000 f955 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	2000d1d4 	.word	0x2000d1d4
 8000c30:	40004800 	.word	0x40004800

08000c34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c3a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000c3e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000c40:	4b12      	ldr	r3, [pc, #72]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c42:	2206      	movs	r2, #6
 8000c44:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000c76:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000c78:	f003 fc7b 	bl	8004572 <HAL_PCD_Init>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c82:	f000 f925 	bl	8000ed0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	2000d2bc 	.word	0x2000d2bc

08000c90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c96:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <MX_DMA_Init+0x60>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a15      	ldr	r2, [pc, #84]	; (8000cf0 <MX_DMA_Init+0x60>)
 8000c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b13      	ldr	r3, [pc, #76]	; (8000cf0 <MX_DMA_Init+0x60>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cae:	4b10      	ldr	r3, [pc, #64]	; (8000cf0 <MX_DMA_Init+0x60>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	4a0f      	ldr	r2, [pc, #60]	; (8000cf0 <MX_DMA_Init+0x60>)
 8000cb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cb8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cba:	4b0d      	ldr	r3, [pc, #52]	; (8000cf0 <MX_DMA_Init+0x60>)
 8000cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cc2:	603b      	str	r3, [r7, #0]
 8000cc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	200e      	movs	r0, #14
 8000ccc:	f001 fc2f 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cd0:	200e      	movs	r0, #14
 8000cd2:	f001 fc48 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2038      	movs	r0, #56	; 0x38
 8000cdc:	f001 fc27 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ce0:	2038      	movs	r0, #56	; 0x38
 8000ce2:	f001 fc40 	bl	8002566 <HAL_NVIC_EnableIRQ>

}
 8000ce6:	bf00      	nop
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800

08000cf4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b08c      	sub	sp, #48	; 0x30
 8000cf8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	605a      	str	r2, [r3, #4]
 8000d04:	609a      	str	r2, [r3, #8]
 8000d06:	60da      	str	r2, [r3, #12]
 8000d08:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0a:	4b6c      	ldr	r3, [pc, #432]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a6b      	ldr	r2, [pc, #428]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d10:	f043 0304 	orr.w	r3, r3, #4
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b69      	ldr	r3, [pc, #420]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0304 	and.w	r3, r3, #4
 8000d1e:	61bb      	str	r3, [r7, #24]
 8000d20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d22:	4b66      	ldr	r3, [pc, #408]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d26:	4a65      	ldr	r2, [pc, #404]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2e:	4b63      	ldr	r3, [pc, #396]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d36:	617b      	str	r3, [r7, #20]
 8000d38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3a:	4b60      	ldr	r3, [pc, #384]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	4a5f      	ldr	r2, [pc, #380]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	; 0x30
 8000d46:	4b5d      	ldr	r3, [pc, #372]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	4b5a      	ldr	r3, [pc, #360]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a59      	ldr	r2, [pc, #356]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	60fb      	str	r3, [r7, #12]
 8000d68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6a:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	4a53      	ldr	r2, [pc, #332]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d70:	f043 0308 	orr.w	r3, r3, #8
 8000d74:	6313      	str	r3, [r2, #48]	; 0x30
 8000d76:	4b51      	ldr	r3, [pc, #324]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7a:	f003 0308 	and.w	r3, r3, #8
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d82:	4b4e      	ldr	r3, [pc, #312]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d86:	4a4d      	ldr	r2, [pc, #308]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8e:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <MX_GPIO_Init+0x1c8>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d96:	607b      	str	r3, [r7, #4]
 8000d98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000da0:	4847      	ldr	r0, [pc, #284]	; (8000ec0 <MX_GPIO_Init+0x1cc>)
 8000da2:	f002 f9bf 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000da6:	2200      	movs	r2, #0
 8000da8:	2140      	movs	r1, #64	; 0x40
 8000daa:	4846      	ldr	r0, [pc, #280]	; (8000ec4 <MX_GPIO_Init+0x1d0>)
 8000dac:	f002 f9ba 	bl	8003124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000db4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000db6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000dc0:	f107 031c 	add.w	r3, r7, #28
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4840      	ldr	r0, [pc, #256]	; (8000ec8 <MX_GPIO_Init+0x1d4>)
 8000dc8:	f002 f800 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dcc:	2332      	movs	r3, #50	; 0x32
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd8:	2303      	movs	r3, #3
 8000dda:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ddc:	230b      	movs	r3, #11
 8000dde:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000de0:	f107 031c 	add.w	r3, r7, #28
 8000de4:	4619      	mov	r1, r3
 8000de6:	4838      	ldr	r0, [pc, #224]	; (8000ec8 <MX_GPIO_Init+0x1d4>)
 8000de8:	f001 fff0 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000dec:	2386      	movs	r3, #134	; 0x86
 8000dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df0:	2302      	movs	r3, #2
 8000df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dfc:	230b      	movs	r3, #11
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e00:	f107 031c 	add.w	r3, r7, #28
 8000e04:	4619      	mov	r1, r3
 8000e06:	4831      	ldr	r0, [pc, #196]	; (8000ecc <MX_GPIO_Init+0x1d8>)
 8000e08:	f001 ffe0 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000e0c:	f244 0381 	movw	r3, #16513	; 0x4081
 8000e10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e12:	2301      	movs	r3, #1
 8000e14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e16:	2300      	movs	r3, #0
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 031c 	add.w	r3, r7, #28
 8000e22:	4619      	mov	r1, r3
 8000e24:	4826      	ldr	r0, [pc, #152]	; (8000ec0 <MX_GPIO_Init+0x1cc>)
 8000e26:	f001 ffd1 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e30:	2302      	movs	r3, #2
 8000e32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e34:	2300      	movs	r3, #0
 8000e36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e3c:	230b      	movs	r3, #11
 8000e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e40:	f107 031c 	add.w	r3, r7, #28
 8000e44:	4619      	mov	r1, r3
 8000e46:	481e      	ldr	r0, [pc, #120]	; (8000ec0 <MX_GPIO_Init+0x1cc>)
 8000e48:	f001 ffc0 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e4c:	2340      	movs	r3, #64	; 0x40
 8000e4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e50:	2301      	movs	r3, #1
 8000e52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e54:	2300      	movs	r3, #0
 8000e56:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	4619      	mov	r1, r3
 8000e62:	4818      	ldr	r0, [pc, #96]	; (8000ec4 <MX_GPIO_Init+0x1d0>)
 8000e64:	f001 ffb2 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e68:	2380      	movs	r3, #128	; 0x80
 8000e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e74:	f107 031c 	add.w	r3, r7, #28
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4812      	ldr	r0, [pc, #72]	; (8000ec4 <MX_GPIO_Init+0x1d0>)
 8000e7c:	f001 ffa6 	bl	8002dcc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e80:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	2302      	movs	r3, #2
 8000e88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e8e:	2303      	movs	r3, #3
 8000e90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e92:	230b      	movs	r3, #11
 8000e94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e96:	f107 031c 	add.w	r3, r7, #28
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4809      	ldr	r0, [pc, #36]	; (8000ec4 <MX_GPIO_Init+0x1d0>)
 8000e9e:	f001 ff95 	bl	8002dcc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2028      	movs	r0, #40	; 0x28
 8000ea8:	f001 fb41 	bl	800252e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000eac:	2028      	movs	r0, #40	; 0x28
 8000eae:	f001 fb5a 	bl	8002566 <HAL_NVIC_EnableIRQ>

}
 8000eb2:	bf00      	nop
 8000eb4:	3730      	adds	r7, #48	; 0x30
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40020400 	.word	0x40020400
 8000ec4:	40021800 	.word	0x40021800
 8000ec8:	40020800 	.word	0x40020800
 8000ecc:	40020000 	.word	0x40020000

08000ed0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ed4:	b672      	cpsid	i
}
 8000ed6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <Error_Handler+0x8>

08000eda <ssd1306_Reset>:
*
*   Low-Level procedures  
*
*/
#if defined(SSD1306_USE_I2C)
void ssd1306_Reset(void) {
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000ede:	bf00      	nop
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af04      	add	r7, sp, #16
 8000eee:	4603      	mov	r3, r0
 8000ef0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ef6:	9302      	str	r3, [sp, #8]
 8000ef8:	2301      	movs	r3, #1
 8000efa:	9301      	str	r3, [sp, #4]
 8000efc:	1dfb      	adds	r3, r7, #7
 8000efe:	9300      	str	r3, [sp, #0]
 8000f00:	2301      	movs	r3, #1
 8000f02:	2200      	movs	r2, #0
 8000f04:	2178      	movs	r1, #120	; 0x78
 8000f06:	4803      	ldr	r0, [pc, #12]	; (8000f14 <ssd1306_WriteCommand+0x2c>)
 8000f08:	f002 f9ce 	bl	80032a8 <HAL_I2C_Mem_Write>
}
 8000f0c:	bf00      	nop
 8000f0e:	3708      	adds	r7, #8
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	2000d180 	.word	0x2000d180

08000f18 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b086      	sub	sp, #24
 8000f1c:	af04      	add	r7, sp, #16
 8000f1e:	6078      	str	r0, [r7, #4]
 8000f20:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	b29b      	uxth	r3, r3
 8000f26:	f04f 32ff 	mov.w	r2, #4294967295
 8000f2a:	9202      	str	r2, [sp, #8]
 8000f2c:	9301      	str	r3, [sp, #4]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	9300      	str	r3, [sp, #0]
 8000f32:	2301      	movs	r3, #1
 8000f34:	2240      	movs	r2, #64	; 0x40
 8000f36:	2178      	movs	r1, #120	; 0x78
 8000f38:	4803      	ldr	r0, [pc, #12]	; (8000f48 <ssd1306_WriteData+0x30>)
 8000f3a:	f002 f9b5 	bl	80032a8 <HAL_I2C_Mem_Write>
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	2000d180 	.word	0x2000d180

08000f4c <ssd1306_Init>:
/*
*
*   Initialize the oled screen
*
*/
void ssd1306_Init(void) {
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000f50:	f7ff ffc3 	bl	8000eda <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000f54:	2064      	movs	r0, #100	; 0x64
 8000f56:	f000 fcad 	bl	80018b4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000f5a:	2000      	movs	r0, #0
 8000f5c:	f000 f962 	bl	8001224 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000f60:	2020      	movs	r0, #32
 8000f62:	f7ff ffc1 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000f66:	2000      	movs	r0, #0
 8000f68:	f7ff ffbe 	bl	8000ee8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode, 0-7
 8000f6c:	20b0      	movs	r0, #176	; 0xb0
 8000f6e:	f7ff ffbb 	bl	8000ee8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8000f72:	20c0      	movs	r0, #192	; 0xc0
 8000f74:	f7ff ffb8 	bl	8000ee8 <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000f78:	2000      	movs	r0, #0
 8000f7a:	f7ff ffb5 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000f7e:	2010      	movs	r0, #16
 8000f80:	f7ff ffb2 	bl	8000ee8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000f84:	2040      	movs	r0, #64	; 0x40
 8000f86:	f7ff ffaf 	bl	8000ee8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000f8a:	20ff      	movs	r0, #255	; 0xff
 8000f8c:	f000 f936 	bl	80011fc <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000f90:	20a1      	movs	r0, #161	; 0xa1
 8000f92:	f7ff ffa9 	bl	8000ee8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000f96:	20a6      	movs	r0, #166	; 0xa6
 8000f98:	f7ff ffa6 	bl	8000ee8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000f9c:	20a8      	movs	r0, #168	; 0xa8
 8000f9e:	f7ff ffa3 	bl	8000ee8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000fa2:	203f      	movs	r0, #63	; 0x3f
 8000fa4:	f7ff ffa0 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000fa8:	20a4      	movs	r0, #164	; 0xa4
 8000faa:	f7ff ff9d 	bl	8000ee8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000fae:	20d3      	movs	r0, #211	; 0xd3
 8000fb0:	f7ff ff9a 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	f7ff ff97 	bl	8000ee8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000fba:	20d5      	movs	r0, #213	; 0xd5
 8000fbc:	f7ff ff94 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000fc0:	20f0      	movs	r0, #240	; 0xf0
 8000fc2:	f7ff ff91 	bl	8000ee8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000fc6:	20d9      	movs	r0, #217	; 0xd9
 8000fc8:	f7ff ff8e 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000fcc:	2022      	movs	r0, #34	; 0x22
 8000fce:	f7ff ff8b 	bl	8000ee8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000fd2:	20da      	movs	r0, #218	; 0xda
 8000fd4:	f7ff ff88 	bl	8000ee8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000fd8:	2012      	movs	r0, #18
 8000fda:	f7ff ff85 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000fde:	20db      	movs	r0, #219	; 0xdb
 8000fe0:	f7ff ff82 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000fe4:	2020      	movs	r0, #32
 8000fe6:	f7ff ff7f 	bl	8000ee8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000fea:	208d      	movs	r0, #141	; 0x8d
 8000fec:	f7ff ff7c 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000ff0:	2014      	movs	r0, #20
 8000ff2:	f7ff ff79 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 f914 	bl	8001224 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000ffc:	2000      	movs	r0, #0
 8000ffe:	f000 f80f 	bl	8001020 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001002:	f000 f831 	bl	8001068 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001006:	4b05      	ldr	r3, [pc, #20]	; (800101c <ssd1306_Init+0xd0>)
 8001008:	2200      	movs	r2, #0
 800100a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800100c:	4b03      	ldr	r3, [pc, #12]	; (800101c <ssd1306_Init+0xd0>)
 800100e:	2200      	movs	r2, #0
 8001010:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001012:	4b02      	ldr	r3, [pc, #8]	; (800101c <ssd1306_Init+0xd0>)
 8001014:	2201      	movs	r2, #1
 8001016:	711a      	strb	r2, [r3, #4]
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	2000dbc4 	.word	0x2000dbc4

08001020 <ssd1306_Fill>:
*   Buffer operations
*
*/

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001020:	b480      	push	{r7}
 8001022:	b085      	sub	sp, #20
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e00d      	b.n	800104c <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <ssd1306_Fill+0x1a>
 8001036:	2100      	movs	r1, #0
 8001038:	e000      	b.n	800103c <ssd1306_Fill+0x1c>
 800103a:	21ff      	movs	r1, #255	; 0xff
 800103c:	4a09      	ldr	r2, [pc, #36]	; (8001064 <ssd1306_Fill+0x44>)
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4413      	add	r3, r2
 8001042:	460a      	mov	r2, r1
 8001044:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	3301      	adds	r3, #1
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001052:	d3ed      	bcc.n	8001030 <ssd1306_Fill+0x10>
    }
}
 8001054:	bf00      	nop
 8001056:	bf00      	nop
 8001058:	3714      	adds	r7, #20
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	2000d7c4 	.word	0x2000d7c4

08001068 <ssd1306_UpdateScreen>:
    return ret;
}


/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
    // Write data to each page of RAM. Number of pages
    // depends on the screen height:
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800106e:	2300      	movs	r3, #0
 8001070:	71fb      	strb	r3, [r7, #7]
 8001072:	e016      	b.n	80010a2 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001074:	79fb      	ldrb	r3, [r7, #7]
 8001076:	3b50      	subs	r3, #80	; 0x50
 8001078:	b2db      	uxtb	r3, r3
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff ff34 	bl	8000ee8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001080:	2002      	movs	r0, #2
 8001082:	f7ff ff31 	bl	8000ee8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001086:	2010      	movs	r0, #16
 8001088:	f7ff ff2e 	bl	8000ee8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 800108c:	79fb      	ldrb	r3, [r7, #7]
 800108e:	01db      	lsls	r3, r3, #7
 8001090:	4a08      	ldr	r2, [pc, #32]	; (80010b4 <ssd1306_UpdateScreen+0x4c>)
 8001092:	4413      	add	r3, r2
 8001094:	2180      	movs	r1, #128	; 0x80
 8001096:	4618      	mov	r0, r3
 8001098:	f7ff ff3e 	bl	8000f18 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3301      	adds	r3, #1
 80010a0:	71fb      	strb	r3, [r7, #7]
 80010a2:	79fb      	ldrb	r3, [r7, #7]
 80010a4:	2b07      	cmp	r3, #7
 80010a6:	d9e5      	bls.n	8001074 <ssd1306_UpdateScreen+0xc>
    }
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	2000d7c4 	.word	0x2000d7c4

080010b8 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	4603      	mov	r3, r0
 80010c0:	71fb      	strb	r3, [r7, #7]
 80010c2:	460b      	mov	r3, r1
 80010c4:	71bb      	strb	r3, [r7, #6]
 80010c6:	4613      	mov	r3, r2
 80010c8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	db3d      	blt.n	800114e <ssd1306_DrawPixel+0x96>
 80010d2:	79bb      	ldrb	r3, [r7, #6]
 80010d4:	2b3f      	cmp	r3, #63	; 0x3f
 80010d6:	d83a      	bhi.n	800114e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80010d8:	797b      	ldrb	r3, [r7, #5]
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d11a      	bne.n	8001114 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80010de:	79fa      	ldrb	r2, [r7, #7]
 80010e0:	79bb      	ldrb	r3, [r7, #6]
 80010e2:	08db      	lsrs	r3, r3, #3
 80010e4:	b2d8      	uxtb	r0, r3
 80010e6:	4603      	mov	r3, r0
 80010e8:	01db      	lsls	r3, r3, #7
 80010ea:	4413      	add	r3, r2
 80010ec:	4a1b      	ldr	r2, [pc, #108]	; (800115c <ssd1306_DrawPixel+0xa4>)
 80010ee:	5cd3      	ldrb	r3, [r2, r3]
 80010f0:	b25a      	sxtb	r2, r3
 80010f2:	79bb      	ldrb	r3, [r7, #6]
 80010f4:	f003 0307 	and.w	r3, r3, #7
 80010f8:	2101      	movs	r1, #1
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	b25b      	sxtb	r3, r3
 8001100:	4313      	orrs	r3, r2
 8001102:	b259      	sxtb	r1, r3
 8001104:	79fa      	ldrb	r2, [r7, #7]
 8001106:	4603      	mov	r3, r0
 8001108:	01db      	lsls	r3, r3, #7
 800110a:	4413      	add	r3, r2
 800110c:	b2c9      	uxtb	r1, r1
 800110e:	4a13      	ldr	r2, [pc, #76]	; (800115c <ssd1306_DrawPixel+0xa4>)
 8001110:	54d1      	strb	r1, [r2, r3]
 8001112:	e01d      	b.n	8001150 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001114:	79fa      	ldrb	r2, [r7, #7]
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	08db      	lsrs	r3, r3, #3
 800111a:	b2d8      	uxtb	r0, r3
 800111c:	4603      	mov	r3, r0
 800111e:	01db      	lsls	r3, r3, #7
 8001120:	4413      	add	r3, r2
 8001122:	4a0e      	ldr	r2, [pc, #56]	; (800115c <ssd1306_DrawPixel+0xa4>)
 8001124:	5cd3      	ldrb	r3, [r2, r3]
 8001126:	b25a      	sxtb	r2, r3
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	f003 0307 	and.w	r3, r3, #7
 800112e:	2101      	movs	r1, #1
 8001130:	fa01 f303 	lsl.w	r3, r1, r3
 8001134:	b25b      	sxtb	r3, r3
 8001136:	43db      	mvns	r3, r3
 8001138:	b25b      	sxtb	r3, r3
 800113a:	4013      	ands	r3, r2
 800113c:	b259      	sxtb	r1, r3
 800113e:	79fa      	ldrb	r2, [r7, #7]
 8001140:	4603      	mov	r3, r0
 8001142:	01db      	lsls	r3, r3, #7
 8001144:	4413      	add	r3, r2
 8001146:	b2c9      	uxtb	r1, r1
 8001148:	4a04      	ldr	r2, [pc, #16]	; (800115c <ssd1306_DrawPixel+0xa4>)
 800114a:	54d1      	strb	r1, [r2, r3]
 800114c:	e000      	b.n	8001150 <ssd1306_DrawPixel+0x98>
        return;
 800114e:	bf00      	nop
    }
}
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	2000d7c4 	.word	0x2000d7c4

08001160 <ssd1306_FillRectangle>:
    return;
}


/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001160:	b590      	push	{r4, r7, lr}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	4604      	mov	r4, r0
 8001168:	4608      	mov	r0, r1
 800116a:	4611      	mov	r1, r2
 800116c:	461a      	mov	r2, r3
 800116e:	4623      	mov	r3, r4
 8001170:	71fb      	strb	r3, [r7, #7]
 8001172:	4603      	mov	r3, r0
 8001174:	71bb      	strb	r3, [r7, #6]
 8001176:	460b      	mov	r3, r1
 8001178:	717b      	strb	r3, [r7, #5]
 800117a:	4613      	mov	r3, r2
 800117c:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800117e:	79fa      	ldrb	r2, [r7, #7]
 8001180:	797b      	ldrb	r3, [r7, #5]
 8001182:	4293      	cmp	r3, r2
 8001184:	bf28      	it	cs
 8001186:	4613      	movcs	r3, r2
 8001188:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 800118a:	797a      	ldrb	r2, [r7, #5]
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	4293      	cmp	r3, r2
 8001190:	bf38      	it	cc
 8001192:	4613      	movcc	r3, r2
 8001194:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8001196:	79ba      	ldrb	r2, [r7, #6]
 8001198:	793b      	ldrb	r3, [r7, #4]
 800119a:	4293      	cmp	r3, r2
 800119c:	bf28      	it	cs
 800119e:	4613      	movcs	r3, r2
 80011a0:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 80011a2:	793a      	ldrb	r2, [r7, #4]
 80011a4:	79bb      	ldrb	r3, [r7, #6]
 80011a6:	4293      	cmp	r3, r2
 80011a8:	bf38      	it	cc
 80011aa:	4613      	movcc	r3, r2
 80011ac:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80011ae:	7afb      	ldrb	r3, [r7, #11]
 80011b0:	73fb      	strb	r3, [r7, #15]
 80011b2:	e017      	b.n	80011e4 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80011b4:	7b7b      	ldrb	r3, [r7, #13]
 80011b6:	73bb      	strb	r3, [r7, #14]
 80011b8:	e009      	b.n	80011ce <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 80011ba:	f897 2020 	ldrb.w	r2, [r7, #32]
 80011be:	7bf9      	ldrb	r1, [r7, #15]
 80011c0:	7bbb      	ldrb	r3, [r7, #14]
 80011c2:	4618      	mov	r0, r3
 80011c4:	f7ff ff78 	bl	80010b8 <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80011c8:	7bbb      	ldrb	r3, [r7, #14]
 80011ca:	3301      	adds	r3, #1
 80011cc:	73bb      	strb	r3, [r7, #14]
 80011ce:	7bba      	ldrb	r2, [r7, #14]
 80011d0:	7b3b      	ldrb	r3, [r7, #12]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d803      	bhi.n	80011de <ssd1306_FillRectangle+0x7e>
 80011d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	daed      	bge.n	80011ba <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	3301      	adds	r3, #1
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	7bfa      	ldrb	r2, [r7, #15]
 80011e6:	7abb      	ldrb	r3, [r7, #10]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d803      	bhi.n	80011f4 <ssd1306_FillRectangle+0x94>
 80011ec:	7bfb      	ldrb	r3, [r7, #15]
 80011ee:	2b3f      	cmp	r3, #63	; 0x3f
 80011f0:	d9e0      	bls.n	80011b4 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80011f2:	bf00      	nop
 80011f4:	bf00      	nop
}
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd90      	pop	{r4, r7, pc}

080011fc <ssd1306_SetContrast>:
*
*   Utility procedures
*
*/

void ssd1306_SetContrast(const uint8_t value) {
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b084      	sub	sp, #16
 8001200:	af00      	add	r7, sp, #0
 8001202:	4603      	mov	r3, r0
 8001204:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001206:	2381      	movs	r3, #129	; 0x81
 8001208:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800120a:	7bfb      	ldrb	r3, [r7, #15]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff fe6b 	bl	8000ee8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe67 	bl	8000ee8 <ssd1306_WriteCommand>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <ssd1306_SetDisplayOn>:


void ssd1306_SetDisplayOn(const uint8_t on) {
 8001224:	b580      	push	{r7, lr}
 8001226:	b084      	sub	sp, #16
 8001228:	af00      	add	r7, sp, #0
 800122a:	4603      	mov	r3, r0
 800122c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800122e:	79fb      	ldrb	r3, [r7, #7]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d005      	beq.n	8001240 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001234:	23af      	movs	r3, #175	; 0xaf
 8001236:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001238:	4b08      	ldr	r3, [pc, #32]	; (800125c <ssd1306_SetDisplayOn+0x38>)
 800123a:	2201      	movs	r2, #1
 800123c:	715a      	strb	r2, [r3, #5]
 800123e:	e004      	b.n	800124a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001240:	23ae      	movs	r3, #174	; 0xae
 8001242:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <ssd1306_SetDisplayOn+0x38>)
 8001246:	2200      	movs	r2, #0
 8001248:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800124a:	7bfb      	ldrb	r3, [r7, #15]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff fe4b 	bl	8000ee8 <ssd1306_WriteCommand>
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	2000dbc4 	.word	0x2000dbc4

08001260 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <HAL_MspInit+0x44>)
 8001268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126a:	4a0e      	ldr	r2, [pc, #56]	; (80012a4 <HAL_MspInit+0x44>)
 800126c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001270:	6413      	str	r3, [r2, #64]	; 0x40
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_MspInit+0x44>)
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800127a:	607b      	str	r3, [r7, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800127e:	4b09      	ldr	r3, [pc, #36]	; (80012a4 <HAL_MspInit+0x44>)
 8001280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001282:	4a08      	ldr	r2, [pc, #32]	; (80012a4 <HAL_MspInit+0x44>)
 8001284:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001288:	6453      	str	r3, [r2, #68]	; 0x44
 800128a:	4b06      	ldr	r3, [pc, #24]	; (80012a4 <HAL_MspInit+0x44>)
 800128c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800128e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001292:	603b      	str	r3, [r7, #0]
 8001294:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr
 80012a2:	bf00      	nop
 80012a4:	40023800 	.word	0x40023800

080012a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b08a      	sub	sp, #40	; 0x28
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	2200      	movs	r2, #0
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	605a      	str	r2, [r3, #4]
 80012ba:	609a      	str	r2, [r3, #8]
 80012bc:	60da      	str	r2, [r3, #12]
 80012be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a31      	ldr	r2, [pc, #196]	; (800138c <HAL_ADC_MspInit+0xe4>)
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d15b      	bne.n	8001382 <HAL_ADC_MspInit+0xda>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80012ca:	4b31      	ldr	r3, [pc, #196]	; (8001390 <HAL_ADC_MspInit+0xe8>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ce:	4a30      	ldr	r2, [pc, #192]	; (8001390 <HAL_ADC_MspInit+0xe8>)
 80012d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d4:	6453      	str	r3, [r2, #68]	; 0x44
 80012d6:	4b2e      	ldr	r3, [pc, #184]	; (8001390 <HAL_ADC_MspInit+0xe8>)
 80012d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012de:	613b      	str	r3, [r7, #16]
 80012e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b2b      	ldr	r3, [pc, #172]	; (8001390 <HAL_ADC_MspInit+0xe8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	4a2a      	ldr	r2, [pc, #168]	; (8001390 <HAL_ADC_MspInit+0xe8>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	6313      	str	r3, [r2, #48]	; 0x30
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <HAL_ADC_MspInit+0xe8>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012fa:	2301      	movs	r3, #1
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012fe:	2303      	movs	r3, #3
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	4619      	mov	r1, r3
 800130c:	4821      	ldr	r0, [pc, #132]	; (8001394 <HAL_ADC_MspInit+0xec>)
 800130e:	f001 fd5d 	bl	8002dcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001312:	4b21      	ldr	r3, [pc, #132]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 8001314:	4a21      	ldr	r2, [pc, #132]	; (800139c <HAL_ADC_MspInit+0xf4>)
 8001316:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001318:	4b1f      	ldr	r3, [pc, #124]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 800131a:	2200      	movs	r2, #0
 800131c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800131e:	4b1e      	ldr	r3, [pc, #120]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001324:	4b1c      	ldr	r3, [pc, #112]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 800132c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001330:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001332:	4b19      	ldr	r3, [pc, #100]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 8001334:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001338:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800133a:	4b17      	ldr	r3, [pc, #92]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 800133c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001340:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001342:	4b15      	ldr	r3, [pc, #84]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 8001344:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001348:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800134a:	4b13      	ldr	r3, [pc, #76]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 800134c:	2200      	movs	r2, #0
 800134e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001350:	4b11      	ldr	r3, [pc, #68]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 8001352:	2200      	movs	r2, #0
 8001354:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001356:	4810      	ldr	r0, [pc, #64]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 8001358:	f001 f920 	bl	800259c <HAL_DMA_Init>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001362:	f7ff fdb5 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4a0b      	ldr	r2, [pc, #44]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 800136a:	639a      	str	r2, [r3, #56]	; 0x38
 800136c:	4a0a      	ldr	r2, [pc, #40]	; (8001398 <HAL_ADC_MspInit+0xf0>)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8001372:	2200      	movs	r2, #0
 8001374:	2100      	movs	r1, #0
 8001376:	2012      	movs	r0, #18
 8001378:	f001 f8d9 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800137c:	2012      	movs	r0, #18
 800137e:	f001 f8f2 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001382:	bf00      	nop
 8001384:	3728      	adds	r7, #40	; 0x28
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40012000 	.word	0x40012000
 8001390:	40023800 	.word	0x40023800
 8001394:	40020000 	.word	0x40020000
 8001398:	2000d120 	.word	0x2000d120
 800139c:	40026410 	.word	0x40026410

080013a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b0aa      	sub	sp, #168	; 0xa8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	2284      	movs	r2, #132	; 0x84
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f006 ff2b 	bl	800821c <memset>
  if(hi2c->Instance==I2C1)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a2a      	ldr	r2, [pc, #168]	; (8001474 <HAL_I2C_MspInit+0xd4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d14c      	bne.n	800146a <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80013d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013d4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f003 feea 	bl	80051b8 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013ea:	f7ff fd71 	bl	8000ed0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ee:	4b22      	ldr	r3, [pc, #136]	; (8001478 <HAL_I2C_MspInit+0xd8>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a21      	ldr	r2, [pc, #132]	; (8001478 <HAL_I2C_MspInit+0xd8>)
 80013f4:	f043 0302 	orr.w	r3, r3, #2
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b1f      	ldr	r3, [pc, #124]	; (8001478 <HAL_I2C_MspInit+0xd8>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0302 	and.w	r3, r3, #2
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001406:	f44f 7340 	mov.w	r3, #768	; 0x300
 800140a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800140e:	2312      	movs	r3, #18
 8001410:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800141a:	2303      	movs	r3, #3
 800141c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001420:	2304      	movs	r3, #4
 8001422:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001426:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800142a:	4619      	mov	r1, r3
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <HAL_I2C_MspInit+0xdc>)
 800142e:	f001 fccd 	bl	8002dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_I2C_MspInit+0xd8>)
 8001434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001436:	4a10      	ldr	r2, [pc, #64]	; (8001478 <HAL_I2C_MspInit+0xd8>)
 8001438:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800143c:	6413      	str	r3, [r2, #64]	; 0x40
 800143e:	4b0e      	ldr	r3, [pc, #56]	; (8001478 <HAL_I2C_MspInit+0xd8>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	2100      	movs	r1, #0
 800144e:	201f      	movs	r0, #31
 8001450:	f001 f86d 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001454:	201f      	movs	r0, #31
 8001456:	f001 f886 	bl	8002566 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800145a:	2200      	movs	r2, #0
 800145c:	2100      	movs	r1, #0
 800145e:	2020      	movs	r0, #32
 8001460:	f001 f865 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001464:	2020      	movs	r0, #32
 8001466:	f001 f87e 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	37a8      	adds	r7, #168	; 0xa8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40005400 	.word	0x40005400
 8001478:	40023800 	.word	0x40023800
 800147c:	40020400 	.word	0x40020400

08001480 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b0aa      	sub	sp, #168	; 0xa8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001488:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
 8001496:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001498:	f107 0310 	add.w	r3, r7, #16
 800149c:	2284      	movs	r2, #132	; 0x84
 800149e:	2100      	movs	r1, #0
 80014a0:	4618      	mov	r0, r3
 80014a2:	f006 febb 	bl	800821c <memset>
  if(huart->Instance==USART3)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4a3d      	ldr	r2, [pc, #244]	; (80015a0 <HAL_UART_MspInit+0x120>)
 80014ac:	4293      	cmp	r3, r2
 80014ae:	d172      	bne.n	8001596 <HAL_UART_MspInit+0x116>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014b4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80014b6:	2300      	movs	r3, #0
 80014b8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ba:	f107 0310 	add.w	r3, r7, #16
 80014be:	4618      	mov	r0, r3
 80014c0:	f003 fe7a 	bl	80051b8 <HAL_RCCEx_PeriphCLKConfig>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80014ca:	f7ff fd01 	bl	8000ed0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <HAL_UART_MspInit+0x124>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	4a34      	ldr	r2, [pc, #208]	; (80015a4 <HAL_UART_MspInit+0x124>)
 80014d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014d8:	6413      	str	r3, [r2, #64]	; 0x40
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <HAL_UART_MspInit+0x124>)
 80014dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80014e6:	4b2f      	ldr	r3, [pc, #188]	; (80015a4 <HAL_UART_MspInit+0x124>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	4a2e      	ldr	r2, [pc, #184]	; (80015a4 <HAL_UART_MspInit+0x124>)
 80014ec:	f043 0308 	orr.w	r3, r3, #8
 80014f0:	6313      	str	r3, [r2, #48]	; 0x30
 80014f2:	4b2c      	ldr	r3, [pc, #176]	; (80015a4 <HAL_UART_MspInit+0x124>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	f003 0308 	and.w	r3, r3, #8
 80014fa:	60bb      	str	r3, [r7, #8]
 80014fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80014fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001502:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	2302      	movs	r3, #2
 8001508:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001512:	2303      	movs	r3, #3
 8001514:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001518:	2307      	movs	r3, #7
 800151a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800151e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001522:	4619      	mov	r1, r3
 8001524:	4820      	ldr	r0, [pc, #128]	; (80015a8 <HAL_UART_MspInit+0x128>)
 8001526:	f001 fc51 	bl	8002dcc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 800152a:	4b20      	ldr	r3, [pc, #128]	; (80015ac <HAL_UART_MspInit+0x12c>)
 800152c:	4a20      	ldr	r2, [pc, #128]	; (80015b0 <HAL_UART_MspInit+0x130>)
 800152e:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 8001530:	4b1e      	ldr	r3, [pc, #120]	; (80015ac <HAL_UART_MspInit+0x12c>)
 8001532:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001536:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001538:	4b1c      	ldr	r3, [pc, #112]	; (80015ac <HAL_UART_MspInit+0x12c>)
 800153a:	2240      	movs	r2, #64	; 0x40
 800153c:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800153e:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <HAL_UART_MspInit+0x12c>)
 8001540:	2200      	movs	r2, #0
 8001542:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001544:	4b19      	ldr	r3, [pc, #100]	; (80015ac <HAL_UART_MspInit+0x12c>)
 8001546:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154a:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800154c:	4b17      	ldr	r3, [pc, #92]	; (80015ac <HAL_UART_MspInit+0x12c>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001552:	4b16      	ldr	r3, [pc, #88]	; (80015ac <HAL_UART_MspInit+0x12c>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001558:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_UART_MspInit+0x12c>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800155e:	4b13      	ldr	r3, [pc, #76]	; (80015ac <HAL_UART_MspInit+0x12c>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001564:	4b11      	ldr	r3, [pc, #68]	; (80015ac <HAL_UART_MspInit+0x12c>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800156a:	4810      	ldr	r0, [pc, #64]	; (80015ac <HAL_UART_MspInit+0x12c>)
 800156c:	f001 f816 	bl	800259c <HAL_DMA_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001576:	f7ff fcab 	bl	8000ed0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a0b      	ldr	r2, [pc, #44]	; (80015ac <HAL_UART_MspInit+0x12c>)
 800157e:	671a      	str	r2, [r3, #112]	; 0x70
 8001580:	4a0a      	ldr	r2, [pc, #40]	; (80015ac <HAL_UART_MspInit+0x12c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2027      	movs	r0, #39	; 0x27
 800158c:	f000 ffcf 	bl	800252e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001590:	2027      	movs	r0, #39	; 0x27
 8001592:	f000 ffe8 	bl	8002566 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001596:	bf00      	nop
 8001598:	37a8      	adds	r7, #168	; 0xa8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	40004800 	.word	0x40004800
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020c00 	.word	0x40020c00
 80015ac:	2000d25c 	.word	0x2000d25c
 80015b0:	40026058 	.word	0x40026058

080015b4 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b0ac      	sub	sp, #176	; 0xb0
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80015c0:	2200      	movs	r2, #0
 80015c2:	601a      	str	r2, [r3, #0]
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	609a      	str	r2, [r3, #8]
 80015c8:	60da      	str	r2, [r3, #12]
 80015ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015cc:	f107 0318 	add.w	r3, r7, #24
 80015d0:	2284      	movs	r2, #132	; 0x84
 80015d2:	2100      	movs	r1, #0
 80015d4:	4618      	mov	r0, r3
 80015d6:	f006 fe21 	bl	800821c <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015e2:	d159      	bne.n	8001698 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80015e4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80015e8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f0:	f107 0318 	add.w	r3, r7, #24
 80015f4:	4618      	mov	r0, r3
 80015f6:	f003 fddf 	bl	80051b8 <HAL_RCCEx_PeriphCLKConfig>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d001      	beq.n	8001604 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001600:	f7ff fc66 	bl	8000ed0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001604:	4b26      	ldr	r3, [pc, #152]	; (80016a0 <HAL_PCD_MspInit+0xec>)
 8001606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001608:	4a25      	ldr	r2, [pc, #148]	; (80016a0 <HAL_PCD_MspInit+0xec>)
 800160a:	f043 0301 	orr.w	r3, r3, #1
 800160e:	6313      	str	r3, [r2, #48]	; 0x30
 8001610:	4b23      	ldr	r3, [pc, #140]	; (80016a0 <HAL_PCD_MspInit+0xec>)
 8001612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001614:	f003 0301 	and.w	r3, r3, #1
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800161c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001620:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001624:	2302      	movs	r3, #2
 8001626:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001630:	2303      	movs	r3, #3
 8001632:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001636:	230a      	movs	r3, #10
 8001638:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001640:	4619      	mov	r1, r3
 8001642:	4818      	ldr	r0, [pc, #96]	; (80016a4 <HAL_PCD_MspInit+0xf0>)
 8001644:	f001 fbc2 	bl	8002dcc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001648:	f44f 7300 	mov.w	r3, #512	; 0x200
 800164c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001650:	2300      	movs	r3, #0
 8001652:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800165c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001660:	4619      	mov	r1, r3
 8001662:	4810      	ldr	r0, [pc, #64]	; (80016a4 <HAL_PCD_MspInit+0xf0>)
 8001664:	f001 fbb2 	bl	8002dcc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001668:	4b0d      	ldr	r3, [pc, #52]	; (80016a0 <HAL_PCD_MspInit+0xec>)
 800166a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166c:	4a0c      	ldr	r2, [pc, #48]	; (80016a0 <HAL_PCD_MspInit+0xec>)
 800166e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001672:	6353      	str	r3, [r2, #52]	; 0x34
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <HAL_PCD_MspInit+0xec>)
 8001676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800167c:	613b      	str	r3, [r7, #16]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	4b07      	ldr	r3, [pc, #28]	; (80016a0 <HAL_PCD_MspInit+0xec>)
 8001682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001684:	4a06      	ldr	r2, [pc, #24]	; (80016a0 <HAL_PCD_MspInit+0xec>)
 8001686:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800168a:	6453      	str	r3, [r2, #68]	; 0x44
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_PCD_MspInit+0xec>)
 800168e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001690:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001694:	60fb      	str	r3, [r7, #12]
 8001696:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001698:	bf00      	nop
 800169a:	37b0      	adds	r7, #176	; 0xb0
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020000 	.word	0x40020000

080016a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016ac:	e7fe      	b.n	80016ac <NMI_Handler+0x4>

080016ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ae:	b480      	push	{r7}
 80016b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler+0x4>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <MemManage_Handler+0x4>

080016ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <BusFault_Handler+0x4>

080016c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <UsageFault_Handler+0x4>

080016c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016ca:	bf00      	nop
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016e2:	b480      	push	{r7}
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016f4:	f000 f8be 	bl	8001874 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}

080016fc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001700:	4802      	ldr	r0, [pc, #8]	; (800170c <DMA1_Stream3_IRQHandler+0x10>)
 8001702:	f001 f8eb 	bl	80028dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001706:	bf00      	nop
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	2000d25c 	.word	0x2000d25c

08001710 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <ADC_IRQHandler+0x10>)
 8001716:	f000 f935 	bl	8001984 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	2000d0d8 	.word	0x2000d0d8

08001724 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <I2C1_EV_IRQHandler+0x10>)
 800172a:	f001 fed1 	bl	80034d0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000d180 	.word	0x2000d180

08001738 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 800173c:	4802      	ldr	r0, [pc, #8]	; (8001748 <I2C1_ER_IRQHandler+0x10>)
 800173e:	f001 fee1 	bl	8003504 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	2000d180 	.word	0x2000d180

0800174c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001750:	4802      	ldr	r0, [pc, #8]	; (800175c <USART3_IRQHandler+0x10>)
 8001752:	f004 f9eb 	bl	8005b2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001756:	bf00      	nop
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	2000d1d4 	.word	0x2000d1d4

08001760 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001764:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001768:	f001 fcf6 	bl	8003158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001774:	4802      	ldr	r0, [pc, #8]	; (8001780 <DMA2_Stream0_IRQHandler+0x10>)
 8001776:	f001 f8b1 	bl	80028dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800177a:	bf00      	nop
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	2000d120 	.word	0x2000d120

08001784 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SystemInit+0x20>)
 800178a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <SystemInit+0x20>)
 8001790:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001794:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001798:	bf00      	nop
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <Reset_Handler>:
 80017a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80017e0 <LoopFillZerobss+0x12>
 80017ac:	480d      	ldr	r0, [pc, #52]	; (80017e4 <LoopFillZerobss+0x16>)
 80017ae:	490e      	ldr	r1, [pc, #56]	; (80017e8 <LoopFillZerobss+0x1a>)
 80017b0:	4a0e      	ldr	r2, [pc, #56]	; (80017ec <LoopFillZerobss+0x1e>)
 80017b2:	2300      	movs	r3, #0
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:
 80017b6:	58d4      	ldr	r4, [r2, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:
 80017bc:	18c4      	adds	r4, r0, r3
 80017be:	428c      	cmp	r4, r1
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
 80017c2:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <LoopFillZerobss+0x22>)
 80017c4:	4c0b      	ldr	r4, [pc, #44]	; (80017f4 <LoopFillZerobss+0x26>)
 80017c6:	2300      	movs	r3, #0
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:
 80017ca:	6013      	str	r3, [r2, #0]
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:
 80017ce:	42a2      	cmp	r2, r4
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>
 80017d2:	f7ff ffd7 	bl	8001784 <SystemInit>
 80017d6:	f006 fcfd 	bl	80081d4 <__libc_init_array>
 80017da:	f7ff f8d9 	bl	8000990 <main>
 80017de:	4770      	bx	lr
 80017e0:	20050000 	.word	0x20050000
 80017e4:	20000000 	.word	0x20000000
 80017e8:	20000090 	.word	0x20000090
 80017ec:	0801ba0c 	.word	0x0801ba0c
 80017f0:	20000090 	.word	0x20000090
 80017f4:	2000dbd0 	.word	0x2000dbd0

080017f8 <CAN1_RX0_IRQHandler>:
 80017f8:	e7fe      	b.n	80017f8 <CAN1_RX0_IRQHandler>

080017fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017fa:	b580      	push	{r7, lr}
 80017fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017fe:	2003      	movs	r0, #3
 8001800:	f000 fe8a 	bl	8002518 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001804:	2000      	movs	r0, #0
 8001806:	f000 f805 	bl	8001814 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800180a:	f7ff fd29 	bl	8001260 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	bd80      	pop	{r7, pc}

08001814 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800181c:	4b12      	ldr	r3, [pc, #72]	; (8001868 <HAL_InitTick+0x54>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	4b12      	ldr	r3, [pc, #72]	; (800186c <HAL_InitTick+0x58>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	4619      	mov	r1, r3
 8001826:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800182a:	fbb3 f3f1 	udiv	r3, r3, r1
 800182e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001832:	4618      	mov	r0, r3
 8001834:	f000 fea5 	bl	8002582 <HAL_SYSTICK_Config>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e00e      	b.n	8001860 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2b0f      	cmp	r3, #15
 8001846:	d80a      	bhi.n	800185e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001848:	2200      	movs	r2, #0
 800184a:	6879      	ldr	r1, [r7, #4]
 800184c:	f04f 30ff 	mov.w	r0, #4294967295
 8001850:	f000 fe6d 	bl	800252e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001854:	4a06      	ldr	r2, [pc, #24]	; (8001870 <HAL_InitTick+0x5c>)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e000      	b.n	8001860 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
}
 8001860:	4618      	mov	r0, r3
 8001862:	3708      	adds	r7, #8
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	20000020 	.word	0x20000020
 800186c:	20000028 	.word	0x20000028
 8001870:	20000024 	.word	0x20000024

08001874 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_IncTick+0x20>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	461a      	mov	r2, r3
 800187e:	4b06      	ldr	r3, [pc, #24]	; (8001898 <HAL_IncTick+0x24>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4413      	add	r3, r2
 8001884:	4a04      	ldr	r2, [pc, #16]	; (8001898 <HAL_IncTick+0x24>)
 8001886:	6013      	str	r3, [r2, #0]
}
 8001888:	bf00      	nop
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	20000028 	.word	0x20000028
 8001898:	2000dbcc 	.word	0x2000dbcc

0800189c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  return uwTick;
 80018a0:	4b03      	ldr	r3, [pc, #12]	; (80018b0 <HAL_GetTick+0x14>)
 80018a2:	681b      	ldr	r3, [r3, #0]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	2000dbcc 	.word	0x2000dbcc

080018b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018bc:	f7ff ffee 	bl	800189c <HAL_GetTick>
 80018c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018cc:	d005      	beq.n	80018da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <HAL_Delay+0x44>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	461a      	mov	r2, r3
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	4413      	add	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018da:	bf00      	nop
 80018dc:	f7ff ffde 	bl	800189c <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	429a      	cmp	r2, r3
 80018ea:	d8f7      	bhi.n	80018dc <HAL_Delay+0x28>
  {
  }
}
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000028 	.word	0x20000028

080018fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d101      	bne.n	8001912 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
 8001910:	e031      	b.n	8001976 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d109      	bne.n	800192e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f7ff fcc4 	bl	80012a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0310 	and.w	r3, r3, #16
 8001936:	2b00      	cmp	r3, #0
 8001938:	d116      	bne.n	8001968 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800193e:	4b10      	ldr	r3, [pc, #64]	; (8001980 <HAL_ADC_Init+0x84>)
 8001940:	4013      	ands	r3, r2
 8001942:	f043 0202 	orr.w	r2, r3, #2
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 fb8e 	bl	800206c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800195a:	f023 0303 	bic.w	r3, r3, #3
 800195e:	f043 0201 	orr.w	r2, r3, #1
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	641a      	str	r2, [r3, #64]	; 0x40
 8001966:	e001      	b.n	800196c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001968:	2301      	movs	r3, #1
 800196a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001974:	7bfb      	ldrb	r3, [r7, #15]
}
 8001976:	4618      	mov	r0, r3
 8001978:	3710      	adds	r7, #16
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	ffffeefd 	.word	0xffffeefd

08001984 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	617b      	str	r3, [r7, #20]
 8001990:	2300      	movs	r3, #0
 8001992:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 0320 	and.w	r3, r3, #32
 80019b2:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d049      	beq.n	8001a4e <HAL_ADC_IRQHandler+0xca>
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d046      	beq.n	8001a4e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c4:	f003 0310 	and.w	r3, r3, #16
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d105      	bne.n	80019d8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d12b      	bne.n	8001a3e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d127      	bne.n	8001a3e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d006      	beq.n	8001a0a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	689b      	ldr	r3, [r3, #8]
 8001a02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d119      	bne.n	8001a3e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	685a      	ldr	r2, [r3, #4]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f022 0220 	bic.w	r2, r2, #32
 8001a18:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d105      	bne.n	8001a3e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f043 0201 	orr.w	r2, r3, #1
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7fe ff22 	bl	8000888 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f06f 0212 	mvn.w	r2, #18
 8001a4c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a5c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d057      	beq.n	8001b14 <HAL_ADC_IRQHandler+0x190>
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d054      	beq.n	8001b14 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6e:	f003 0310 	and.w	r3, r3, #16
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d105      	bne.n	8001a82 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d139      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a96:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d006      	beq.n	8001aac <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d12b      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d124      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d11d      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d119      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ade:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d105      	bne.n	8001b04 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	f043 0201 	orr.w	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f000 fc2d 	bl	8002364 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f06f 020c 	mvn.w	r2, #12
 8001b12:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b22:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d017      	beq.n	8001b5a <HAL_ADC_IRQHandler+0x1d6>
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d014      	beq.n	8001b5a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 0301 	and.w	r3, r3, #1
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d10d      	bne.n	8001b5a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b42:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001b4a:	6878      	ldr	r0, [r7, #4]
 8001b4c:	f000 f924 	bl	8001d98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f06f 0201 	mvn.w	r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	f003 0320 	and.w	r3, r3, #32
 8001b60:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b68:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d015      	beq.n	8001b9c <HAL_ADC_IRQHandler+0x218>
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d012      	beq.n	8001b9c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b7a:	f043 0202 	orr.w	r2, r3, #2
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f06f 0220 	mvn.w	r2, #32
 8001b8a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f000 f90d 	bl	8001dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f06f 0220 	mvn.w	r2, #32
 8001b9a:	601a      	str	r2, [r3, #0]
  }
}
 8001b9c:	bf00      	nop
 8001b9e:	3718      	adds	r7, #24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b086      	sub	sp, #24
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	60f8      	str	r0, [r7, #12]
 8001bac:	60b9      	str	r1, [r7, #8]
 8001bae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d101      	bne.n	8001bc2 <HAL_ADC_Start_DMA+0x1e>
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	e0d4      	b.n	8001d6c <HAL_ADC_Start_DMA+0x1c8>
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d018      	beq.n	8001c0a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	689a      	ldr	r2, [r3, #8]
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f042 0201 	orr.w	r2, r2, #1
 8001be6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001be8:	4b62      	ldr	r3, [pc, #392]	; (8001d74 <HAL_ADC_Start_DMA+0x1d0>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a62      	ldr	r2, [pc, #392]	; (8001d78 <HAL_ADC_Start_DMA+0x1d4>)
 8001bee:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf2:	0c9a      	lsrs	r2, r3, #18
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	005b      	lsls	r3, r3, #1
 8001bf8:	4413      	add	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001bfc:	e002      	b.n	8001c04 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f9      	bne.n	8001bfe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	f040 809c 	bne.w	8001d52 <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c1e:	4b57      	ldr	r3, [pc, #348]	; (8001d7c <HAL_ADC_Start_DMA+0x1d8>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d007      	beq.n	8001c48 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001c40:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001c50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c54:	d106      	bne.n	8001c64 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	f023 0206 	bic.w	r2, r3, #6
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	645a      	str	r2, [r3, #68]	; 0x44
 8001c62:	e002      	b.n	8001c6a <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c76:	4a42      	ldr	r2, [pc, #264]	; (8001d80 <HAL_ADC_Start_DMA+0x1dc>)
 8001c78:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7e:	4a41      	ldr	r2, [pc, #260]	; (8001d84 <HAL_ADC_Start_DMA+0x1e0>)
 8001c80:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c86:	4a40      	ldr	r2, [pc, #256]	; (8001d88 <HAL_ADC_Start_DMA+0x1e4>)
 8001c88:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001c92:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	685a      	ldr	r2, [r3, #4]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001ca2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	689a      	ldr	r2, [r3, #8]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	334c      	adds	r3, #76	; 0x4c
 8001cbe:	4619      	mov	r1, r3
 8001cc0:	68ba      	ldr	r2, [r7, #8]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	f000 fd18 	bl	80026f8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001cc8:	4b30      	ldr	r3, [pc, #192]	; (8001d8c <HAL_ADC_Start_DMA+0x1e8>)
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 031f 	and.w	r3, r3, #31
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d10f      	bne.n	8001cf4 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d143      	bne.n	8001d6a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	e03a      	b.n	8001d6a <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a25      	ldr	r2, [pc, #148]	; (8001d90 <HAL_ADC_Start_DMA+0x1ec>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d10e      	bne.n	8001d1c <HAL_ADC_Start_DMA+0x178>
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	689b      	ldr	r3, [r3, #8]
 8001d04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d107      	bne.n	8001d1c <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	689a      	ldr	r2, [r3, #8]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d1a:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <HAL_ADC_Start_DMA+0x1e8>)
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d120      	bne.n	8001d6a <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a19      	ldr	r2, [pc, #100]	; (8001d94 <HAL_ADC_Start_DMA+0x1f0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d11b      	bne.n	8001d6a <HAL_ADC_Start_DMA+0x1c6>
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d114      	bne.n	8001d6a <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001d4e:	609a      	str	r2, [r3, #8]
 8001d50:	e00b      	b.n	8001d6a <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	f043 0210 	orr.w	r2, r3, #16
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	f043 0201 	orr.w	r2, r3, #1
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001d6a:	2300      	movs	r3, #0
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	3718      	adds	r7, #24
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	20000020 	.word	0x20000020
 8001d78:	431bde83 	.word	0x431bde83
 8001d7c:	fffff8fe 	.word	0xfffff8fe
 8001d80:	08002261 	.word	0x08002261
 8001d84:	0800231b 	.word	0x0800231b
 8001d88:	08002337 	.word	0x08002337
 8001d8c:	40012300 	.word	0x40012300
 8001d90:	40012000 	.word	0x40012000
 8001d94:	40012200 	.word	0x40012200

08001d98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001da0:	bf00      	nop
 8001da2:	370c      	adds	r7, #12
 8001da4:	46bd      	mov	sp, r7
 8001da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001daa:	4770      	bx	lr

08001dac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001dac:	b480      	push	{r7}
 8001dae:	b083      	sub	sp, #12
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr

08001dc0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b085      	sub	sp, #20
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d101      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x1c>
 8001dd8:	2302      	movs	r3, #2
 8001dda:	e136      	b.n	800204a <HAL_ADC_ConfigChannel+0x28a>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2b09      	cmp	r3, #9
 8001dea:	d93a      	bls.n	8001e62 <HAL_ADC_ConfigChannel+0xa2>
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001df4:	d035      	beq.n	8001e62 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	68d9      	ldr	r1, [r3, #12]
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	461a      	mov	r2, r3
 8001e04:	4613      	mov	r3, r2
 8001e06:	005b      	lsls	r3, r3, #1
 8001e08:	4413      	add	r3, r2
 8001e0a:	3b1e      	subs	r3, #30
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	43da      	mvns	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	400a      	ands	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a8d      	ldr	r2, [pc, #564]	; (8002058 <HAL_ADC_ConfigChannel+0x298>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d10a      	bne.n	8001e3c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	68d9      	ldr	r1, [r3, #12]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	061a      	lsls	r2, r3, #24
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e3a:	e035      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68d9      	ldr	r1, [r3, #12]
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	4603      	mov	r3, r0
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4403      	add	r3, r0
 8001e54:	3b1e      	subs	r3, #30
 8001e56:	409a      	lsls	r2, r3
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e60:	e022      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6919      	ldr	r1, [r3, #16]
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4613      	mov	r3, r2
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	4413      	add	r3, r2
 8001e76:	2207      	movs	r2, #7
 8001e78:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7c:	43da      	mvns	r2, r3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	400a      	ands	r2, r1
 8001e84:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	6919      	ldr	r1, [r3, #16]
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	4618      	mov	r0, r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4403      	add	r3, r0
 8001e9e:	409a      	lsls	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	2b06      	cmp	r3, #6
 8001eae:	d824      	bhi.n	8001efa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685a      	ldr	r2, [r3, #4]
 8001eba:	4613      	mov	r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3b05      	subs	r3, #5
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43da      	mvns	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	400a      	ands	r2, r1
 8001ed0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	4618      	mov	r0, r3
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	685a      	ldr	r2, [r3, #4]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	009b      	lsls	r3, r3, #2
 8001ee8:	4413      	add	r3, r2
 8001eea:	3b05      	subs	r3, #5
 8001eec:	fa00 f203 	lsl.w	r2, r0, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	430a      	orrs	r2, r1
 8001ef6:	635a      	str	r2, [r3, #52]	; 0x34
 8001ef8:	e04c      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d824      	bhi.n	8001f4c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685a      	ldr	r2, [r3, #4]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	4413      	add	r3, r2
 8001f12:	3b23      	subs	r3, #35	; 0x23
 8001f14:	221f      	movs	r2, #31
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43da      	mvns	r2, r3
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	400a      	ands	r2, r1
 8001f22:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	b29b      	uxth	r3, r3
 8001f30:	4618      	mov	r0, r3
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	685a      	ldr	r2, [r3, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	4413      	add	r3, r2
 8001f3c:	3b23      	subs	r3, #35	; 0x23
 8001f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	631a      	str	r2, [r3, #48]	; 0x30
 8001f4a:	e023      	b.n	8001f94 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	009b      	lsls	r3, r3, #2
 8001f5a:	4413      	add	r3, r2
 8001f5c:	3b41      	subs	r3, #65	; 0x41
 8001f5e:	221f      	movs	r2, #31
 8001f60:	fa02 f303 	lsl.w	r3, r2, r3
 8001f64:	43da      	mvns	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	400a      	ands	r2, r1
 8001f6c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	4613      	mov	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4413      	add	r3, r2
 8001f86:	3b41      	subs	r3, #65	; 0x41
 8001f88:	fa00 f203 	lsl.w	r2, r0, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	430a      	orrs	r2, r1
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a30      	ldr	r2, [pc, #192]	; (800205c <HAL_ADC_ConfigChannel+0x29c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d10a      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1f4>
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001fa6:	d105      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001fa8:	4b2d      	ldr	r3, [pc, #180]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	4a2c      	ldr	r2, [pc, #176]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001fb2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	; (800205c <HAL_ADC_ConfigChannel+0x29c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d10f      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	2b12      	cmp	r3, #18
 8001fc4:	d10b      	bne.n	8001fde <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001fc6:	4b26      	ldr	r3, [pc, #152]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	4a25      	ldr	r2, [pc, #148]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fcc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fd0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001fd2:	4b23      	ldr	r3, [pc, #140]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	4a22      	ldr	r2, [pc, #136]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001fd8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fdc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a1e      	ldr	r2, [pc, #120]	; (800205c <HAL_ADC_ConfigChannel+0x29c>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d12b      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x280>
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a1a      	ldr	r2, [pc, #104]	; (8002058 <HAL_ADC_ConfigChannel+0x298>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d003      	beq.n	8001ffa <HAL_ADC_ConfigChannel+0x23a>
 8001ff2:	683b      	ldr	r3, [r7, #0]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b11      	cmp	r3, #17
 8001ff8:	d122      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001ffa:	4b19      	ldr	r3, [pc, #100]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8001ffc:	685b      	ldr	r3, [r3, #4]
 8001ffe:	4a18      	ldr	r2, [pc, #96]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8002000:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002004:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002006:	4b16      	ldr	r3, [pc, #88]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	4a15      	ldr	r2, [pc, #84]	; (8002060 <HAL_ADC_ConfigChannel+0x2a0>)
 800200c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002010:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a10      	ldr	r2, [pc, #64]	; (8002058 <HAL_ADC_ConfigChannel+0x298>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d111      	bne.n	8002040 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800201c:	4b11      	ldr	r3, [pc, #68]	; (8002064 <HAL_ADC_ConfigChannel+0x2a4>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a11      	ldr	r2, [pc, #68]	; (8002068 <HAL_ADC_ConfigChannel+0x2a8>)
 8002022:	fba2 2303 	umull	r2, r3, r2, r3
 8002026:	0c9a      	lsrs	r2, r3, #18
 8002028:	4613      	mov	r3, r2
 800202a:	009b      	lsls	r3, r3, #2
 800202c:	4413      	add	r3, r2
 800202e:	005b      	lsls	r3, r3, #1
 8002030:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002032:	e002      	b.n	800203a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	3b01      	subs	r3, #1
 8002038:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f9      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	4618      	mov	r0, r3
 800204c:	3714      	adds	r7, #20
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr
 8002056:	bf00      	nop
 8002058:	10000012 	.word	0x10000012
 800205c:	40012000 	.word	0x40012000
 8002060:	40012300 	.word	0x40012300
 8002064:	20000020 	.word	0x20000020
 8002068:	431bde83 	.word	0x431bde83

0800206c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b083      	sub	sp, #12
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002074:	4b78      	ldr	r3, [pc, #480]	; (8002258 <ADC_Init+0x1ec>)
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	4a77      	ldr	r2, [pc, #476]	; (8002258 <ADC_Init+0x1ec>)
 800207a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800207e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002080:	4b75      	ldr	r3, [pc, #468]	; (8002258 <ADC_Init+0x1ec>)
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	4973      	ldr	r1, [pc, #460]	; (8002258 <ADC_Init+0x1ec>)
 800208a:	4313      	orrs	r3, r2
 800208c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800209c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	6859      	ldr	r1, [r3, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	021a      	lsls	r2, r3, #8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	430a      	orrs	r2, r1
 80020b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	685a      	ldr	r2, [r3, #4]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80020c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	6859      	ldr	r1, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689a      	ldr	r2, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	430a      	orrs	r2, r1
 80020d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6899      	ldr	r1, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	430a      	orrs	r2, r1
 80020f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020fa:	4a58      	ldr	r2, [pc, #352]	; (800225c <ADC_Init+0x1f0>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d022      	beq.n	8002146 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800210e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6899      	ldr	r1, [r3, #8]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	430a      	orrs	r2, r1
 8002120:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	689a      	ldr	r2, [r3, #8]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002130:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	6899      	ldr	r1, [r3, #8]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	430a      	orrs	r2, r1
 8002142:	609a      	str	r2, [r3, #8]
 8002144:	e00f      	b.n	8002166 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	689a      	ldr	r2, [r3, #8]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002154:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689a      	ldr	r2, [r3, #8]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002164:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689a      	ldr	r2, [r3, #8]
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f022 0202 	bic.w	r2, r2, #2
 8002174:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	6899      	ldr	r1, [r3, #8]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	699b      	ldr	r3, [r3, #24]
 8002180:	005a      	lsls	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002190:	2b00      	cmp	r3, #0
 8002192:	d01b      	beq.n	80021cc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	685a      	ldr	r2, [r3, #4]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80021a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	685a      	ldr	r2, [r3, #4]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80021b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	6859      	ldr	r1, [r3, #4]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	3b01      	subs	r3, #1
 80021c0:	035a      	lsls	r2, r3, #13
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	e007      	b.n	80021dc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	685a      	ldr	r2, [r3, #4]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80021ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	3b01      	subs	r3, #1
 80021f8:	051a      	lsls	r2, r3, #20
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002210:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	6899      	ldr	r1, [r3, #8]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800221e:	025a      	lsls	r2, r3, #9
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002236:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	695b      	ldr	r3, [r3, #20]
 8002242:	029a      	lsls	r2, r3, #10
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	609a      	str	r2, [r3, #8]
}
 800224c:	bf00      	nop
 800224e:	370c      	adds	r7, #12
 8002250:	46bd      	mov	sp, r7
 8002252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002256:	4770      	bx	lr
 8002258:	40012300 	.word	0x40012300
 800225c:	0f000001 	.word	0x0f000001

08002260 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800226c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002272:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002276:	2b00      	cmp	r3, #0
 8002278:	d13c      	bne.n	80022f4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800227e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d12b      	bne.n	80022ec <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002298:	2b00      	cmp	r3, #0
 800229a:	d127      	bne.n	80022ec <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022a2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d006      	beq.n	80022b8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	689b      	ldr	r3, [r3, #8]
 80022b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d119      	bne.n	80022ec <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f022 0220 	bic.w	r2, r2, #32
 80022c6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e4:	f043 0201 	orr.w	r2, r3, #1
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7fe facb 	bl	8000888 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80022f2:	e00e      	b.n	8002312 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f8:	f003 0310 	and.w	r3, r3, #16
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f7ff fd53 	bl	8001dac <HAL_ADC_ErrorCallback>
}
 8002306:	e004      	b.n	8002312 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	4798      	blx	r3
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b084      	sub	sp, #16
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002326:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f7fe fa99 	bl	8000860 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800232e:	bf00      	nop
 8002330:	3710      	adds	r7, #16
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b084      	sub	sp, #16
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002342:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2240      	movs	r2, #64	; 0x40
 8002348:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234e:	f043 0204 	orr.w	r2, r3, #4
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f7ff fd28 	bl	8001dac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800235c:	bf00      	nop
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002364:	b480      	push	{r7}
 8002366:	b083      	sub	sp, #12
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800236c:	bf00      	nop
 800236e:	370c      	adds	r7, #12
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f003 0307 	and.w	r3, r3, #7
 8002386:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002388:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 800238a:	68db      	ldr	r3, [r3, #12]
 800238c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800238e:	68ba      	ldr	r2, [r7, #8]
 8002390:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002394:	4013      	ands	r3, r2
 8002396:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80023a0:	4b06      	ldr	r3, [pc, #24]	; (80023bc <__NVIC_SetPriorityGrouping+0x44>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80023a6:	4a04      	ldr	r2, [pc, #16]	; (80023b8 <__NVIC_SetPriorityGrouping+0x40>)
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	60d3      	str	r3, [r2, #12]
}
 80023ac:	bf00      	nop
 80023ae:	3714      	adds	r7, #20
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr
 80023b8:	e000ed00 	.word	0xe000ed00
 80023bc:	05fa0000 	.word	0x05fa0000

080023c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023c0:	b480      	push	{r7}
 80023c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023c4:	4b04      	ldr	r3, [pc, #16]	; (80023d8 <__NVIC_GetPriorityGrouping+0x18>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	0a1b      	lsrs	r3, r3, #8
 80023ca:	f003 0307 	and.w	r3, r3, #7
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	46bd      	mov	sp, r7
 80023d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d6:	4770      	bx	lr
 80023d8:	e000ed00 	.word	0xe000ed00

080023dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023dc:	b480      	push	{r7}
 80023de:	b083      	sub	sp, #12
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	4603      	mov	r3, r0
 80023e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	db0b      	blt.n	8002406 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023ee:	79fb      	ldrb	r3, [r7, #7]
 80023f0:	f003 021f 	and.w	r2, r3, #31
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <__NVIC_EnableIRQ+0x38>)
 80023f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	2001      	movs	r0, #1
 80023fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002402:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002406:	bf00      	nop
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
 8002412:	bf00      	nop
 8002414:	e000e100 	.word	0xe000e100

08002418 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002418:	b480      	push	{r7}
 800241a:	b083      	sub	sp, #12
 800241c:	af00      	add	r7, sp, #0
 800241e:	4603      	mov	r3, r0
 8002420:	6039      	str	r1, [r7, #0]
 8002422:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002424:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002428:	2b00      	cmp	r3, #0
 800242a:	db0a      	blt.n	8002442 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	b2da      	uxtb	r2, r3
 8002430:	490c      	ldr	r1, [pc, #48]	; (8002464 <__NVIC_SetPriority+0x4c>)
 8002432:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002436:	0112      	lsls	r2, r2, #4
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	440b      	add	r3, r1
 800243c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002440:	e00a      	b.n	8002458 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	b2da      	uxtb	r2, r3
 8002446:	4908      	ldr	r1, [pc, #32]	; (8002468 <__NVIC_SetPriority+0x50>)
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	3b04      	subs	r3, #4
 8002450:	0112      	lsls	r2, r2, #4
 8002452:	b2d2      	uxtb	r2, r2
 8002454:	440b      	add	r3, r1
 8002456:	761a      	strb	r2, [r3, #24]
}
 8002458:	bf00      	nop
 800245a:	370c      	adds	r7, #12
 800245c:	46bd      	mov	sp, r7
 800245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002462:	4770      	bx	lr
 8002464:	e000e100 	.word	0xe000e100
 8002468:	e000ed00 	.word	0xe000ed00

0800246c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800246c:	b480      	push	{r7}
 800246e:	b089      	sub	sp, #36	; 0x24
 8002470:	af00      	add	r7, sp, #0
 8002472:	60f8      	str	r0, [r7, #12]
 8002474:	60b9      	str	r1, [r7, #8]
 8002476:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f1c3 0307 	rsb	r3, r3, #7
 8002486:	2b04      	cmp	r3, #4
 8002488:	bf28      	it	cs
 800248a:	2304      	movcs	r3, #4
 800248c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800248e:	69fb      	ldr	r3, [r7, #28]
 8002490:	3304      	adds	r3, #4
 8002492:	2b06      	cmp	r3, #6
 8002494:	d902      	bls.n	800249c <NVIC_EncodePriority+0x30>
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	3b03      	subs	r3, #3
 800249a:	e000      	b.n	800249e <NVIC_EncodePriority+0x32>
 800249c:	2300      	movs	r3, #0
 800249e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024a0:	f04f 32ff 	mov.w	r2, #4294967295
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	43da      	mvns	r2, r3
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	401a      	ands	r2, r3
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024b4:	f04f 31ff 	mov.w	r1, #4294967295
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43d9      	mvns	r1, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	4313      	orrs	r3, r2
         );
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3724      	adds	r7, #36	; 0x24
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
	...

080024d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b082      	sub	sp, #8
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	3b01      	subs	r3, #1
 80024e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024e4:	d301      	bcc.n	80024ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024e6:	2301      	movs	r3, #1
 80024e8:	e00f      	b.n	800250a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024ea:	4a0a      	ldr	r2, [pc, #40]	; (8002514 <SysTick_Config+0x40>)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	3b01      	subs	r3, #1
 80024f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024f2:	210f      	movs	r1, #15
 80024f4:	f04f 30ff 	mov.w	r0, #4294967295
 80024f8:	f7ff ff8e 	bl	8002418 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024fc:	4b05      	ldr	r3, [pc, #20]	; (8002514 <SysTick_Config+0x40>)
 80024fe:	2200      	movs	r2, #0
 8002500:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002502:	4b04      	ldr	r3, [pc, #16]	; (8002514 <SysTick_Config+0x40>)
 8002504:	2207      	movs	r2, #7
 8002506:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002508:	2300      	movs	r3, #0
}
 800250a:	4618      	mov	r0, r3
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	e000e010 	.word	0xe000e010

08002518 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f7ff ff29 	bl	8002378 <__NVIC_SetPriorityGrouping>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800252e:	b580      	push	{r7, lr}
 8002530:	b086      	sub	sp, #24
 8002532:	af00      	add	r7, sp, #0
 8002534:	4603      	mov	r3, r0
 8002536:	60b9      	str	r1, [r7, #8]
 8002538:	607a      	str	r2, [r7, #4]
 800253a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800253c:	2300      	movs	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002540:	f7ff ff3e 	bl	80023c0 <__NVIC_GetPriorityGrouping>
 8002544:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002546:	687a      	ldr	r2, [r7, #4]
 8002548:	68b9      	ldr	r1, [r7, #8]
 800254a:	6978      	ldr	r0, [r7, #20]
 800254c:	f7ff ff8e 	bl	800246c <NVIC_EncodePriority>
 8002550:	4602      	mov	r2, r0
 8002552:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002556:	4611      	mov	r1, r2
 8002558:	4618      	mov	r0, r3
 800255a:	f7ff ff5d 	bl	8002418 <__NVIC_SetPriority>
}
 800255e:	bf00      	nop
 8002560:	3718      	adds	r7, #24
 8002562:	46bd      	mov	sp, r7
 8002564:	bd80      	pop	{r7, pc}

08002566 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002566:	b580      	push	{r7, lr}
 8002568:	b082      	sub	sp, #8
 800256a:	af00      	add	r7, sp, #0
 800256c:	4603      	mov	r3, r0
 800256e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002570:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff ff31 	bl	80023dc <__NVIC_EnableIRQ>
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b082      	sub	sp, #8
 8002586:	af00      	add	r7, sp, #0
 8002588:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7ff ffa2 	bl	80024d4 <SysTick_Config>
 8002590:	4603      	mov	r3, r0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
	...

0800259c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b086      	sub	sp, #24
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80025a4:	2300      	movs	r3, #0
 80025a6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80025a8:	f7ff f978 	bl	800189c <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e099      	b.n	80026ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	2202      	movs	r2, #2
 80025bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0201 	bic.w	r2, r2, #1
 80025d6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025d8:	e00f      	b.n	80025fa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025da:	f7ff f95f 	bl	800189c <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b05      	cmp	r3, #5
 80025e6:	d908      	bls.n	80025fa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2203      	movs	r2, #3
 80025f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e078      	b.n	80026ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d1e8      	bne.n	80025da <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002610:	697a      	ldr	r2, [r7, #20]
 8002612:	4b38      	ldr	r3, [pc, #224]	; (80026f4 <HAL_DMA_Init+0x158>)
 8002614:	4013      	ands	r3, r2
 8002616:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685a      	ldr	r2, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002626:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002632:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	699b      	ldr	r3, [r3, #24]
 8002638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800263e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a1b      	ldr	r3, [r3, #32]
 8002644:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002650:	2b04      	cmp	r3, #4
 8002652:	d107      	bne.n	8002664 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	4313      	orrs	r3, r2
 800265e:	697a      	ldr	r2, [r7, #20]
 8002660:	4313      	orrs	r3, r2
 8002662:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	f023 0307 	bic.w	r3, r3, #7
 800267a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800268a:	2b04      	cmp	r3, #4
 800268c:	d117      	bne.n	80026be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	697a      	ldr	r2, [r7, #20]
 8002694:	4313      	orrs	r3, r2
 8002696:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00e      	beq.n	80026be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80026a0:	6878      	ldr	r0, [r7, #4]
 80026a2:	f000 fb17 	bl	8002cd4 <DMA_CheckFifoParam>
 80026a6:	4603      	mov	r3, r0
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d008      	beq.n	80026be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2240      	movs	r2, #64	; 0x40
 80026b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2201      	movs	r2, #1
 80026b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026ba:	2301      	movs	r3, #1
 80026bc:	e016      	b.n	80026ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 face 	bl	8002c68 <DMA_CalcBaseAndBitshift>
 80026cc:	4603      	mov	r3, r0
 80026ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	223f      	movs	r2, #63	; 0x3f
 80026d6:	409a      	lsls	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2200      	movs	r2, #0
 80026e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2201      	movs	r2, #1
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3718      	adds	r7, #24
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	f010803f 	.word	0xf010803f

080026f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
 8002704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_DMA_Start_IT+0x26>
 800271a:	2302      	movs	r3, #2
 800271c:	e048      	b.n	80027b0 <HAL_DMA_Start_IT+0xb8>
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	d137      	bne.n	80027a2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2202      	movs	r2, #2
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2200      	movs	r2, #0
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	68b9      	ldr	r1, [r7, #8]
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 fa60 	bl	8002c0c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002750:	223f      	movs	r2, #63	; 0x3f
 8002752:	409a      	lsls	r2, r3
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f042 0216 	orr.w	r2, r2, #22
 8002766:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	695a      	ldr	r2, [r3, #20]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002776:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f042 0208 	orr.w	r2, r2, #8
 800278e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	681a      	ldr	r2, [r3, #0]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	e005      	b.n	80027ae <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80027aa:	2302      	movs	r3, #2
 80027ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80027ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	3718      	adds	r7, #24
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027c6:	f7ff f869 	bl	800189c <HAL_GetTick>
 80027ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d008      	beq.n	80027ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2280      	movs	r2, #128	; 0x80
 80027dc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e052      	b.n	8002890 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0216 	bic.w	r2, r2, #22
 80027f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	695a      	ldr	r2, [r3, #20]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002808:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	2b00      	cmp	r3, #0
 8002810:	d103      	bne.n	800281a <HAL_DMA_Abort+0x62>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681a      	ldr	r2, [r3, #0]
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f022 0208 	bic.w	r2, r2, #8
 8002828:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0201 	bic.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800283a:	e013      	b.n	8002864 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800283c:	f7ff f82e 	bl	800189c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b05      	cmp	r3, #5
 8002848:	d90c      	bls.n	8002864 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2220      	movs	r2, #32
 800284e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2203      	movs	r2, #3
 8002854:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002860:	2303      	movs	r3, #3
 8002862:	e015      	b.n	8002890 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e4      	bne.n	800283c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002876:	223f      	movs	r2, #63	; 0x3f
 8002878:	409a      	lsls	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2201      	movs	r2, #1
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d004      	beq.n	80028b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2280      	movs	r2, #128	; 0x80
 80028b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00c      	b.n	80028d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2205      	movs	r2, #5
 80028ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f022 0201 	bic.w	r2, r2, #1
 80028cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b086      	sub	sp, #24
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028e8:	4b8e      	ldr	r3, [pc, #568]	; (8002b24 <HAL_DMA_IRQHandler+0x248>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a8e      	ldr	r2, [pc, #568]	; (8002b28 <HAL_DMA_IRQHandler+0x24c>)
 80028ee:	fba2 2303 	umull	r2, r3, r2, r3
 80028f2:	0a9b      	lsrs	r3, r3, #10
 80028f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002906:	2208      	movs	r2, #8
 8002908:	409a      	lsls	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4013      	ands	r3, r2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d01a      	beq.n	8002948 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 0304 	and.w	r3, r3, #4
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f022 0204 	bic.w	r2, r2, #4
 800292e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002934:	2208      	movs	r2, #8
 8002936:	409a      	lsls	r2, r3
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002940:	f043 0201 	orr.w	r2, r3, #1
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800294c:	2201      	movs	r2, #1
 800294e:	409a      	lsls	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4013      	ands	r3, r2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d012      	beq.n	800297e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800296a:	2201      	movs	r2, #1
 800296c:	409a      	lsls	r2, r3
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f043 0202 	orr.w	r2, r3, #2
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002982:	2204      	movs	r2, #4
 8002984:	409a      	lsls	r2, r3
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4013      	ands	r3, r2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d012      	beq.n	80029b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 0302 	and.w	r3, r3, #2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	2204      	movs	r2, #4
 80029a2:	409a      	lsls	r2, r3
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f043 0204 	orr.w	r2, r3, #4
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b8:	2210      	movs	r2, #16
 80029ba:	409a      	lsls	r2, r3
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4013      	ands	r3, r2
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d043      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 0308 	and.w	r3, r3, #8
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d03c      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d6:	2210      	movs	r2, #16
 80029d8:	409a      	lsls	r2, r3
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d018      	beq.n	8002a1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d108      	bne.n	8002a0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d024      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	6878      	ldr	r0, [r7, #4]
 8002a08:	4798      	blx	r3
 8002a0a:	e01f      	b.n	8002a4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d01b      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	4798      	blx	r3
 8002a1c:	e016      	b.n	8002a4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d107      	bne.n	8002a3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	681a      	ldr	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0208 	bic.w	r2, r2, #8
 8002a3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d003      	beq.n	8002a4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a50:	2220      	movs	r2, #32
 8002a52:	409a      	lsls	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 808f 	beq.w	8002b7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 0310 	and.w	r3, r3, #16
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f000 8087 	beq.w	8002b7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	2220      	movs	r2, #32
 8002a74:	409a      	lsls	r2, r3
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a80:	b2db      	uxtb	r3, r3
 8002a82:	2b05      	cmp	r3, #5
 8002a84:	d136      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0216 	bic.w	r2, r2, #22
 8002a94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	695a      	ldr	r2, [r3, #20]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002aa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d103      	bne.n	8002ab6 <HAL_DMA_IRQHandler+0x1da>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d007      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f022 0208 	bic.w	r2, r2, #8
 8002ac4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aca:	223f      	movs	r2, #63	; 0x3f
 8002acc:	409a      	lsls	r2, r3
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d07e      	beq.n	8002be8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
        }
        return;
 8002af2:	e079      	b.n	8002be8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d01d      	beq.n	8002b3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d10d      	bne.n	8002b2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d031      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4798      	blx	r3
 8002b20:	e02c      	b.n	8002b7c <HAL_DMA_IRQHandler+0x2a0>
 8002b22:	bf00      	nop
 8002b24:	20000020 	.word	0x20000020
 8002b28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d023      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	4798      	blx	r3
 8002b3c:	e01e      	b.n	8002b7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d10f      	bne.n	8002b6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0210 	bic.w	r2, r2, #16
 8002b5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d032      	beq.n	8002bea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d022      	beq.n	8002bd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2205      	movs	r2, #5
 8002b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0201 	bic.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ba8:	68bb      	ldr	r3, [r7, #8]
 8002baa:	3301      	adds	r3, #1
 8002bac:	60bb      	str	r3, [r7, #8]
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d307      	bcc.n	8002bc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 0301 	and.w	r3, r3, #1
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d1f2      	bne.n	8002ba8 <HAL_DMA_IRQHandler+0x2cc>
 8002bc2:	e000      	b.n	8002bc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002bc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d005      	beq.n	8002bea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	4798      	blx	r3
 8002be6:	e000      	b.n	8002bea <HAL_DMA_IRQHandler+0x30e>
        return;
 8002be8:	bf00      	nop
    }
  }
}
 8002bea:	3718      	adds	r7, #24
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002bfe:	b2db      	uxtb	r3, r3
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	370c      	adds	r7, #12
 8002c04:	46bd      	mov	sp, r7
 8002c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0a:	4770      	bx	lr

08002c0c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b085      	sub	sp, #20
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
 8002c18:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002c28:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	683a      	ldr	r2, [r7, #0]
 8002c30:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	2b40      	cmp	r3, #64	; 0x40
 8002c38:	d108      	bne.n	8002c4c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68ba      	ldr	r2, [r7, #8]
 8002c48:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002c4a:	e007      	b.n	8002c5c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	687a      	ldr	r2, [r7, #4]
 8002c5a:	60da      	str	r2, [r3, #12]
}
 8002c5c:	bf00      	nop
 8002c5e:	3714      	adds	r7, #20
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr

08002c68 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c68:	b480      	push	{r7}
 8002c6a:	b085      	sub	sp, #20
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	3b10      	subs	r3, #16
 8002c78:	4a13      	ldr	r2, [pc, #76]	; (8002cc8 <DMA_CalcBaseAndBitshift+0x60>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	091b      	lsrs	r3, r3, #4
 8002c80:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c82:	4a12      	ldr	r2, [pc, #72]	; (8002ccc <DMA_CalcBaseAndBitshift+0x64>)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	4413      	add	r3, r2
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2b03      	cmp	r3, #3
 8002c94:	d908      	bls.n	8002ca8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	4b0c      	ldr	r3, [pc, #48]	; (8002cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	1d1a      	adds	r2, r3, #4
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	659a      	str	r2, [r3, #88]	; 0x58
 8002ca6:	e006      	b.n	8002cb6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b08      	ldr	r3, [pc, #32]	; (8002cd0 <DMA_CalcBaseAndBitshift+0x68>)
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	687a      	ldr	r2, [r7, #4]
 8002cb4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3714      	adds	r7, #20
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	aaaaaaab 	.word	0xaaaaaaab
 8002ccc:	08008598 	.word	0x08008598
 8002cd0:	fffffc00 	.word	0xfffffc00

08002cd4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b085      	sub	sp, #20
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d11f      	bne.n	8002d2e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	2b03      	cmp	r3, #3
 8002cf2:	d856      	bhi.n	8002da2 <DMA_CheckFifoParam+0xce>
 8002cf4:	a201      	add	r2, pc, #4	; (adr r2, 8002cfc <DMA_CheckFifoParam+0x28>)
 8002cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cfa:	bf00      	nop
 8002cfc:	08002d0d 	.word	0x08002d0d
 8002d00:	08002d1f 	.word	0x08002d1f
 8002d04:	08002d0d 	.word	0x08002d0d
 8002d08:	08002da3 	.word	0x08002da3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d046      	beq.n	8002da6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d1c:	e043      	b.n	8002da6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d22:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d26:	d140      	bne.n	8002daa <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d2c:	e03d      	b.n	8002daa <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d36:	d121      	bne.n	8002d7c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b03      	cmp	r3, #3
 8002d3c:	d837      	bhi.n	8002dae <DMA_CheckFifoParam+0xda>
 8002d3e:	a201      	add	r2, pc, #4	; (adr r2, 8002d44 <DMA_CheckFifoParam+0x70>)
 8002d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d44:	08002d55 	.word	0x08002d55
 8002d48:	08002d5b 	.word	0x08002d5b
 8002d4c:	08002d55 	.word	0x08002d55
 8002d50:	08002d6d 	.word	0x08002d6d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d54:	2301      	movs	r3, #1
 8002d56:	73fb      	strb	r3, [r7, #15]
      break;
 8002d58:	e030      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d5e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d025      	beq.n	8002db2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d6a:	e022      	b.n	8002db2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d74:	d11f      	bne.n	8002db6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d7a:	e01c      	b.n	8002db6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d903      	bls.n	8002d8a <DMA_CheckFifoParam+0xb6>
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	2b03      	cmp	r3, #3
 8002d86:	d003      	beq.n	8002d90 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d88:	e018      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
      break;
 8002d8e:	e015      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00e      	beq.n	8002dba <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002da0:	e00b      	b.n	8002dba <DMA_CheckFifoParam+0xe6>
      break;
 8002da2:	bf00      	nop
 8002da4:	e00a      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002da6:	bf00      	nop
 8002da8:	e008      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002daa:	bf00      	nop
 8002dac:	e006      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002dae:	bf00      	nop
 8002db0:	e004      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002db2:	bf00      	nop
 8002db4:	e002      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;   
 8002db6:	bf00      	nop
 8002db8:	e000      	b.n	8002dbc <DMA_CheckFifoParam+0xe8>
      break;
 8002dba:	bf00      	nop
    }
  } 
  
  return status; 
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3714      	adds	r7, #20
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
 8002dca:	bf00      	nop

08002dcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	; 0x24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002dde:	2300      	movs	r3, #0
 8002de0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002de2:	2300      	movs	r3, #0
 8002de4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002de6:	2300      	movs	r3, #0
 8002de8:	61fb      	str	r3, [r7, #28]
 8002dea:	e175      	b.n	80030d8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002dec:	2201      	movs	r2, #1
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e00:	693a      	ldr	r2, [r7, #16]
 8002e02:	697b      	ldr	r3, [r7, #20]
 8002e04:	429a      	cmp	r2, r3
 8002e06:	f040 8164 	bne.w	80030d2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 0303 	and.w	r3, r3, #3
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d005      	beq.n	8002e22 <HAL_GPIO_Init+0x56>
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685b      	ldr	r3, [r3, #4]
 8002e1a:	f003 0303 	and.w	r3, r3, #3
 8002e1e:	2b02      	cmp	r3, #2
 8002e20:	d130      	bne.n	8002e84 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e28:	69fb      	ldr	r3, [r7, #28]
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43db      	mvns	r3, r3
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	4013      	ands	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68da      	ldr	r2, [r3, #12]
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	005b      	lsls	r3, r3, #1
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	69ba      	ldr	r2, [r7, #24]
 8002e50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e58:	2201      	movs	r2, #1
 8002e5a:	69fb      	ldr	r3, [r7, #28]
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	091b      	lsrs	r3, r3, #4
 8002e6e:	f003 0201 	and.w	r2, r3, #1
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f003 0303 	and.w	r3, r3, #3
 8002e8c:	2b03      	cmp	r3, #3
 8002e8e:	d017      	beq.n	8002ec0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	005b      	lsls	r3, r3, #1
 8002e9a:	2203      	movs	r2, #3
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43db      	mvns	r3, r3
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	689a      	ldr	r2, [r3, #8]
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f003 0303 	and.w	r3, r3, #3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d123      	bne.n	8002f14 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	08da      	lsrs	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	3208      	adds	r2, #8
 8002ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ed8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	220f      	movs	r2, #15
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	43db      	mvns	r3, r3
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4013      	ands	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	691a      	ldr	r2, [r3, #16]
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	69ba      	ldr	r2, [r7, #24]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	08da      	lsrs	r2, r3, #3
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	3208      	adds	r2, #8
 8002f0e:	69b9      	ldr	r1, [r7, #24]
 8002f10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	2203      	movs	r2, #3
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	43db      	mvns	r3, r3
 8002f26:	69ba      	ldr	r2, [r7, #24]
 8002f28:	4013      	ands	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	f003 0203 	and.w	r2, r3, #3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3c:	69ba      	ldr	r2, [r7, #24]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	69ba      	ldr	r2, [r7, #24]
 8002f46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 80be 	beq.w	80030d2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f56:	4b66      	ldr	r3, [pc, #408]	; (80030f0 <HAL_GPIO_Init+0x324>)
 8002f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f5a:	4a65      	ldr	r2, [pc, #404]	; (80030f0 <HAL_GPIO_Init+0x324>)
 8002f5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f60:	6453      	str	r3, [r2, #68]	; 0x44
 8002f62:	4b63      	ldr	r3, [pc, #396]	; (80030f0 <HAL_GPIO_Init+0x324>)
 8002f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f6e:	4a61      	ldr	r2, [pc, #388]	; (80030f4 <HAL_GPIO_Init+0x328>)
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	089b      	lsrs	r3, r3, #2
 8002f74:	3302      	adds	r3, #2
 8002f76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	220f      	movs	r2, #15
 8002f86:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8a:	43db      	mvns	r3, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4013      	ands	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a58      	ldr	r2, [pc, #352]	; (80030f8 <HAL_GPIO_Init+0x32c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d037      	beq.n	800300a <HAL_GPIO_Init+0x23e>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	4a57      	ldr	r2, [pc, #348]	; (80030fc <HAL_GPIO_Init+0x330>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d031      	beq.n	8003006 <HAL_GPIO_Init+0x23a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a56      	ldr	r2, [pc, #344]	; (8003100 <HAL_GPIO_Init+0x334>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d02b      	beq.n	8003002 <HAL_GPIO_Init+0x236>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a55      	ldr	r2, [pc, #340]	; (8003104 <HAL_GPIO_Init+0x338>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d025      	beq.n	8002ffe <HAL_GPIO_Init+0x232>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a54      	ldr	r2, [pc, #336]	; (8003108 <HAL_GPIO_Init+0x33c>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d01f      	beq.n	8002ffa <HAL_GPIO_Init+0x22e>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a53      	ldr	r2, [pc, #332]	; (800310c <HAL_GPIO_Init+0x340>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d019      	beq.n	8002ff6 <HAL_GPIO_Init+0x22a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a52      	ldr	r2, [pc, #328]	; (8003110 <HAL_GPIO_Init+0x344>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d013      	beq.n	8002ff2 <HAL_GPIO_Init+0x226>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a51      	ldr	r2, [pc, #324]	; (8003114 <HAL_GPIO_Init+0x348>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d00d      	beq.n	8002fee <HAL_GPIO_Init+0x222>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a50      	ldr	r2, [pc, #320]	; (8003118 <HAL_GPIO_Init+0x34c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d007      	beq.n	8002fea <HAL_GPIO_Init+0x21e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	4a4f      	ldr	r2, [pc, #316]	; (800311c <HAL_GPIO_Init+0x350>)
 8002fde:	4293      	cmp	r3, r2
 8002fe0:	d101      	bne.n	8002fe6 <HAL_GPIO_Init+0x21a>
 8002fe2:	2309      	movs	r3, #9
 8002fe4:	e012      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002fe6:	230a      	movs	r3, #10
 8002fe8:	e010      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002fea:	2308      	movs	r3, #8
 8002fec:	e00e      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002fee:	2307      	movs	r3, #7
 8002ff0:	e00c      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002ff2:	2306      	movs	r3, #6
 8002ff4:	e00a      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002ff6:	2305      	movs	r3, #5
 8002ff8:	e008      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002ffa:	2304      	movs	r3, #4
 8002ffc:	e006      	b.n	800300c <HAL_GPIO_Init+0x240>
 8002ffe:	2303      	movs	r3, #3
 8003000:	e004      	b.n	800300c <HAL_GPIO_Init+0x240>
 8003002:	2302      	movs	r3, #2
 8003004:	e002      	b.n	800300c <HAL_GPIO_Init+0x240>
 8003006:	2301      	movs	r3, #1
 8003008:	e000      	b.n	800300c <HAL_GPIO_Init+0x240>
 800300a:	2300      	movs	r3, #0
 800300c:	69fa      	ldr	r2, [r7, #28]
 800300e:	f002 0203 	and.w	r2, r2, #3
 8003012:	0092      	lsls	r2, r2, #2
 8003014:	4093      	lsls	r3, r2
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4313      	orrs	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800301c:	4935      	ldr	r1, [pc, #212]	; (80030f4 <HAL_GPIO_Init+0x328>)
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	089b      	lsrs	r3, r3, #2
 8003022:	3302      	adds	r3, #2
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800302a:	4b3d      	ldr	r3, [pc, #244]	; (8003120 <HAL_GPIO_Init+0x354>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	43db      	mvns	r3, r3
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	4013      	ands	r3, r2
 8003038:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d003      	beq.n	800304e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003046:	69ba      	ldr	r2, [r7, #24]
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	4313      	orrs	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800304e:	4a34      	ldr	r2, [pc, #208]	; (8003120 <HAL_GPIO_Init+0x354>)
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003054:	4b32      	ldr	r3, [pc, #200]	; (8003120 <HAL_GPIO_Init+0x354>)
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	4313      	orrs	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003078:	4a29      	ldr	r2, [pc, #164]	; (8003120 <HAL_GPIO_Init+0x354>)
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800307e:	4b28      	ldr	r3, [pc, #160]	; (8003120 <HAL_GPIO_Init+0x354>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	43db      	mvns	r3, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4013      	ands	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	4313      	orrs	r3, r2
 80030a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030a2:	4a1f      	ldr	r2, [pc, #124]	; (8003120 <HAL_GPIO_Init+0x354>)
 80030a4:	69bb      	ldr	r3, [r7, #24]
 80030a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_GPIO_Init+0x354>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d003      	beq.n	80030cc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	4313      	orrs	r3, r2
 80030ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030cc:	4a14      	ldr	r2, [pc, #80]	; (8003120 <HAL_GPIO_Init+0x354>)
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	3301      	adds	r3, #1
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	2b0f      	cmp	r3, #15
 80030dc:	f67f ae86 	bls.w	8002dec <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80030e0:	bf00      	nop
 80030e2:	bf00      	nop
 80030e4:	3724      	adds	r7, #36	; 0x24
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
 80030ee:	bf00      	nop
 80030f0:	40023800 	.word	0x40023800
 80030f4:	40013800 	.word	0x40013800
 80030f8:	40020000 	.word	0x40020000
 80030fc:	40020400 	.word	0x40020400
 8003100:	40020800 	.word	0x40020800
 8003104:	40020c00 	.word	0x40020c00
 8003108:	40021000 	.word	0x40021000
 800310c:	40021400 	.word	0x40021400
 8003110:	40021800 	.word	0x40021800
 8003114:	40021c00 	.word	0x40021c00
 8003118:	40022000 	.word	0x40022000
 800311c:	40022400 	.word	0x40022400
 8003120:	40013c00 	.word	0x40013c00

08003124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	460b      	mov	r3, r1
 800312e:	807b      	strh	r3, [r7, #2]
 8003130:	4613      	mov	r3, r2
 8003132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003134:	787b      	ldrb	r3, [r7, #1]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d003      	beq.n	8003142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800313a:	887a      	ldrh	r2, [r7, #2]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003140:	e003      	b.n	800314a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003142:	887b      	ldrh	r3, [r7, #2]
 8003144:	041a      	lsls	r2, r3, #16
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	619a      	str	r2, [r3, #24]
}
 800314a:	bf00      	nop
 800314c:	370c      	adds	r7, #12
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
	...

08003158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b082      	sub	sp, #8
 800315c:	af00      	add	r7, sp, #0
 800315e:	4603      	mov	r3, r0
 8003160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003162:	4b08      	ldr	r3, [pc, #32]	; (8003184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003164:	695a      	ldr	r2, [r3, #20]
 8003166:	88fb      	ldrh	r3, [r7, #6]
 8003168:	4013      	ands	r3, r2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d006      	beq.n	800317c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800316e:	4a05      	ldr	r2, [pc, #20]	; (8003184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003170:	88fb      	ldrh	r3, [r7, #6]
 8003172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003174:	88fb      	ldrh	r3, [r7, #6]
 8003176:	4618      	mov	r0, r3
 8003178:	f7fd fb9a 	bl	80008b0 <HAL_GPIO_EXTI_Callback>
  }
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	40013c00 	.word	0x40013c00

08003188 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e07f      	b.n	800329a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f7fe f8f6 	bl	80013a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2224      	movs	r2, #36	; 0x24
 80031b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0201 	bic.w	r2, r2, #1
 80031ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685a      	ldr	r2, [r3, #4]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d107      	bne.n	8003202 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031fe:	609a      	str	r2, [r3, #8]
 8003200:	e006      	b.n	8003210 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689a      	ldr	r2, [r3, #8]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800320e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	68db      	ldr	r3, [r3, #12]
 8003214:	2b02      	cmp	r3, #2
 8003216:	d104      	bne.n	8003222 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003220:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <HAL_I2C_Init+0x11c>)
 800322e:	430b      	orrs	r3, r1
 8003230:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003240:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	691a      	ldr	r2, [r3, #16]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	695b      	ldr	r3, [r3, #20]
 800324a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69d9      	ldr	r1, [r3, #28]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	430a      	orrs	r2, r1
 800326a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f042 0201 	orr.w	r2, r2, #1
 800327a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	2200      	movs	r2, #0
 800328e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
 80032a2:	bf00      	nop
 80032a4:	02008000 	.word	0x02008000

080032a8 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b088      	sub	sp, #32
 80032ac:	af02      	add	r7, sp, #8
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	4608      	mov	r0, r1
 80032b2:	4611      	mov	r1, r2
 80032b4:	461a      	mov	r2, r3
 80032b6:	4603      	mov	r3, r0
 80032b8:	817b      	strh	r3, [r7, #10]
 80032ba:	460b      	mov	r3, r1
 80032bc:	813b      	strh	r3, [r7, #8]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	2b20      	cmp	r3, #32
 80032cc:	f040 80f9 	bne.w	80034c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_I2C_Mem_Write+0x34>
 80032d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d105      	bne.n	80032e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0ed      	b.n	80034c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d101      	bne.n	80032f6 <HAL_I2C_Mem_Write+0x4e>
 80032f2:	2302      	movs	r3, #2
 80032f4:	e0e6      	b.n	80034c4 <HAL_I2C_Mem_Write+0x21c>
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032fe:	f7fe facd 	bl	800189c <HAL_GetTick>
 8003302:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	9300      	str	r3, [sp, #0]
 8003308:	2319      	movs	r3, #25
 800330a:	2201      	movs	r2, #1
 800330c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 fe6a 	bl	8003fea <I2C_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d001      	beq.n	8003320 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e0d1      	b.n	80034c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2221      	movs	r2, #33	; 0x21
 8003324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2240      	movs	r2, #64	; 0x40
 800332c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	2200      	movs	r2, #0
 8003334:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	6a3a      	ldr	r2, [r7, #32]
 800333a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003340:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003348:	88f8      	ldrh	r0, [r7, #6]
 800334a:	893a      	ldrh	r2, [r7, #8]
 800334c:	8979      	ldrh	r1, [r7, #10]
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	9301      	str	r3, [sp, #4]
 8003352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003354:	9300      	str	r3, [sp, #0]
 8003356:	4603      	mov	r3, r0
 8003358:	68f8      	ldr	r0, [r7, #12]
 800335a:	f000 fa77 	bl	800384c <I2C_RequestMemoryWrite>
 800335e:	4603      	mov	r3, r0
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2200      	movs	r2, #0
 8003368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e0a9      	b.n	80034c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003374:	b29b      	uxth	r3, r3
 8003376:	2bff      	cmp	r3, #255	; 0xff
 8003378:	d90e      	bls.n	8003398 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	22ff      	movs	r2, #255	; 0xff
 800337e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003384:	b2da      	uxtb	r2, r3
 8003386:	8979      	ldrh	r1, [r7, #10]
 8003388:	2300      	movs	r3, #0
 800338a:	9300      	str	r3, [sp, #0]
 800338c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003390:	68f8      	ldr	r0, [r7, #12]
 8003392:	f000 ffc7 	bl	8004324 <I2C_TransferConfig>
 8003396:	e00f      	b.n	80033b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800339c:	b29a      	uxth	r2, r3
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	8979      	ldrh	r1, [r7, #10]
 80033aa:	2300      	movs	r3, #0
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80033b2:	68f8      	ldr	r0, [r7, #12]
 80033b4:	f000 ffb6 	bl	8004324 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 fe54 	bl	800406a <I2C_WaitOnTXISFlagUntilTimeout>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	e07b      	b.n	80034c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d0:	781a      	ldrb	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d034      	beq.n	8003470 <HAL_I2C_Mem_Write+0x1c8>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340a:	2b00      	cmp	r3, #0
 800340c:	d130      	bne.n	8003470 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003414:	2200      	movs	r2, #0
 8003416:	2180      	movs	r1, #128	; 0x80
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 fde6 	bl	8003fea <I2C_WaitOnFlagUntilTimeout>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d001      	beq.n	8003428 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e04d      	b.n	80034c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800342c:	b29b      	uxth	r3, r3
 800342e:	2bff      	cmp	r3, #255	; 0xff
 8003430:	d90e      	bls.n	8003450 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	22ff      	movs	r2, #255	; 0xff
 8003436:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800343c:	b2da      	uxtb	r2, r3
 800343e:	8979      	ldrh	r1, [r7, #10]
 8003440:	2300      	movs	r3, #0
 8003442:	9300      	str	r3, [sp, #0]
 8003444:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 ff6b 	bl	8004324 <I2C_TransferConfig>
 800344e:	e00f      	b.n	8003470 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003454:	b29a      	uxth	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800345e:	b2da      	uxtb	r2, r3
 8003460:	8979      	ldrh	r1, [r7, #10]
 8003462:	2300      	movs	r3, #0
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 ff5a 	bl	8004324 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d19e      	bne.n	80033b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800347a:	697a      	ldr	r2, [r7, #20]
 800347c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f000 fe33 	bl	80040ea <I2C_WaitOnSTOPFlagUntilTimeout>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e01a      	b.n	80034c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2220      	movs	r2, #32
 8003494:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	6859      	ldr	r1, [r3, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_I2C_Mem_Write+0x224>)
 80034a2:	400b      	ands	r3, r1
 80034a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80034be:	2300      	movs	r3, #0
 80034c0:	e000      	b.n	80034c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80034c2:	2302      	movs	r3, #2
  }
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}
 80034cc:	fe00e800 	.word	0xfe00e800

080034d0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d005      	beq.n	80034fc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	68f9      	ldr	r1, [r7, #12]
 80034f8:	6878      	ldr	r0, [r7, #4]
 80034fa:	4798      	blx	r3
  }
}
 80034fc:	bf00      	nop
 80034fe:	3710      	adds	r7, #16
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}

08003504 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	0a1b      	lsrs	r3, r3, #8
 8003520:	f003 0301 	and.w	r3, r3, #1
 8003524:	2b00      	cmp	r3, #0
 8003526:	d010      	beq.n	800354a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	09db      	lsrs	r3, r3, #7
 800352c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f043 0201 	orr.w	r2, r3, #1
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003548:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	0a9b      	lsrs	r3, r3, #10
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d010      	beq.n	8003578 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	09db      	lsrs	r3, r3, #7
 800355a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003566:	f043 0208 	orr.w	r2, r3, #8
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003576:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	0a5b      	lsrs	r3, r3, #9
 800357c:	f003 0301 	and.w	r3, r3, #1
 8003580:	2b00      	cmp	r3, #0
 8003582:	d010      	beq.n	80035a6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	09db      	lsrs	r3, r3, #7
 8003588:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003594:	f043 0202 	orr.w	r2, r3, #2
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035a4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 030b 	and.w	r3, r3, #11
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d003      	beq.n	80035be <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 80035b6:	68f9      	ldr	r1, [r7, #12]
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f000 fbdd 	bl	8003d78 <I2C_ITError>
  }
}
 80035be:	bf00      	nop
 80035c0:	3718      	adds	r7, #24
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035c6:	b480      	push	{r7}
 80035c8:	b083      	sub	sp, #12
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80035ce:	bf00      	nop
 80035d0:	370c      	adds	r7, #12
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr

080035da <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	460b      	mov	r3, r1
 80035f8:	70fb      	strb	r3, [r7, #3]
 80035fa:	4613      	mov	r3, r2
 80035fc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80035fe:	bf00      	nop
 8003600:	370c      	adds	r7, #12
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr

0800360a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800360a:	b480      	push	{r7}
 800360c:	b083      	sub	sp, #12
 800360e:	af00      	add	r7, sp, #0
 8003610:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr

08003632 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8003646:	b580      	push	{r7, lr}
 8003648:	b086      	sub	sp, #24
 800364a:	af00      	add	r7, sp, #0
 800364c:	60f8      	str	r0, [r7, #12]
 800364e:	60b9      	str	r1, [r7, #8]
 8003650:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003656:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <I2C_Slave_ISR_IT+0x24>
 8003666:	2302      	movs	r3, #2
 8003668:	e0ec      	b.n	8003844 <I2C_Slave_ISR_IT+0x1fe>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	095b      	lsrs	r3, r3, #5
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	095b      	lsrs	r3, r3, #5
 8003682:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003686:	2b00      	cmp	r3, #0
 8003688:	d003      	beq.n	8003692 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800368a:	6939      	ldr	r1, [r7, #16]
 800368c:	68f8      	ldr	r0, [r7, #12]
 800368e:	f000 fa13 	bl	8003ab8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	091b      	lsrs	r3, r3, #4
 8003696:	f003 0301 	and.w	r3, r3, #1
 800369a:	2b00      	cmp	r3, #0
 800369c:	d04d      	beq.n	800373a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	091b      	lsrs	r3, r3, #4
 80036a2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d047      	beq.n	800373a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036ae:	b29b      	uxth	r3, r3
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d128      	bne.n	8003706 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b28      	cmp	r3, #40	; 0x28
 80036be:	d108      	bne.n	80036d2 <I2C_Slave_ISR_IT+0x8c>
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80036c6:	d104      	bne.n	80036d2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80036c8:	6939      	ldr	r1, [r7, #16]
 80036ca:	68f8      	ldr	r0, [r7, #12]
 80036cc:	f000 fafe 	bl	8003ccc <I2C_ITListenCplt>
 80036d0:	e032      	b.n	8003738 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b29      	cmp	r3, #41	; 0x29
 80036dc:	d10e      	bne.n	80036fc <I2C_Slave_ISR_IT+0xb6>
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80036e4:	d00a      	beq.n	80036fc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2210      	movs	r2, #16
 80036ec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80036ee:	68f8      	ldr	r0, [r7, #12]
 80036f0:	f000 fc39 	bl	8003f66 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80036f4:	68f8      	ldr	r0, [r7, #12]
 80036f6:	f000 f981 	bl	80039fc <I2C_ITSlaveSeqCplt>
 80036fa:	e01d      	b.n	8003738 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2210      	movs	r2, #16
 8003702:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003704:	e096      	b.n	8003834 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2210      	movs	r2, #16
 800370c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003712:	f043 0204 	orr.w	r2, r3, #4
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d004      	beq.n	800372a <I2C_Slave_ISR_IT+0xe4>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003726:	f040 8085 	bne.w	8003834 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	4619      	mov	r1, r3
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f000 fb21 	bl	8003d78 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003736:	e07d      	b.n	8003834 <I2C_Slave_ISR_IT+0x1ee>
 8003738:	e07c      	b.n	8003834 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	f003 0301 	and.w	r3, r3, #1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d030      	beq.n	80037a8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	089b      	lsrs	r3, r3, #2
 800374a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800374e:	2b00      	cmp	r3, #0
 8003750:	d02a      	beq.n	80037a8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003756:	b29b      	uxth	r3, r3
 8003758:	2b00      	cmp	r3, #0
 800375a:	d018      	beq.n	800378e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	b2d2      	uxtb	r2, r2
 8003768:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	1c5a      	adds	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003778:	3b01      	subs	r3, #1
 800377a:	b29a      	uxth	r2, r3
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003784:	b29b      	uxth	r3, r3
 8003786:	3b01      	subs	r3, #1
 8003788:	b29a      	uxth	r2, r3
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003792:	b29b      	uxth	r3, r3
 8003794:	2b00      	cmp	r3, #0
 8003796:	d14f      	bne.n	8003838 <I2C_Slave_ISR_IT+0x1f2>
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800379e:	d04b      	beq.n	8003838 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80037a0:	68f8      	ldr	r0, [r7, #12]
 80037a2:	f000 f92b 	bl	80039fc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 80037a6:	e047      	b.n	8003838 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037a8:	693b      	ldr	r3, [r7, #16]
 80037aa:	08db      	lsrs	r3, r3, #3
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d00a      	beq.n	80037ca <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	08db      	lsrs	r3, r3, #3
 80037b8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d004      	beq.n	80037ca <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80037c0:	6939      	ldr	r1, [r7, #16]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f896 	bl	80038f4 <I2C_ITAddrCplt>
 80037c8:	e037      	b.n	800383a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	085b      	lsrs	r3, r3, #1
 80037ce:	f003 0301 	and.w	r3, r3, #1
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d031      	beq.n	800383a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	085b      	lsrs	r3, r3, #1
 80037da:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d02b      	beq.n	800383a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d018      	beq.n	800381e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037f0:	781a      	ldrb	r2, [r3, #0]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037fc:	1c5a      	adds	r2, r3, #1
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003806:	b29b      	uxth	r3, r3
 8003808:	3b01      	subs	r3, #1
 800380a:	b29a      	uxth	r2, r3
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003814:	3b01      	subs	r3, #1
 8003816:	b29a      	uxth	r2, r3
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	851a      	strh	r2, [r3, #40]	; 0x28
 800381c:	e00d      	b.n	800383a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003824:	d002      	beq.n	800382c <I2C_Slave_ISR_IT+0x1e6>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d106      	bne.n	800383a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800382c:	68f8      	ldr	r0, [r7, #12]
 800382e:	f000 f8e5 	bl	80039fc <I2C_ITSlaveSeqCplt>
 8003832:	e002      	b.n	800383a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8003834:	bf00      	nop
 8003836:	e000      	b.n	800383a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8003838:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b086      	sub	sp, #24
 8003850:	af02      	add	r7, sp, #8
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	4608      	mov	r0, r1
 8003856:	4611      	mov	r1, r2
 8003858:	461a      	mov	r2, r3
 800385a:	4603      	mov	r3, r0
 800385c:	817b      	strh	r3, [r7, #10]
 800385e:	460b      	mov	r3, r1
 8003860:	813b      	strh	r3, [r7, #8]
 8003862:	4613      	mov	r3, r2
 8003864:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	b2da      	uxtb	r2, r3
 800386a:	8979      	ldrh	r1, [r7, #10]
 800386c:	4b20      	ldr	r3, [pc, #128]	; (80038f0 <I2C_RequestMemoryWrite+0xa4>)
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fd55 	bl	8004324 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800387a:	69fa      	ldr	r2, [r7, #28]
 800387c:	69b9      	ldr	r1, [r7, #24]
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 fbf3 	bl	800406a <I2C_WaitOnTXISFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e02c      	b.n	80038e8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800388e:	88fb      	ldrh	r3, [r7, #6]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d105      	bne.n	80038a0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003894:	893b      	ldrh	r3, [r7, #8]
 8003896:	b2da      	uxtb	r2, r3
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	629a      	str	r2, [r3, #40]	; 0x28
 800389e:	e015      	b.n	80038cc <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038a0:	893b      	ldrh	r3, [r7, #8]
 80038a2:	0a1b      	lsrs	r3, r3, #8
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038ae:	69fa      	ldr	r2, [r7, #28]
 80038b0:	69b9      	ldr	r1, [r7, #24]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fbd9 	bl	800406a <I2C_WaitOnTXISFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d001      	beq.n	80038c2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e012      	b.n	80038e8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038c2:	893b      	ldrh	r3, [r7, #8]
 80038c4:	b2da      	uxtb	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80038cc:	69fb      	ldr	r3, [r7, #28]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	2200      	movs	r2, #0
 80038d4:	2180      	movs	r1, #128	; 0x80
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fb87 	bl	8003fea <I2C_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e000      	b.n	80038e8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80038e6:	2300      	movs	r3, #0
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	80002000 	.word	0x80002000

080038f4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003904:	b2db      	uxtb	r3, r3
 8003906:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800390a:	2b28      	cmp	r3, #40	; 0x28
 800390c:	d16a      	bne.n	80039e4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	699b      	ldr	r3, [r3, #24]
 8003914:	0c1b      	lsrs	r3, r3, #16
 8003916:	b2db      	uxtb	r3, r3
 8003918:	f003 0301 	and.w	r3, r3, #1
 800391c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	0c1b      	lsrs	r3, r3, #16
 8003926:	b29b      	uxth	r3, r3
 8003928:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800392c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	b29b      	uxth	r3, r3
 8003936:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800393a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	b29b      	uxth	r3, r3
 8003944:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003948:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	68db      	ldr	r3, [r3, #12]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d138      	bne.n	80039c4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003952:	897b      	ldrh	r3, [r7, #10]
 8003954:	09db      	lsrs	r3, r3, #7
 8003956:	b29a      	uxth	r2, r3
 8003958:	89bb      	ldrh	r3, [r7, #12]
 800395a:	4053      	eors	r3, r2
 800395c:	b29b      	uxth	r3, r3
 800395e:	f003 0306 	and.w	r3, r3, #6
 8003962:	2b00      	cmp	r3, #0
 8003964:	d11c      	bne.n	80039a0 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003966:	897b      	ldrh	r3, [r7, #10]
 8003968:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800396e:	1c5a      	adds	r2, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003978:	2b02      	cmp	r3, #2
 800397a:	d13b      	bne.n	80039f4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	2208      	movs	r2, #8
 8003988:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2200      	movs	r2, #0
 800398e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003992:	89ba      	ldrh	r2, [r7, #12]
 8003994:	7bfb      	ldrb	r3, [r7, #15]
 8003996:	4619      	mov	r1, r3
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	f7ff fe28 	bl	80035ee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800399e:	e029      	b.n	80039f4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80039a0:	893b      	ldrh	r3, [r7, #8]
 80039a2:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80039a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039a8:	6878      	ldr	r0, [r7, #4]
 80039aa:	f000 fced 	bl	8004388 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039b6:	89ba      	ldrh	r2, [r7, #12]
 80039b8:	7bfb      	ldrb	r3, [r7, #15]
 80039ba:	4619      	mov	r1, r3
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff fe16 	bl	80035ee <HAL_I2C_AddrCallback>
}
 80039c2:	e017      	b.n	80039f4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80039c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	f000 fcdd 	bl	8004388 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039d6:	89ba      	ldrh	r2, [r7, #12]
 80039d8:	7bfb      	ldrb	r3, [r7, #15]
 80039da:	4619      	mov	r1, r3
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f7ff fe06 	bl	80035ee <HAL_I2C_AddrCallback>
}
 80039e2:	e007      	b.n	80039f4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	2208      	movs	r2, #8
 80039ea:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80039f4:	bf00      	nop
 80039f6:	3710      	adds	r7, #16
 80039f8:	46bd      	mov	sp, r7
 80039fa:	bd80      	pop	{r7, pc}

080039fc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	0b9b      	lsrs	r3, r3, #14
 8003a18:	f003 0301 	and.w	r3, r3, #1
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d008      	beq.n	8003a32 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e00d      	b.n	8003a4e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	0bdb      	lsrs	r3, r3, #15
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d007      	beq.n	8003a4e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a4c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	2b29      	cmp	r3, #41	; 0x29
 8003a58:	d112      	bne.n	8003a80 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2228      	movs	r2, #40	; 0x28
 8003a5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2221      	movs	r2, #33	; 0x21
 8003a66:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003a68:	2101      	movs	r1, #1
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f000 fc8c 	bl	8004388 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	f7ff fda4 	bl	80035c6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003a7e:	e017      	b.n	8003ab0 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b2a      	cmp	r3, #42	; 0x2a
 8003a8a:	d111      	bne.n	8003ab0 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2228      	movs	r2, #40	; 0x28
 8003a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2222      	movs	r2, #34	; 0x22
 8003a98:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003a9a:	2102      	movs	r1, #2
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f000 fc73 	bl	8004388 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f7ff fd95 	bl	80035da <HAL_I2C_SlaveRxCpltCallback>
}
 8003ab0:	bf00      	nop
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b086      	sub	sp, #24
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	2220      	movs	r2, #32
 8003adc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003ade:	7bfb      	ldrb	r3, [r7, #15]
 8003ae0:	2b21      	cmp	r3, #33	; 0x21
 8003ae2:	d002      	beq.n	8003aea <I2C_ITSlaveCplt+0x32>
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	2b29      	cmp	r3, #41	; 0x29
 8003ae8:	d108      	bne.n	8003afc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003aea:	f248 0101 	movw	r1, #32769	; 0x8001
 8003aee:	6878      	ldr	r0, [r7, #4]
 8003af0:	f000 fc4a 	bl	8004388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2221      	movs	r2, #33	; 0x21
 8003af8:	631a      	str	r2, [r3, #48]	; 0x30
 8003afa:	e00d      	b.n	8003b18 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003afc:	7bfb      	ldrb	r3, [r7, #15]
 8003afe:	2b22      	cmp	r3, #34	; 0x22
 8003b00:	d002      	beq.n	8003b08 <I2C_ITSlaveCplt+0x50>
 8003b02:	7bfb      	ldrb	r3, [r7, #15]
 8003b04:	2b2a      	cmp	r3, #42	; 0x2a
 8003b06:	d107      	bne.n	8003b18 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003b08:	f248 0102 	movw	r1, #32770	; 0x8002
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 fc3b 	bl	8004388 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2222      	movs	r2, #34	; 0x22
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	685a      	ldr	r2, [r3, #4]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b26:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	6859      	ldr	r1, [r3, #4]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	4b64      	ldr	r3, [pc, #400]	; (8003cc4 <I2C_ITSlaveCplt+0x20c>)
 8003b34:	400b      	ands	r3, r1
 8003b36:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fa14 	bl	8003f66 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	0b9b      	lsrs	r3, r3, #14
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d013      	beq.n	8003b72 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681a      	ldr	r2, [r3, #0]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b58:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d020      	beq.n	8003ba4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b70:	e018      	b.n	8003ba4 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b72:	693b      	ldr	r3, [r7, #16]
 8003b74:	0bdb      	lsrs	r3, r3, #15
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d012      	beq.n	8003ba4 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b8c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d006      	beq.n	8003ba4 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	b29a      	uxth	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	089b      	lsrs	r3, r3, #2
 8003ba8:	f003 0301 	and.w	r3, r3, #1
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d020      	beq.n	8003bf2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f023 0304 	bic.w	r3, r3, #4
 8003bb6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00c      	beq.n	8003bf2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d010      	beq.n	8003c40 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	4619      	mov	r1, r3
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 f8a7 	bl	8003d78 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b28      	cmp	r3, #40	; 0x28
 8003c34:	d141      	bne.n	8003cba <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c36:	6979      	ldr	r1, [r7, #20]
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 f847 	bl	8003ccc <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c3e:	e03c      	b.n	8003cba <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c44:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c48:	d014      	beq.n	8003c74 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7ff fed6 	bl	80039fc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a1d      	ldr	r2, [pc, #116]	; (8003cc8 <I2C_ITSlaveCplt+0x210>)
 8003c54:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	2220      	movs	r2, #32
 8003c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2200      	movs	r2, #0
 8003c62:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	f7ff fccc 	bl	800360a <HAL_I2C_ListenCpltCallback>
}
 8003c72:	e022      	b.n	8003cba <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b22      	cmp	r3, #34	; 0x22
 8003c7e:	d10e      	bne.n	8003c9e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f7ff fc9f 	bl	80035da <HAL_I2C_SlaveRxCpltCallback>
}
 8003c9c:	e00d      	b.n	8003cba <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2220      	movs	r2, #32
 8003ca2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff fc86 	bl	80035c6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003cba:	bf00      	nop
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	fe00e800 	.word	0xfe00e800
 8003cc8:	ffff0000 	.word	0xffff0000

08003ccc <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a26      	ldr	r2, [pc, #152]	; (8003d74 <I2C_ITListenCplt+0xa8>)
 8003cda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2200      	movs	r2, #0
 8003ce0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	089b      	lsrs	r3, r3, #2
 8003cfc:	f003 0301 	and.w	r3, r3, #1
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d022      	beq.n	8003d4a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	b2d2      	uxtb	r2, r2
 8003d10:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d16:	1c5a      	adds	r2, r3, #1
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d012      	beq.n	8003d4a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d42:	f043 0204 	orr.w	r2, r3, #4
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d4a:	f248 0103 	movw	r1, #32771	; 0x8003
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f000 fb1a 	bl	8004388 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2210      	movs	r2, #16
 8003d5a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff fc50 	bl	800360a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003d6a:	bf00      	nop
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	ffff0000 	.word	0xffff0000

08003d78 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b084      	sub	sp, #16
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
 8003d80:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d88:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	4a5d      	ldr	r2, [pc, #372]	; (8003f0c <I2C_ITError+0x194>)
 8003d96:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	431a      	orrs	r2, r3
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003daa:	7bfb      	ldrb	r3, [r7, #15]
 8003dac:	2b28      	cmp	r3, #40	; 0x28
 8003dae:	d005      	beq.n	8003dbc <I2C_ITError+0x44>
 8003db0:	7bfb      	ldrb	r3, [r7, #15]
 8003db2:	2b29      	cmp	r3, #41	; 0x29
 8003db4:	d002      	beq.n	8003dbc <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003db6:	7bfb      	ldrb	r3, [r7, #15]
 8003db8:	2b2a      	cmp	r3, #42	; 0x2a
 8003dba:	d10b      	bne.n	8003dd4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003dbc:	2103      	movs	r1, #3
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 fae2 	bl	8004388 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2228      	movs	r2, #40	; 0x28
 8003dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a50      	ldr	r2, [pc, #320]	; (8003f10 <I2C_ITError+0x198>)
 8003dd0:	635a      	str	r2, [r3, #52]	; 0x34
 8003dd2:	e011      	b.n	8003df8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003dd4:	f248 0103 	movw	r1, #32771	; 0x8003
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 fad5 	bl	8004388 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b60      	cmp	r3, #96	; 0x60
 8003de8:	d003      	beq.n	8003df2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2220      	movs	r2, #32
 8003dee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d039      	beq.n	8003e7a <I2C_ITError+0x102>
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b11      	cmp	r3, #17
 8003e0a:	d002      	beq.n	8003e12 <I2C_ITError+0x9a>
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2b21      	cmp	r3, #33	; 0x21
 8003e10:	d133      	bne.n	8003e7a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e20:	d107      	bne.n	8003e32 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681a      	ldr	r2, [r3, #0]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e30:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e36:	4618      	mov	r0, r3
 8003e38:	f7fe feda 	bl	8002bf0 <HAL_DMA_GetState>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b01      	cmp	r3, #1
 8003e40:	d017      	beq.n	8003e72 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	4a33      	ldr	r2, [pc, #204]	; (8003f14 <I2C_ITError+0x19c>)
 8003e48:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7fe fd1e 	bl	8002898 <HAL_DMA_Abort_IT>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d04d      	beq.n	8003efe <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e68:	687a      	ldr	r2, [r7, #4]
 8003e6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e6c:	4610      	mov	r0, r2
 8003e6e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e70:	e045      	b.n	8003efe <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f850 	bl	8003f18 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e78:	e041      	b.n	8003efe <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d039      	beq.n	8003ef6 <I2C_ITError+0x17e>
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b12      	cmp	r3, #18
 8003e86:	d002      	beq.n	8003e8e <I2C_ITError+0x116>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	2b22      	cmp	r3, #34	; 0x22
 8003e8c:	d133      	bne.n	8003ef6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e9c:	d107      	bne.n	8003eae <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003eac:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f7fe fe9c 	bl	8002bf0 <HAL_DMA_GetState>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d017      	beq.n	8003eee <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <I2C_ITError+0x19c>)
 8003ec4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fce0 	bl	8002898 <HAL_DMA_Abort_IT>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d011      	beq.n	8003f02 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003eec:	e009      	b.n	8003f02 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f812 	bl	8003f18 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ef4:	e005      	b.n	8003f02 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f80e 	bl	8003f18 <I2C_TreatErrorCallback>
  }
}
 8003efc:	e002      	b.n	8003f04 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003efe:	bf00      	nop
 8003f00:	e000      	b.n	8003f04 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f02:	bf00      	nop
}
 8003f04:	bf00      	nop
 8003f06:	3710      	adds	r7, #16
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	ffff0000 	.word	0xffff0000
 8003f10:	08003647 	.word	0x08003647
 8003f14:	08003faf 	.word	0x08003faf

08003f18 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b082      	sub	sp, #8
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b60      	cmp	r3, #96	; 0x60
 8003f2a:	d10e      	bne.n	8003f4a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2220      	movs	r2, #32
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2200      	movs	r2, #0
 8003f38:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff fb75 	bl	8003632 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f48:	e009      	b.n	8003f5e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7ff fb60 	bl	800361e <HAL_I2C_ErrorCallback>
}
 8003f5e:	bf00      	nop
 8003f60:	3708      	adds	r7, #8
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}

08003f66 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003f66:	b480      	push	{r7}
 8003f68:	b083      	sub	sp, #12
 8003f6a:	af00      	add	r7, sp, #0
 8003f6c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	699b      	ldr	r3, [r3, #24]
 8003f74:	f003 0302 	and.w	r3, r3, #2
 8003f78:	2b02      	cmp	r3, #2
 8003f7a:	d103      	bne.n	8003f84 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2200      	movs	r2, #0
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	699b      	ldr	r3, [r3, #24]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d007      	beq.n	8003fa2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	699a      	ldr	r2, [r3, #24]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0201 	orr.w	r2, r2, #1
 8003fa0:	619a      	str	r2, [r3, #24]
  }
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d003      	beq.n	8003fcc <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc8:	2200      	movs	r2, #0
 8003fca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fd8:	2200      	movs	r2, #0
 8003fda:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff ff9b 	bl	8003f18 <I2C_TreatErrorCallback>
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b084      	sub	sp, #16
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	60f8      	str	r0, [r7, #12]
 8003ff2:	60b9      	str	r1, [r7, #8]
 8003ff4:	603b      	str	r3, [r7, #0]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ffa:	e022      	b.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004002:	d01e      	beq.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004004:	f7fd fc4a 	bl	800189c <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	69bb      	ldr	r3, [r7, #24]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d302      	bcc.n	800401a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d113      	bne.n	8004042 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800401e:	f043 0220 	orr.w	r2, r3, #32
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2220      	movs	r2, #32
 800402a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e00f      	b.n	8004062 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699a      	ldr	r2, [r3, #24]
 8004048:	68bb      	ldr	r3, [r7, #8]
 800404a:	4013      	ands	r3, r2
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	429a      	cmp	r2, r3
 8004050:	bf0c      	ite	eq
 8004052:	2301      	moveq	r3, #1
 8004054:	2300      	movne	r3, #0
 8004056:	b2db      	uxtb	r3, r3
 8004058:	461a      	mov	r2, r3
 800405a:	79fb      	ldrb	r3, [r7, #7]
 800405c:	429a      	cmp	r2, r3
 800405e:	d0cd      	beq.n	8003ffc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004060:	2300      	movs	r3, #0
}
 8004062:	4618      	mov	r0, r3
 8004064:	3710      	adds	r7, #16
 8004066:	46bd      	mov	sp, r7
 8004068:	bd80      	pop	{r7, pc}

0800406a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b084      	sub	sp, #16
 800406e:	af00      	add	r7, sp, #0
 8004070:	60f8      	str	r0, [r7, #12]
 8004072:	60b9      	str	r1, [r7, #8]
 8004074:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004076:	e02c      	b.n	80040d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68b9      	ldr	r1, [r7, #8]
 800407c:	68f8      	ldr	r0, [r7, #12]
 800407e:	f000 f871 	bl	8004164 <I2C_IsErrorOccurred>
 8004082:	4603      	mov	r3, r0
 8004084:	2b00      	cmp	r3, #0
 8004086:	d001      	beq.n	800408c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e02a      	b.n	80040e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004092:	d01e      	beq.n	80040d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004094:	f7fd fc02 	bl	800189c <HAL_GetTick>
 8004098:	4602      	mov	r2, r0
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	1ad3      	subs	r3, r2, r3
 800409e:	68ba      	ldr	r2, [r7, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d302      	bcc.n	80040aa <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d113      	bne.n	80040d2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ae:	f043 0220 	orr.w	r2, r3, #32
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2220      	movs	r2, #32
 80040ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e007      	b.n	80040e2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	f003 0302 	and.w	r3, r3, #2
 80040dc:	2b02      	cmp	r3, #2
 80040de:	d1cb      	bne.n	8004078 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}

080040ea <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040ea:	b580      	push	{r7, lr}
 80040ec:	b084      	sub	sp, #16
 80040ee:	af00      	add	r7, sp, #0
 80040f0:	60f8      	str	r0, [r7, #12]
 80040f2:	60b9      	str	r1, [r7, #8]
 80040f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80040f6:	e028      	b.n	800414a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68b9      	ldr	r1, [r7, #8]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 f831 	bl	8004164 <I2C_IsErrorOccurred>
 8004102:	4603      	mov	r3, r0
 8004104:	2b00      	cmp	r3, #0
 8004106:	d001      	beq.n	800410c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004108:	2301      	movs	r3, #1
 800410a:	e026      	b.n	800415a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800410c:	f7fd fbc6 	bl	800189c <HAL_GetTick>
 8004110:	4602      	mov	r2, r0
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	429a      	cmp	r2, r3
 800411a:	d302      	bcc.n	8004122 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d113      	bne.n	800414a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004126:	f043 0220 	orr.w	r2, r3, #32
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e007      	b.n	800415a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	699b      	ldr	r3, [r3, #24]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b20      	cmp	r3, #32
 8004156:	d1cf      	bne.n	80040f8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}
	...

08004164 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b08a      	sub	sp, #40	; 0x28
 8004168:	af00      	add	r7, sp, #0
 800416a:	60f8      	str	r0, [r7, #12]
 800416c:	60b9      	str	r1, [r7, #8]
 800416e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004170:	2300      	movs	r3, #0
 8004172:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	f003 0310 	and.w	r3, r3, #16
 800418c:	2b00      	cmp	r3, #0
 800418e:	d068      	beq.n	8004262 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	2210      	movs	r2, #16
 8004196:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004198:	e049      	b.n	800422e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d045      	beq.n	800422e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041a2:	f7fd fb7b 	bl	800189c <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d302      	bcc.n	80041b8 <I2C_IsErrorOccurred+0x54>
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d13a      	bne.n	800422e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041c2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80041ca:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041da:	d121      	bne.n	8004220 <I2C_IsErrorOccurred+0xbc>
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e2:	d01d      	beq.n	8004220 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80041e4:	7cfb      	ldrb	r3, [r7, #19]
 80041e6:	2b20      	cmp	r3, #32
 80041e8:	d01a      	beq.n	8004220 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80041f8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80041fa:	f7fd fb4f 	bl	800189c <HAL_GetTick>
 80041fe:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004200:	e00e      	b.n	8004220 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004202:	f7fd fb4b 	bl	800189c <HAL_GetTick>
 8004206:	4602      	mov	r2, r0
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	1ad3      	subs	r3, r2, r3
 800420c:	2b19      	cmp	r3, #25
 800420e:	d907      	bls.n	8004220 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004210:	6a3b      	ldr	r3, [r7, #32]
 8004212:	f043 0320 	orr.w	r3, r3, #32
 8004216:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800421e:	e006      	b.n	800422e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	f003 0320 	and.w	r3, r3, #32
 800422a:	2b20      	cmp	r3, #32
 800422c:	d1e9      	bne.n	8004202 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	f003 0320 	and.w	r3, r3, #32
 8004238:	2b20      	cmp	r3, #32
 800423a:	d003      	beq.n	8004244 <I2C_IsErrorOccurred+0xe0>
 800423c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0aa      	beq.n	800419a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004244:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004248:	2b00      	cmp	r3, #0
 800424a:	d103      	bne.n	8004254 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	2220      	movs	r2, #32
 8004252:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	f043 0304 	orr.w	r3, r3, #4
 800425a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	699b      	ldr	r3, [r3, #24]
 8004268:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004274:	6a3b      	ldr	r3, [r7, #32]
 8004276:	f043 0301 	orr.w	r3, r3, #1
 800427a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004284:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004286:	2301      	movs	r3, #1
 8004288:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004292:	2b00      	cmp	r3, #0
 8004294:	d00b      	beq.n	80042ae <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f043 0308 	orr.w	r3, r3, #8
 800429c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042a6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	f043 0302 	orr.w	r3, r3, #2
 80042be:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80042d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d01c      	beq.n	8004312 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80042d8:	68f8      	ldr	r0, [r7, #12]
 80042da:	f7ff fe44 	bl	8003f66 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6859      	ldr	r1, [r3, #4]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b0d      	ldr	r3, [pc, #52]	; (8004320 <I2C_IsErrorOccurred+0x1bc>)
 80042ea:	400b      	ands	r3, r1
 80042ec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	431a      	orrs	r2, r3
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2220      	movs	r2, #32
 80042fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2200      	movs	r2, #0
 8004306:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2200      	movs	r2, #0
 800430e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004312:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004316:	4618      	mov	r0, r3
 8004318:	3728      	adds	r7, #40	; 0x28
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}
 800431e:	bf00      	nop
 8004320:	fe00e800 	.word	0xfe00e800

08004324 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	60f8      	str	r0, [r7, #12]
 800432c:	607b      	str	r3, [r7, #4]
 800432e:	460b      	mov	r3, r1
 8004330:	817b      	strh	r3, [r7, #10]
 8004332:	4613      	mov	r3, r2
 8004334:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004336:	897b      	ldrh	r3, [r7, #10]
 8004338:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800433c:	7a7b      	ldrb	r3, [r7, #9]
 800433e:	041b      	lsls	r3, r3, #16
 8004340:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004344:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	4313      	orrs	r3, r2
 800434e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004352:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	0d5b      	lsrs	r3, r3, #21
 800435e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004362:	4b08      	ldr	r3, [pc, #32]	; (8004384 <I2C_TransferConfig+0x60>)
 8004364:	430b      	orrs	r3, r1
 8004366:	43db      	mvns	r3, r3
 8004368:	ea02 0103 	and.w	r1, r2, r3
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004376:	bf00      	nop
 8004378:	371c      	adds	r7, #28
 800437a:	46bd      	mov	sp, r7
 800437c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004380:	4770      	bx	lr
 8004382:	bf00      	nop
 8004384:	03ff63ff 	.word	0x03ff63ff

08004388 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	460b      	mov	r3, r1
 8004392:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004398:	887b      	ldrh	r3, [r7, #2]
 800439a:	f003 0301 	and.w	r3, r3, #1
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00f      	beq.n	80043c2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80043a8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043b6:	2b28      	cmp	r3, #40	; 0x28
 80043b8:	d003      	beq.n	80043c2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80043c0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80043c2:	887b      	ldrh	r3, [r7, #2]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00f      	beq.n	80043ec <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80043d2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043e0:	2b28      	cmp	r3, #40	; 0x28
 80043e2:	d003      	beq.n	80043ec <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80043ea:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80043ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	da03      	bge.n	80043fc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80043fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80043fc:	887b      	ldrh	r3, [r7, #2]
 80043fe:	2b10      	cmp	r3, #16
 8004400:	d103      	bne.n	800440a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8004408:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800440a:	887b      	ldrh	r3, [r7, #2]
 800440c:	2b20      	cmp	r3, #32
 800440e:	d103      	bne.n	8004418 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f043 0320 	orr.w	r3, r3, #32
 8004416:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	2b40      	cmp	r3, #64	; 0x40
 800441c:	d103      	bne.n	8004426 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004424:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6819      	ldr	r1, [r3, #0]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	43da      	mvns	r2, r3
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	400a      	ands	r2, r1
 8004436:	601a      	str	r2, [r3, #0]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b20      	cmp	r3, #32
 8004458:	d138      	bne.n	80044cc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004464:	2302      	movs	r3, #2
 8004466:	e032      	b.n	80044ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2224      	movs	r2, #36	; 0x24
 8004474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0201 	bic.w	r2, r2, #1
 8004486:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004496:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6819      	ldr	r1, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	430a      	orrs	r2, r1
 80044a6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f042 0201 	orr.w	r2, r2, #1
 80044b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2220      	movs	r2, #32
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	370c      	adds	r7, #12
 80044d2:	46bd      	mov	sp, r7
 80044d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d8:	4770      	bx	lr

080044da <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80044da:	b480      	push	{r7}
 80044dc:	b085      	sub	sp, #20
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
 80044e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d139      	bne.n	8004564 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044f6:	2b01      	cmp	r3, #1
 80044f8:	d101      	bne.n	80044fe <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80044fa:	2302      	movs	r3, #2
 80044fc:	e033      	b.n	8004566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2201      	movs	r2, #1
 8004502:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2224      	movs	r2, #36	; 0x24
 800450a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0201 	bic.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800452c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	021b      	lsls	r3, r3, #8
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2220      	movs	r2, #32
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004560:	2300      	movs	r3, #0
 8004562:	e000      	b.n	8004566 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004564:	2302      	movs	r3, #2
  }
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004572:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004574:	b08f      	sub	sp, #60	; 0x3c
 8004576:	af0a      	add	r7, sp, #40	; 0x28
 8004578:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d101      	bne.n	8004584 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e116      	b.n	80047b2 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004590:	b2db      	uxtb	r3, r3
 8004592:	2b00      	cmp	r3, #0
 8004594:	d106      	bne.n	80045a4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	2200      	movs	r2, #0
 800459a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fd f808 	bl	80015b4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2203      	movs	r2, #3
 80045a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d102      	bne.n	80045be <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4618      	mov	r0, r3
 80045c4:	f002 fb6c 	bl	8006ca0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	687e      	ldr	r6, [r7, #4]
 80045d0:	466d      	mov	r5, sp
 80045d2:	f106 0410 	add.w	r4, r6, #16
 80045d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80045dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80045de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80045e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80045e6:	1d33      	adds	r3, r6, #4
 80045e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80045ea:	6838      	ldr	r0, [r7, #0]
 80045ec:	f002 fb00 	bl	8006bf0 <USB_CoreInit>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d005      	beq.n	8004602 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2202      	movs	r2, #2
 80045fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e0d7      	b.n	80047b2 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2100      	movs	r1, #0
 8004608:	4618      	mov	r0, r3
 800460a:	f002 fb5a 	bl	8006cc2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
 8004612:	e04a      	b.n	80046aa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004614:	7bfa      	ldrb	r2, [r7, #15]
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	4613      	mov	r3, r2
 800461a:	00db      	lsls	r3, r3, #3
 800461c:	4413      	add	r3, r2
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	333d      	adds	r3, #61	; 0x3d
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004628:	7bfa      	ldrb	r2, [r7, #15]
 800462a:	6879      	ldr	r1, [r7, #4]
 800462c:	4613      	mov	r3, r2
 800462e:	00db      	lsls	r3, r3, #3
 8004630:	4413      	add	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	440b      	add	r3, r1
 8004636:	333c      	adds	r3, #60	; 0x3c
 8004638:	7bfa      	ldrb	r2, [r7, #15]
 800463a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800463c:	7bfa      	ldrb	r2, [r7, #15]
 800463e:	7bfb      	ldrb	r3, [r7, #15]
 8004640:	b298      	uxth	r0, r3
 8004642:	6879      	ldr	r1, [r7, #4]
 8004644:	4613      	mov	r3, r2
 8004646:	00db      	lsls	r3, r3, #3
 8004648:	4413      	add	r3, r2
 800464a:	009b      	lsls	r3, r3, #2
 800464c:	440b      	add	r3, r1
 800464e:	3344      	adds	r3, #68	; 0x44
 8004650:	4602      	mov	r2, r0
 8004652:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004654:	7bfa      	ldrb	r2, [r7, #15]
 8004656:	6879      	ldr	r1, [r7, #4]
 8004658:	4613      	mov	r3, r2
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	4413      	add	r3, r2
 800465e:	009b      	lsls	r3, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	3340      	adds	r3, #64	; 0x40
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004668:	7bfa      	ldrb	r2, [r7, #15]
 800466a:	6879      	ldr	r1, [r7, #4]
 800466c:	4613      	mov	r3, r2
 800466e:	00db      	lsls	r3, r3, #3
 8004670:	4413      	add	r3, r2
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	440b      	add	r3, r1
 8004676:	3348      	adds	r3, #72	; 0x48
 8004678:	2200      	movs	r2, #0
 800467a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	6879      	ldr	r1, [r7, #4]
 8004680:	4613      	mov	r3, r2
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	4413      	add	r3, r2
 8004686:	009b      	lsls	r3, r3, #2
 8004688:	440b      	add	r3, r1
 800468a:	334c      	adds	r3, #76	; 0x4c
 800468c:	2200      	movs	r2, #0
 800468e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004690:	7bfa      	ldrb	r2, [r7, #15]
 8004692:	6879      	ldr	r1, [r7, #4]
 8004694:	4613      	mov	r3, r2
 8004696:	00db      	lsls	r3, r3, #3
 8004698:	4413      	add	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	440b      	add	r3, r1
 800469e:	3354      	adds	r3, #84	; 0x54
 80046a0:	2200      	movs	r2, #0
 80046a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046a4:	7bfb      	ldrb	r3, [r7, #15]
 80046a6:	3301      	adds	r3, #1
 80046a8:	73fb      	strb	r3, [r7, #15]
 80046aa:	7bfa      	ldrb	r2, [r7, #15]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d3af      	bcc.n	8004614 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046b4:	2300      	movs	r3, #0
 80046b6:	73fb      	strb	r3, [r7, #15]
 80046b8:	e044      	b.n	8004744 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046ba:	7bfa      	ldrb	r2, [r7, #15]
 80046bc:	6879      	ldr	r1, [r7, #4]
 80046be:	4613      	mov	r3, r2
 80046c0:	00db      	lsls	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	440b      	add	r3, r1
 80046c8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80046cc:	2200      	movs	r2, #0
 80046ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80046d0:	7bfa      	ldrb	r2, [r7, #15]
 80046d2:	6879      	ldr	r1, [r7, #4]
 80046d4:	4613      	mov	r3, r2
 80046d6:	00db      	lsls	r3, r3, #3
 80046d8:	4413      	add	r3, r2
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	440b      	add	r3, r1
 80046de:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80046e2:	7bfa      	ldrb	r2, [r7, #15]
 80046e4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80046e6:	7bfa      	ldrb	r2, [r7, #15]
 80046e8:	6879      	ldr	r1, [r7, #4]
 80046ea:	4613      	mov	r3, r2
 80046ec:	00db      	lsls	r3, r3, #3
 80046ee:	4413      	add	r3, r2
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	440b      	add	r3, r1
 80046f4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80046f8:	2200      	movs	r2, #0
 80046fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80046fc:	7bfa      	ldrb	r2, [r7, #15]
 80046fe:	6879      	ldr	r1, [r7, #4]
 8004700:	4613      	mov	r3, r2
 8004702:	00db      	lsls	r3, r3, #3
 8004704:	4413      	add	r3, r2
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800470e:	2200      	movs	r2, #0
 8004710:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004712:	7bfa      	ldrb	r2, [r7, #15]
 8004714:	6879      	ldr	r1, [r7, #4]
 8004716:	4613      	mov	r3, r2
 8004718:	00db      	lsls	r3, r3, #3
 800471a:	4413      	add	r3, r2
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	440b      	add	r3, r1
 8004720:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004724:	2200      	movs	r2, #0
 8004726:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004728:	7bfa      	ldrb	r2, [r7, #15]
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	4613      	mov	r3, r2
 800472e:	00db      	lsls	r3, r3, #3
 8004730:	4413      	add	r3, r2
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	440b      	add	r3, r1
 8004736:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800473e:	7bfb      	ldrb	r3, [r7, #15]
 8004740:	3301      	adds	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
 8004744:	7bfa      	ldrb	r2, [r7, #15]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	429a      	cmp	r2, r3
 800474c:	d3b5      	bcc.n	80046ba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	687e      	ldr	r6, [r7, #4]
 8004756:	466d      	mov	r5, sp
 8004758:	f106 0410 	add.w	r4, r6, #16
 800475c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800475e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004764:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004768:	e885 0003 	stmia.w	r5, {r0, r1}
 800476c:	1d33      	adds	r3, r6, #4
 800476e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004770:	6838      	ldr	r0, [r7, #0]
 8004772:	f002 faf3 	bl	8006d5c <USB_DevInit>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d005      	beq.n	8004788 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e014      	b.n	80047b2 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	2b01      	cmp	r3, #1
 800479e:	d102      	bne.n	80047a6 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f80b 	bl	80047bc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4618      	mov	r0, r3
 80047ac:	f002 fcb1 	bl	8007112 <USB_DevDisconnect>

  return HAL_OK;
 80047b0:	2300      	movs	r3, #0
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3714      	adds	r7, #20
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080047bc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80047bc:	b480      	push	{r7}
 80047be:	b085      	sub	sp, #20
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <HAL_PCDEx_ActivateLPM+0x44>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	10000003 	.word	0x10000003

08004804 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a04      	ldr	r2, [pc, #16]	; (8004820 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800480e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004812:	6013      	str	r3, [r2, #0]
}
 8004814:	bf00      	nop
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40007000 	.word	0x40007000

08004824 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800482c:	2300      	movs	r3, #0
 800482e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e291      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f003 0301 	and.w	r3, r3, #1
 8004842:	2b00      	cmp	r3, #0
 8004844:	f000 8087 	beq.w	8004956 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004848:	4b96      	ldr	r3, [pc, #600]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	f003 030c 	and.w	r3, r3, #12
 8004850:	2b04      	cmp	r3, #4
 8004852:	d00c      	beq.n	800486e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004854:	4b93      	ldr	r3, [pc, #588]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f003 030c 	and.w	r3, r3, #12
 800485c:	2b08      	cmp	r3, #8
 800485e:	d112      	bne.n	8004886 <HAL_RCC_OscConfig+0x62>
 8004860:	4b90      	ldr	r3, [pc, #576]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004862:	685b      	ldr	r3, [r3, #4]
 8004864:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004868:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800486c:	d10b      	bne.n	8004886 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800486e:	4b8d      	ldr	r3, [pc, #564]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d06c      	beq.n	8004954 <HAL_RCC_OscConfig+0x130>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d168      	bne.n	8004954 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	e26b      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800488e:	d106      	bne.n	800489e <HAL_RCC_OscConfig+0x7a>
 8004890:	4b84      	ldr	r3, [pc, #528]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a83      	ldr	r2, [pc, #524]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004896:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800489a:	6013      	str	r3, [r2, #0]
 800489c:	e02e      	b.n	80048fc <HAL_RCC_OscConfig+0xd8>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10c      	bne.n	80048c0 <HAL_RCC_OscConfig+0x9c>
 80048a6:	4b7f      	ldr	r3, [pc, #508]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7e      	ldr	r2, [pc, #504]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048b0:	6013      	str	r3, [r2, #0]
 80048b2:	4b7c      	ldr	r3, [pc, #496]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a7b      	ldr	r2, [pc, #492]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048bc:	6013      	str	r3, [r2, #0]
 80048be:	e01d      	b.n	80048fc <HAL_RCC_OscConfig+0xd8>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80048c8:	d10c      	bne.n	80048e4 <HAL_RCC_OscConfig+0xc0>
 80048ca:	4b76      	ldr	r3, [pc, #472]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a75      	ldr	r2, [pc, #468]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048d4:	6013      	str	r3, [r2, #0]
 80048d6:	4b73      	ldr	r3, [pc, #460]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a72      	ldr	r2, [pc, #456]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048e0:	6013      	str	r3, [r2, #0]
 80048e2:	e00b      	b.n	80048fc <HAL_RCC_OscConfig+0xd8>
 80048e4:	4b6f      	ldr	r3, [pc, #444]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a6e      	ldr	r2, [pc, #440]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ee:	6013      	str	r3, [r2, #0]
 80048f0:	4b6c      	ldr	r3, [pc, #432]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a6b      	ldr	r2, [pc, #428]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80048f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d013      	beq.n	800492c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004904:	f7fc ffca 	bl	800189c <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800490c:	f7fc ffc6 	bl	800189c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b64      	cmp	r3, #100	; 0x64
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e21f      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	4b61      	ldr	r3, [pc, #388]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d0f0      	beq.n	800490c <HAL_RCC_OscConfig+0xe8>
 800492a:	e014      	b.n	8004956 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492c:	f7fc ffb6 	bl	800189c <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004934:	f7fc ffb2 	bl	800189c <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b64      	cmp	r3, #100	; 0x64
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e20b      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004946:	4b57      	ldr	r3, [pc, #348]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x110>
 8004952:	e000      	b.n	8004956 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004954:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0302 	and.w	r3, r3, #2
 800495e:	2b00      	cmp	r3, #0
 8004960:	d069      	beq.n	8004a36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004962:	4b50      	ldr	r3, [pc, #320]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	f003 030c 	and.w	r3, r3, #12
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00b      	beq.n	8004986 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800496e:	4b4d      	ldr	r3, [pc, #308]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004970:	689b      	ldr	r3, [r3, #8]
 8004972:	f003 030c 	and.w	r3, r3, #12
 8004976:	2b08      	cmp	r3, #8
 8004978:	d11c      	bne.n	80049b4 <HAL_RCC_OscConfig+0x190>
 800497a:	4b4a      	ldr	r3, [pc, #296]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d116      	bne.n	80049b4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004986:	4b47      	ldr	r3, [pc, #284]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 0302 	and.w	r3, r3, #2
 800498e:	2b00      	cmp	r3, #0
 8004990:	d005      	beq.n	800499e <HAL_RCC_OscConfig+0x17a>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d001      	beq.n	800499e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e1df      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499e:	4b41      	ldr	r3, [pc, #260]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	493d      	ldr	r1, [pc, #244]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049b2:	e040      	b.n	8004a36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d023      	beq.n	8004a04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80049bc:	4b39      	ldr	r3, [pc, #228]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a38      	ldr	r2, [pc, #224]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049c2:	f043 0301 	orr.w	r3, r3, #1
 80049c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fc ff68 	bl	800189c <HAL_GetTick>
 80049cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d0:	f7fc ff64 	bl	800189c <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e1bd      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049e2:	4b30      	ldr	r3, [pc, #192]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0302 	and.w	r3, r3, #2
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b2d      	ldr	r3, [pc, #180]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	00db      	lsls	r3, r3, #3
 80049fc:	4929      	ldr	r1, [pc, #164]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	600b      	str	r3, [r1, #0]
 8004a02:	e018      	b.n	8004a36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a04:	4b27      	ldr	r3, [pc, #156]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	4a26      	ldr	r2, [pc, #152]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a0a:	f023 0301 	bic.w	r3, r3, #1
 8004a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a10:	f7fc ff44 	bl	800189c <HAL_GetTick>
 8004a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a16:	e008      	b.n	8004a2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a18:	f7fc ff40 	bl	800189c <HAL_GetTick>
 8004a1c:	4602      	mov	r2, r0
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	1ad3      	subs	r3, r2, r3
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d901      	bls.n	8004a2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e199      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a2a:	4b1e      	ldr	r3, [pc, #120]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0302 	and.w	r3, r3, #2
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d1f0      	bne.n	8004a18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0308 	and.w	r3, r3, #8
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d038      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	695b      	ldr	r3, [r3, #20]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d019      	beq.n	8004a7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a4a:	4b16      	ldr	r3, [pc, #88]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a4e:	4a15      	ldr	r2, [pc, #84]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a50:	f043 0301 	orr.w	r3, r3, #1
 8004a54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a56:	f7fc ff21 	bl	800189c <HAL_GetTick>
 8004a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a5c:	e008      	b.n	8004a70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a5e:	f7fc ff1d 	bl	800189c <HAL_GetTick>
 8004a62:	4602      	mov	r2, r0
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	1ad3      	subs	r3, r2, r3
 8004a68:	2b02      	cmp	r3, #2
 8004a6a:	d901      	bls.n	8004a70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a6c:	2303      	movs	r3, #3
 8004a6e:	e176      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a74:	f003 0302 	and.w	r3, r3, #2
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d0f0      	beq.n	8004a5e <HAL_RCC_OscConfig+0x23a>
 8004a7c:	e01a      	b.n	8004ab4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a82:	4a08      	ldr	r2, [pc, #32]	; (8004aa4 <HAL_RCC_OscConfig+0x280>)
 8004a84:	f023 0301 	bic.w	r3, r3, #1
 8004a88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8a:	f7fc ff07 	bl	800189c <HAL_GetTick>
 8004a8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a90:	e00a      	b.n	8004aa8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a92:	f7fc ff03 	bl	800189c <HAL_GetTick>
 8004a96:	4602      	mov	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d903      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e15c      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
 8004aa4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aa8:	4b91      	ldr	r3, [pc, #580]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1ee      	bne.n	8004a92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 80a4 	beq.w	8004c0a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ac2:	4b8b      	ldr	r3, [pc, #556]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d10d      	bne.n	8004aea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ace:	4b88      	ldr	r3, [pc, #544]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	4a87      	ldr	r2, [pc, #540]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8004ada:	4b85      	ldr	r3, [pc, #532]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	60bb      	str	r3, [r7, #8]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004aea:	4b82      	ldr	r3, [pc, #520]	; (8004cf4 <HAL_RCC_OscConfig+0x4d0>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d118      	bne.n	8004b28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004af6:	4b7f      	ldr	r3, [pc, #508]	; (8004cf4 <HAL_RCC_OscConfig+0x4d0>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a7e      	ldr	r2, [pc, #504]	; (8004cf4 <HAL_RCC_OscConfig+0x4d0>)
 8004afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b02:	f7fc fecb 	bl	800189c <HAL_GetTick>
 8004b06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b08:	e008      	b.n	8004b1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b0a:	f7fc fec7 	bl	800189c <HAL_GetTick>
 8004b0e:	4602      	mov	r2, r0
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	2b64      	cmp	r3, #100	; 0x64
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e120      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b1c:	4b75      	ldr	r3, [pc, #468]	; (8004cf4 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d0f0      	beq.n	8004b0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	689b      	ldr	r3, [r3, #8]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d106      	bne.n	8004b3e <HAL_RCC_OscConfig+0x31a>
 8004b30:	4b6f      	ldr	r3, [pc, #444]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b34:	4a6e      	ldr	r2, [pc, #440]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b36:	f043 0301 	orr.w	r3, r3, #1
 8004b3a:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3c:	e02d      	b.n	8004b9a <HAL_RCC_OscConfig+0x376>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	689b      	ldr	r3, [r3, #8]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0x33c>
 8004b46:	4b6a      	ldr	r3, [pc, #424]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b4a:	4a69      	ldr	r2, [pc, #420]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b4c:	f023 0301 	bic.w	r3, r3, #1
 8004b50:	6713      	str	r3, [r2, #112]	; 0x70
 8004b52:	4b67      	ldr	r3, [pc, #412]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b56:	4a66      	ldr	r2, [pc, #408]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b58:	f023 0304 	bic.w	r3, r3, #4
 8004b5c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b5e:	e01c      	b.n	8004b9a <HAL_RCC_OscConfig+0x376>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	689b      	ldr	r3, [r3, #8]
 8004b64:	2b05      	cmp	r3, #5
 8004b66:	d10c      	bne.n	8004b82 <HAL_RCC_OscConfig+0x35e>
 8004b68:	4b61      	ldr	r3, [pc, #388]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b6c:	4a60      	ldr	r2, [pc, #384]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b6e:	f043 0304 	orr.w	r3, r3, #4
 8004b72:	6713      	str	r3, [r2, #112]	; 0x70
 8004b74:	4b5e      	ldr	r3, [pc, #376]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	4a5d      	ldr	r2, [pc, #372]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b80:	e00b      	b.n	8004b9a <HAL_RCC_OscConfig+0x376>
 8004b82:	4b5b      	ldr	r3, [pc, #364]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	4a5a      	ldr	r2, [pc, #360]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b88:	f023 0301 	bic.w	r3, r3, #1
 8004b8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b8e:	4b58      	ldr	r3, [pc, #352]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	4a57      	ldr	r2, [pc, #348]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004b94:	f023 0304 	bic.w	r3, r3, #4
 8004b98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d015      	beq.n	8004bce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba2:	f7fc fe7b 	bl	800189c <HAL_GetTick>
 8004ba6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ba8:	e00a      	b.n	8004bc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004baa:	f7fc fe77 	bl	800189c <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bb8:	4293      	cmp	r3, r2
 8004bba:	d901      	bls.n	8004bc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004bbc:	2303      	movs	r3, #3
 8004bbe:	e0ce      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bc0:	4b4b      	ldr	r3, [pc, #300]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc4:	f003 0302 	and.w	r3, r3, #2
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d0ee      	beq.n	8004baa <HAL_RCC_OscConfig+0x386>
 8004bcc:	e014      	b.n	8004bf8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bce:	f7fc fe65 	bl	800189c <HAL_GetTick>
 8004bd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bd4:	e00a      	b.n	8004bec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bd6:	f7fc fe61 	bl	800189c <HAL_GetTick>
 8004bda:	4602      	mov	r2, r0
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	1ad3      	subs	r3, r2, r3
 8004be0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d901      	bls.n	8004bec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e0b8      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004bec:	4b40      	ldr	r3, [pc, #256]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004bee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bf0:	f003 0302 	and.w	r3, r3, #2
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ee      	bne.n	8004bd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004bf8:	7dfb      	ldrb	r3, [r7, #23]
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d105      	bne.n	8004c0a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bfe:	4b3c      	ldr	r3, [pc, #240]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	4a3b      	ldr	r2, [pc, #236]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c08:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	699b      	ldr	r3, [r3, #24]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	f000 80a4 	beq.w	8004d5c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c14:	4b36      	ldr	r3, [pc, #216]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	f003 030c 	and.w	r3, r3, #12
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d06b      	beq.n	8004cf8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699b      	ldr	r3, [r3, #24]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d149      	bne.n	8004cbc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c28:	4b31      	ldr	r3, [pc, #196]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a30      	ldr	r2, [pc, #192]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c34:	f7fc fe32 	bl	800189c <HAL_GetTick>
 8004c38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3a:	e008      	b.n	8004c4e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c3c:	f7fc fe2e 	bl	800189c <HAL_GetTick>
 8004c40:	4602      	mov	r2, r0
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	1ad3      	subs	r3, r2, r3
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d901      	bls.n	8004c4e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c4a:	2303      	movs	r3, #3
 8004c4c:	e087      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4e:	4b28      	ldr	r3, [pc, #160]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f0      	bne.n	8004c3c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	69da      	ldr	r2, [r3, #28]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6a1b      	ldr	r3, [r3, #32]
 8004c62:	431a      	orrs	r2, r3
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c68:	019b      	lsls	r3, r3, #6
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	3b01      	subs	r3, #1
 8004c74:	041b      	lsls	r3, r3, #16
 8004c76:	431a      	orrs	r2, r3
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c7c:	061b      	lsls	r3, r3, #24
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004c86:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c88:	4b19      	ldr	r3, [pc, #100]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a18      	ldr	r2, [pc, #96]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004c8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c94:	f7fc fe02 	bl	800189c <HAL_GetTick>
 8004c98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c9a:	e008      	b.n	8004cae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c9c:	f7fc fdfe 	bl	800189c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	693b      	ldr	r3, [r7, #16]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e057      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cae:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d0f0      	beq.n	8004c9c <HAL_RCC_OscConfig+0x478>
 8004cba:	e04f      	b.n	8004d5c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a0b      	ldr	r2, [pc, #44]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004cc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004cc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fc fde8 	bl	800189c <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fc fde4 	bl	800189c <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e03d      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ce2:	4b03      	ldr	r3, [pc, #12]	; (8004cf0 <HAL_RCC_OscConfig+0x4cc>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x4ac>
 8004cee:	e035      	b.n	8004d5c <HAL_RCC_OscConfig+0x538>
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004cf8:	4b1b      	ldr	r3, [pc, #108]	; (8004d68 <HAL_RCC_OscConfig+0x544>)
 8004cfa:	685b      	ldr	r3, [r3, #4]
 8004cfc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d028      	beq.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d121      	bne.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d11a      	bne.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d22:	68fa      	ldr	r2, [r7, #12]
 8004d24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d28:	4013      	ands	r3, r2
 8004d2a:	687a      	ldr	r2, [r7, #4]
 8004d2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d111      	bne.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d3e:	085b      	lsrs	r3, r3, #1
 8004d40:	3b01      	subs	r3, #1
 8004d42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d107      	bne.n	8004d58 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d001      	beq.n	8004d5c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004d58:	2301      	movs	r3, #1
 8004d5a:	e000      	b.n	8004d5e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004d5c:	2300      	movs	r3, #0
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	3718      	adds	r7, #24
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	bf00      	nop
 8004d68:	40023800 	.word	0x40023800

08004d6c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d76:	2300      	movs	r3, #0
 8004d78:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d101      	bne.n	8004d84 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d80:	2301      	movs	r3, #1
 8004d82:	e0d0      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d84:	4b6a      	ldr	r3, [pc, #424]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	429a      	cmp	r2, r3
 8004d90:	d910      	bls.n	8004db4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d92:	4b67      	ldr	r3, [pc, #412]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f023 020f 	bic.w	r2, r3, #15
 8004d9a:	4965      	ldr	r1, [pc, #404]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004da2:	4b63      	ldr	r3, [pc, #396]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 030f 	and.w	r3, r3, #15
 8004daa:	683a      	ldr	r2, [r7, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d001      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0b8      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0302 	and.w	r3, r3, #2
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d020      	beq.n	8004e02 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0304 	and.w	r3, r3, #4
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d005      	beq.n	8004dd8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004dcc:	4b59      	ldr	r3, [pc, #356]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	4a58      	ldr	r2, [pc, #352]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0308 	and.w	r3, r3, #8
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d005      	beq.n	8004df0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004de4:	4b53      	ldr	r3, [pc, #332]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	4a52      	ldr	r2, [pc, #328]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004dee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004df0:	4b50      	ldr	r3, [pc, #320]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004df2:	689b      	ldr	r3, [r3, #8]
 8004df4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	494d      	ldr	r1, [pc, #308]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d040      	beq.n	8004e90 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	2b01      	cmp	r3, #1
 8004e14:	d107      	bne.n	8004e26 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e16:	4b47      	ldr	r3, [pc, #284]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d115      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	e07f      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d107      	bne.n	8004e3e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e2e:	4b41      	ldr	r3, [pc, #260]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d109      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e3a:	2301      	movs	r3, #1
 8004e3c:	e073      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e3e:	4b3d      	ldr	r3, [pc, #244]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f003 0302 	and.w	r3, r3, #2
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e06b      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e4e:	4b39      	ldr	r3, [pc, #228]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	f023 0203 	bic.w	r2, r3, #3
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	4936      	ldr	r1, [pc, #216]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e60:	f7fc fd1c 	bl	800189c <HAL_GetTick>
 8004e64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e66:	e00a      	b.n	8004e7e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e68:	f7fc fd18 	bl	800189c <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d901      	bls.n	8004e7e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e053      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e7e:	4b2d      	ldr	r3, [pc, #180]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 020c 	and.w	r2, r3, #12
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d1eb      	bne.n	8004e68 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e90:	4b27      	ldr	r3, [pc, #156]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 030f 	and.w	r3, r3, #15
 8004e98:	683a      	ldr	r2, [r7, #0]
 8004e9a:	429a      	cmp	r2, r3
 8004e9c:	d210      	bcs.n	8004ec0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e9e:	4b24      	ldr	r3, [pc, #144]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f023 020f 	bic.w	r2, r3, #15
 8004ea6:	4922      	ldr	r1, [pc, #136]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_RCC_ClockConfig+0x1c4>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 030f 	and.w	r3, r3, #15
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d001      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e032      	b.n	8004f26 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0304 	and.w	r3, r3, #4
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d008      	beq.n	8004ede <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ecc:	4b19      	ldr	r3, [pc, #100]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004ece:	689b      	ldr	r3, [r3, #8]
 8004ed0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	68db      	ldr	r3, [r3, #12]
 8004ed8:	4916      	ldr	r1, [pc, #88]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004eda:	4313      	orrs	r3, r2
 8004edc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0308 	and.w	r3, r3, #8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d009      	beq.n	8004efe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eea:	4b12      	ldr	r3, [pc, #72]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	691b      	ldr	r3, [r3, #16]
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	490e      	ldr	r1, [pc, #56]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004efa:	4313      	orrs	r3, r2
 8004efc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004efe:	f000 f821 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 8004f02:	4602      	mov	r2, r0
 8004f04:	4b0b      	ldr	r3, [pc, #44]	; (8004f34 <HAL_RCC_ClockConfig+0x1c8>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	091b      	lsrs	r3, r3, #4
 8004f0a:	f003 030f 	and.w	r3, r3, #15
 8004f0e:	490a      	ldr	r1, [pc, #40]	; (8004f38 <HAL_RCC_ClockConfig+0x1cc>)
 8004f10:	5ccb      	ldrb	r3, [r1, r3]
 8004f12:	fa22 f303 	lsr.w	r3, r2, r3
 8004f16:	4a09      	ldr	r2, [pc, #36]	; (8004f3c <HAL_RCC_ClockConfig+0x1d0>)
 8004f18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <HAL_RCC_ClockConfig+0x1d4>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fc fc78 	bl	8001814 <HAL_InitTick>

  return HAL_OK;
 8004f24:	2300      	movs	r3, #0
}
 8004f26:	4618      	mov	r0, r3
 8004f28:	3710      	adds	r7, #16
 8004f2a:	46bd      	mov	sp, r7
 8004f2c:	bd80      	pop	{r7, pc}
 8004f2e:	bf00      	nop
 8004f30:	40023c00 	.word	0x40023c00
 8004f34:	40023800 	.word	0x40023800
 8004f38:	08008580 	.word	0x08008580
 8004f3c:	20000020 	.word	0x20000020
 8004f40:	20000024 	.word	0x20000024

08004f44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f48:	b094      	sub	sp, #80	; 0x50
 8004f4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f50:	2300      	movs	r3, #0
 8004f52:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f54:	2300      	movs	r3, #0
 8004f56:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004f58:	2300      	movs	r3, #0
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f5c:	4b79      	ldr	r3, [pc, #484]	; (8005144 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 030c 	and.w	r3, r3, #12
 8004f64:	2b08      	cmp	r3, #8
 8004f66:	d00d      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0x40>
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	f200 80e1 	bhi.w	8005130 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d002      	beq.n	8004f78 <HAL_RCC_GetSysClockFreq+0x34>
 8004f72:	2b04      	cmp	r3, #4
 8004f74:	d003      	beq.n	8004f7e <HAL_RCC_GetSysClockFreq+0x3a>
 8004f76:	e0db      	b.n	8005130 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f78:	4b73      	ldr	r3, [pc, #460]	; (8005148 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f7c:	e0db      	b.n	8005136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f7e:	4b73      	ldr	r3, [pc, #460]	; (800514c <HAL_RCC_GetSysClockFreq+0x208>)
 8004f80:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f82:	e0d8      	b.n	8005136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f84:	4b6f      	ldr	r3, [pc, #444]	; (8005144 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f8c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f8e:	4b6d      	ldr	r3, [pc, #436]	; (8005144 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d063      	beq.n	8005062 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f9a:	4b6a      	ldr	r3, [pc, #424]	; (8005144 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	099b      	lsrs	r3, r3, #6
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fa4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fac:	633b      	str	r3, [r7, #48]	; 0x30
 8004fae:	2300      	movs	r3, #0
 8004fb0:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	462b      	mov	r3, r5
 8004fba:	f04f 0000 	mov.w	r0, #0
 8004fbe:	f04f 0100 	mov.w	r1, #0
 8004fc2:	0159      	lsls	r1, r3, #5
 8004fc4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fc8:	0150      	lsls	r0, r2, #5
 8004fca:	4602      	mov	r2, r0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	4621      	mov	r1, r4
 8004fd0:	1a51      	subs	r1, r2, r1
 8004fd2:	6139      	str	r1, [r7, #16]
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	eb63 0301 	sbc.w	r3, r3, r1
 8004fda:	617b      	str	r3, [r7, #20]
 8004fdc:	f04f 0200 	mov.w	r2, #0
 8004fe0:	f04f 0300 	mov.w	r3, #0
 8004fe4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fe8:	4659      	mov	r1, fp
 8004fea:	018b      	lsls	r3, r1, #6
 8004fec:	4651      	mov	r1, sl
 8004fee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004ff2:	4651      	mov	r1, sl
 8004ff4:	018a      	lsls	r2, r1, #6
 8004ff6:	4651      	mov	r1, sl
 8004ff8:	ebb2 0801 	subs.w	r8, r2, r1
 8004ffc:	4659      	mov	r1, fp
 8004ffe:	eb63 0901 	sbc.w	r9, r3, r1
 8005002:	f04f 0200 	mov.w	r2, #0
 8005006:	f04f 0300 	mov.w	r3, #0
 800500a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800500e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005012:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005016:	4690      	mov	r8, r2
 8005018:	4699      	mov	r9, r3
 800501a:	4623      	mov	r3, r4
 800501c:	eb18 0303 	adds.w	r3, r8, r3
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	462b      	mov	r3, r5
 8005024:	eb49 0303 	adc.w	r3, r9, r3
 8005028:	60fb      	str	r3, [r7, #12]
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005036:	4629      	mov	r1, r5
 8005038:	024b      	lsls	r3, r1, #9
 800503a:	4621      	mov	r1, r4
 800503c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005040:	4621      	mov	r1, r4
 8005042:	024a      	lsls	r2, r1, #9
 8005044:	4610      	mov	r0, r2
 8005046:	4619      	mov	r1, r3
 8005048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800504a:	2200      	movs	r2, #0
 800504c:	62bb      	str	r3, [r7, #40]	; 0x28
 800504e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005050:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005054:	f7fb f938 	bl	80002c8 <__aeabi_uldivmod>
 8005058:	4602      	mov	r2, r0
 800505a:	460b      	mov	r3, r1
 800505c:	4613      	mov	r3, r2
 800505e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005060:	e058      	b.n	8005114 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005062:	4b38      	ldr	r3, [pc, #224]	; (8005144 <HAL_RCC_GetSysClockFreq+0x200>)
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	099b      	lsrs	r3, r3, #6
 8005068:	2200      	movs	r2, #0
 800506a:	4618      	mov	r0, r3
 800506c:	4611      	mov	r1, r2
 800506e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005072:	623b      	str	r3, [r7, #32]
 8005074:	2300      	movs	r3, #0
 8005076:	627b      	str	r3, [r7, #36]	; 0x24
 8005078:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800507c:	4642      	mov	r2, r8
 800507e:	464b      	mov	r3, r9
 8005080:	f04f 0000 	mov.w	r0, #0
 8005084:	f04f 0100 	mov.w	r1, #0
 8005088:	0159      	lsls	r1, r3, #5
 800508a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800508e:	0150      	lsls	r0, r2, #5
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4641      	mov	r1, r8
 8005096:	ebb2 0a01 	subs.w	sl, r2, r1
 800509a:	4649      	mov	r1, r9
 800509c:	eb63 0b01 	sbc.w	fp, r3, r1
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050b4:	ebb2 040a 	subs.w	r4, r2, sl
 80050b8:	eb63 050b 	sbc.w	r5, r3, fp
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	00eb      	lsls	r3, r5, #3
 80050c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050ca:	00e2      	lsls	r2, r4, #3
 80050cc:	4614      	mov	r4, r2
 80050ce:	461d      	mov	r5, r3
 80050d0:	4643      	mov	r3, r8
 80050d2:	18e3      	adds	r3, r4, r3
 80050d4:	603b      	str	r3, [r7, #0]
 80050d6:	464b      	mov	r3, r9
 80050d8:	eb45 0303 	adc.w	r3, r5, r3
 80050dc:	607b      	str	r3, [r7, #4]
 80050de:	f04f 0200 	mov.w	r2, #0
 80050e2:	f04f 0300 	mov.w	r3, #0
 80050e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ea:	4629      	mov	r1, r5
 80050ec:	028b      	lsls	r3, r1, #10
 80050ee:	4621      	mov	r1, r4
 80050f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050f4:	4621      	mov	r1, r4
 80050f6:	028a      	lsls	r2, r1, #10
 80050f8:	4610      	mov	r0, r2
 80050fa:	4619      	mov	r1, r3
 80050fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050fe:	2200      	movs	r2, #0
 8005100:	61bb      	str	r3, [r7, #24]
 8005102:	61fa      	str	r2, [r7, #28]
 8005104:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005108:	f7fb f8de 	bl	80002c8 <__aeabi_uldivmod>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	4613      	mov	r3, r2
 8005112:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005114:	4b0b      	ldr	r3, [pc, #44]	; (8005144 <HAL_RCC_GetSysClockFreq+0x200>)
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	0c1b      	lsrs	r3, r3, #16
 800511a:	f003 0303 	and.w	r3, r3, #3
 800511e:	3301      	adds	r3, #1
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005124:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005126:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005128:	fbb2 f3f3 	udiv	r3, r2, r3
 800512c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800512e:	e002      	b.n	8005136 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005130:	4b05      	ldr	r3, [pc, #20]	; (8005148 <HAL_RCC_GetSysClockFreq+0x204>)
 8005132:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005138:	4618      	mov	r0, r3
 800513a:	3750      	adds	r7, #80	; 0x50
 800513c:	46bd      	mov	sp, r7
 800513e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800
 8005148:	00f42400 	.word	0x00f42400
 800514c:	007a1200 	.word	0x007a1200

08005150 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005150:	b480      	push	{r7}
 8005152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005154:	4b03      	ldr	r3, [pc, #12]	; (8005164 <HAL_RCC_GetHCLKFreq+0x14>)
 8005156:	681b      	ldr	r3, [r3, #0]
}
 8005158:	4618      	mov	r0, r3
 800515a:	46bd      	mov	sp, r7
 800515c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005160:	4770      	bx	lr
 8005162:	bf00      	nop
 8005164:	20000020 	.word	0x20000020

08005168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800516c:	f7ff fff0 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 8005170:	4602      	mov	r2, r0
 8005172:	4b05      	ldr	r3, [pc, #20]	; (8005188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	0a9b      	lsrs	r3, r3, #10
 8005178:	f003 0307 	and.w	r3, r3, #7
 800517c:	4903      	ldr	r1, [pc, #12]	; (800518c <HAL_RCC_GetPCLK1Freq+0x24>)
 800517e:	5ccb      	ldrb	r3, [r1, r3]
 8005180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005184:	4618      	mov	r0, r3
 8005186:	bd80      	pop	{r7, pc}
 8005188:	40023800 	.word	0x40023800
 800518c:	08008590 	.word	0x08008590

08005190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005194:	f7ff ffdc 	bl	8005150 <HAL_RCC_GetHCLKFreq>
 8005198:	4602      	mov	r2, r0
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	0b5b      	lsrs	r3, r3, #13
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	4903      	ldr	r1, [pc, #12]	; (80051b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051a6:	5ccb      	ldrb	r3, [r1, r3]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40023800 	.word	0x40023800
 80051b4:	08008590 	.word	0x08008590

080051b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b088      	sub	sp, #32
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80051cc:	2300      	movs	r3, #0
 80051ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80051d0:	2300      	movs	r3, #0
 80051d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f003 0301 	and.w	r3, r3, #1
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d012      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051e0:	4b69      	ldr	r3, [pc, #420]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e2:	689b      	ldr	r3, [r3, #8]
 80051e4:	4a68      	ldr	r2, [pc, #416]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051ea:	6093      	str	r3, [r2, #8]
 80051ec:	4b66      	ldr	r3, [pc, #408]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f4:	4964      	ldr	r1, [pc, #400]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005202:	2301      	movs	r3, #1
 8005204:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d017      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005212:	4b5d      	ldr	r3, [pc, #372]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005220:	4959      	ldr	r1, [pc, #356]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005230:	d101      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800523e:	2301      	movs	r3, #1
 8005240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d017      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800524e:	4b4e      	ldr	r3, [pc, #312]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525c:	494a      	ldr	r1, [pc, #296]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800525e:	4313      	orrs	r3, r2
 8005260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800526c:	d101      	bne.n	8005272 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800526e:	2301      	movs	r3, #1
 8005270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800527a:	2301      	movs	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d001      	beq.n	800528e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800528a:	2301      	movs	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0320 	and.w	r3, r3, #32
 8005296:	2b00      	cmp	r3, #0
 8005298:	f000 808b 	beq.w	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800529c:	4b3a      	ldr	r3, [pc, #232]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	4a39      	ldr	r2, [pc, #228]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052a6:	6413      	str	r3, [r2, #64]	; 0x40
 80052a8:	4b37      	ldr	r3, [pc, #220]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b0:	60bb      	str	r3, [r7, #8]
 80052b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052b4:	4b35      	ldr	r3, [pc, #212]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a34      	ldr	r2, [pc, #208]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052c0:	f7fc faec 	bl	800189c <HAL_GetTick>
 80052c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052c6:	e008      	b.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052c8:	f7fc fae8 	bl	800189c <HAL_GetTick>
 80052cc:	4602      	mov	r2, r0
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	1ad3      	subs	r3, r2, r3
 80052d2:	2b64      	cmp	r3, #100	; 0x64
 80052d4:	d901      	bls.n	80052da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80052d6:	2303      	movs	r3, #3
 80052d8:	e357      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80052da:	4b2c      	ldr	r3, [pc, #176]	; (800538c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d0f0      	beq.n	80052c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052e6:	4b28      	ldr	r3, [pc, #160]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d035      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	429a      	cmp	r2, r3
 8005302:	d02e      	beq.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005304:	4b20      	ldr	r3, [pc, #128]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800530c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800530e:	4b1e      	ldr	r3, [pc, #120]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005312:	4a1d      	ldr	r2, [pc, #116]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005318:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800531a:	4b1b      	ldr	r3, [pc, #108]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	4a1a      	ldr	r2, [pc, #104]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005324:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005326:	4a18      	ldr	r2, [pc, #96]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800532c:	4b16      	ldr	r3, [pc, #88]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	d114      	bne.n	8005362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005338:	f7fc fab0 	bl	800189c <HAL_GetTick>
 800533c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800533e:	e00a      	b.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005340:	f7fc faac 	bl	800189c <HAL_GetTick>
 8005344:	4602      	mov	r2, r0
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	1ad3      	subs	r3, r2, r3
 800534a:	f241 3288 	movw	r2, #5000	; 0x1388
 800534e:	4293      	cmp	r3, r2
 8005350:	d901      	bls.n	8005356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005352:	2303      	movs	r3, #3
 8005354:	e319      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005356:	4b0c      	ldr	r3, [pc, #48]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d0ee      	beq.n	8005340 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800536a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800536e:	d111      	bne.n	8005394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005370:	4b05      	ldr	r3, [pc, #20]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800537c:	4b04      	ldr	r3, [pc, #16]	; (8005390 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800537e:	400b      	ands	r3, r1
 8005380:	4901      	ldr	r1, [pc, #4]	; (8005388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
 8005386:	e00b      	b.n	80053a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005388:	40023800 	.word	0x40023800
 800538c:	40007000 	.word	0x40007000
 8005390:	0ffffcff 	.word	0x0ffffcff
 8005394:	4baa      	ldr	r3, [pc, #680]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005396:	689b      	ldr	r3, [r3, #8]
 8005398:	4aa9      	ldr	r2, [pc, #676]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800539a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800539e:	6093      	str	r3, [r2, #8]
 80053a0:	4ba7      	ldr	r3, [pc, #668]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ac:	49a4      	ldr	r1, [pc, #656]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0310 	and.w	r3, r3, #16
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d010      	beq.n	80053e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053be:	4ba0      	ldr	r3, [pc, #640]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c4:	4a9e      	ldr	r2, [pc, #632]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80053ce:	4b9c      	ldr	r3, [pc, #624]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053d8:	4999      	ldr	r1, [pc, #612]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d00a      	beq.n	8005402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053ec:	4b94      	ldr	r3, [pc, #592]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053fa:	4991      	ldr	r1, [pc, #580]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800540a:	2b00      	cmp	r3, #0
 800540c:	d00a      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800540e:	4b8c      	ldr	r3, [pc, #560]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800541c:	4988      	ldr	r1, [pc, #544]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005430:	4b83      	ldr	r3, [pc, #524]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800543e:	4980      	ldr	r1, [pc, #512]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005452:	4b7b      	ldr	r3, [pc, #492]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005460:	4977      	ldr	r1, [pc, #476]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005474:	4b72      	ldr	r3, [pc, #456]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f023 0203 	bic.w	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005482:	496f      	ldr	r1, [pc, #444]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005496:	4b6a      	ldr	r3, [pc, #424]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	f023 020c 	bic.w	r2, r3, #12
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054a4:	4966      	ldr	r1, [pc, #408]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054b8:	4b61      	ldr	r3, [pc, #388]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054c6:	495e      	ldr	r1, [pc, #376]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80054da:	4b59      	ldr	r3, [pc, #356]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054e8:	4955      	ldr	r1, [pc, #340]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054fc:	4b50      	ldr	r3, [pc, #320]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800550a:	494d      	ldr	r1, [pc, #308]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800551e:	4b48      	ldr	r3, [pc, #288]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800552c:	4944      	ldr	r1, [pc, #272]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005540:	4b3f      	ldr	r3, [pc, #252]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800554e:	493c      	ldr	r1, [pc, #240]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005562:	4b37      	ldr	r3, [pc, #220]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	4933      	ldr	r1, [pc, #204]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005584:	4b2e      	ldr	r3, [pc, #184]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005592:	492b      	ldr	r1, [pc, #172]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d011      	beq.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055a6:	4b26      	ldr	r3, [pc, #152]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055b4:	4922      	ldr	r1, [pc, #136]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055c4:	d101      	bne.n	80055ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80055c6:	2301      	movs	r3, #1
 80055c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0308 	and.w	r3, r3, #8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80055d6:	2301      	movs	r3, #1
 80055d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00a      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055e6:	4b16      	ldr	r3, [pc, #88]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055f4:	4912      	ldr	r1, [pc, #72]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055f6:	4313      	orrs	r3, r2
 80055f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d00b      	beq.n	8005620 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005608:	4b0d      	ldr	r3, [pc, #52]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800560a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800560e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005618:	4909      	ldr	r1, [pc, #36]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800561a:	4313      	orrs	r3, r2
 800561c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005620:	69fb      	ldr	r3, [r7, #28]
 8005622:	2b01      	cmp	r3, #1
 8005624:	d006      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 80d9 	beq.w	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005634:	4b02      	ldr	r3, [pc, #8]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a01      	ldr	r2, [pc, #4]	; (8005640 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800563a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800563e:	e001      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005640:	40023800 	.word	0x40023800
 8005644:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005646:	f7fc f929 	bl	800189c <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800564e:	f7fc f925 	bl	800189c <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b64      	cmp	r3, #100	; 0x64
 800565a:	d901      	bls.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e194      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005660:	4b6c      	ldr	r3, [pc, #432]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f0      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 0301 	and.w	r3, r3, #1
 8005674:	2b00      	cmp	r3, #0
 8005676:	d021      	beq.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567c:	2b00      	cmp	r3, #0
 800567e:	d11d      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005680:	4b64      	ldr	r3, [pc, #400]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005682:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005686:	0c1b      	lsrs	r3, r3, #16
 8005688:	f003 0303 	and.w	r3, r3, #3
 800568c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800568e:	4b61      	ldr	r3, [pc, #388]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005694:	0e1b      	lsrs	r3, r3, #24
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	019a      	lsls	r2, r3, #6
 80056a2:	693b      	ldr	r3, [r7, #16]
 80056a4:	041b      	lsls	r3, r3, #16
 80056a6:	431a      	orrs	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	061b      	lsls	r3, r3, #24
 80056ac:	431a      	orrs	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	071b      	lsls	r3, r3, #28
 80056b4:	4957      	ldr	r1, [pc, #348]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d004      	beq.n	80056d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056d0:	d00a      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d02e      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056e6:	d129      	bne.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056e8:	4b4a      	ldr	r3, [pc, #296]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ee:	0c1b      	lsrs	r3, r3, #16
 80056f0:	f003 0303 	and.w	r3, r3, #3
 80056f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80056f6:	4b47      	ldr	r3, [pc, #284]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056fc:	0f1b      	lsrs	r3, r3, #28
 80056fe:	f003 0307 	and.w	r3, r3, #7
 8005702:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	019a      	lsls	r2, r3, #6
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	061b      	lsls	r3, r3, #24
 8005716:	431a      	orrs	r2, r3
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	071b      	lsls	r3, r3, #28
 800571c:	493d      	ldr	r1, [pc, #244]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800571e:	4313      	orrs	r3, r2
 8005720:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005724:	4b3b      	ldr	r3, [pc, #236]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800572a:	f023 021f 	bic.w	r2, r3, #31
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005732:	3b01      	subs	r3, #1
 8005734:	4937      	ldr	r1, [pc, #220]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005744:	2b00      	cmp	r3, #0
 8005746:	d01d      	beq.n	8005784 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005748:	4b32      	ldr	r3, [pc, #200]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800574a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800574e:	0e1b      	lsrs	r3, r3, #24
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005756:	4b2f      	ldr	r3, [pc, #188]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800575c:	0f1b      	lsrs	r3, r3, #28
 800575e:	f003 0307 	and.w	r3, r3, #7
 8005762:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	019a      	lsls	r2, r3, #6
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	041b      	lsls	r3, r3, #16
 8005770:	431a      	orrs	r2, r3
 8005772:	693b      	ldr	r3, [r7, #16]
 8005774:	061b      	lsls	r3, r3, #24
 8005776:	431a      	orrs	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	071b      	lsls	r3, r3, #28
 800577c:	4925      	ldr	r1, [pc, #148]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800577e:	4313      	orrs	r3, r2
 8005780:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d011      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	019a      	lsls	r2, r3, #6
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	041b      	lsls	r3, r3, #16
 800579c:	431a      	orrs	r2, r3
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	061b      	lsls	r3, r3, #24
 80057a4:	431a      	orrs	r2, r3
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	071b      	lsls	r3, r3, #28
 80057ac:	4919      	ldr	r1, [pc, #100]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ae:	4313      	orrs	r3, r2
 80057b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057b4:	4b17      	ldr	r3, [pc, #92]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	4a16      	ldr	r2, [pc, #88]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057c0:	f7fc f86c 	bl	800189c <HAL_GetTick>
 80057c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057c6:	e008      	b.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057c8:	f7fc f868 	bl	800189c <HAL_GetTick>
 80057cc:	4602      	mov	r2, r0
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	1ad3      	subs	r3, r2, r3
 80057d2:	2b64      	cmp	r3, #100	; 0x64
 80057d4:	d901      	bls.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057d6:	2303      	movs	r3, #3
 80057d8:	e0d7      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057da:	4b0e      	ldr	r3, [pc, #56]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d0f0      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	f040 80cd 	bne.w	8005988 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a08      	ldr	r2, [pc, #32]	; (8005814 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057fa:	f7fc f84f 	bl	800189c <HAL_GetTick>
 80057fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005800:	e00a      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005802:	f7fc f84b 	bl	800189c <HAL_GetTick>
 8005806:	4602      	mov	r2, r0
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	1ad3      	subs	r3, r2, r3
 800580c:	2b64      	cmp	r3, #100	; 0x64
 800580e:	d903      	bls.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005810:	2303      	movs	r3, #3
 8005812:	e0ba      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005814:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005818:	4b5e      	ldr	r3, [pc, #376]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005824:	d0ed      	beq.n	8005802 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800582e:	2b00      	cmp	r3, #0
 8005830:	d003      	beq.n	800583a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005836:	2b00      	cmp	r3, #0
 8005838:	d009      	beq.n	800584e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005842:	2b00      	cmp	r3, #0
 8005844:	d02e      	beq.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800584a:	2b00      	cmp	r3, #0
 800584c:	d12a      	bne.n	80058a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800584e:	4b51      	ldr	r3, [pc, #324]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005850:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005854:	0c1b      	lsrs	r3, r3, #16
 8005856:	f003 0303 	and.w	r3, r3, #3
 800585a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800585c:	4b4d      	ldr	r3, [pc, #308]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800585e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005862:	0f1b      	lsrs	r3, r3, #28
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	019a      	lsls	r2, r3, #6
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	041b      	lsls	r3, r3, #16
 8005874:	431a      	orrs	r2, r3
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	061b      	lsls	r3, r3, #24
 800587c:	431a      	orrs	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	071b      	lsls	r3, r3, #28
 8005882:	4944      	ldr	r1, [pc, #272]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005884:	4313      	orrs	r3, r2
 8005886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800588a:	4b42      	ldr	r3, [pc, #264]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800588c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005890:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005898:	3b01      	subs	r3, #1
 800589a:	021b      	lsls	r3, r3, #8
 800589c:	493d      	ldr	r1, [pc, #244]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800589e:	4313      	orrs	r3, r2
 80058a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d022      	beq.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058b8:	d11d      	bne.n	80058f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058ba:	4b36      	ldr	r3, [pc, #216]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058c0:	0e1b      	lsrs	r3, r3, #24
 80058c2:	f003 030f 	and.w	r3, r3, #15
 80058c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058c8:	4b32      	ldr	r3, [pc, #200]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ce:	0f1b      	lsrs	r3, r3, #28
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	019a      	lsls	r2, r3, #6
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	041b      	lsls	r3, r3, #16
 80058e2:	431a      	orrs	r2, r3
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	061b      	lsls	r3, r3, #24
 80058e8:	431a      	orrs	r2, r3
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	071b      	lsls	r3, r3, #28
 80058ee:	4929      	ldr	r1, [pc, #164]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058f0:	4313      	orrs	r3, r2
 80058f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f003 0308 	and.w	r3, r3, #8
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d028      	beq.n	8005954 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005902:	4b24      	ldr	r3, [pc, #144]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005908:	0e1b      	lsrs	r3, r3, #24
 800590a:	f003 030f 	and.w	r3, r3, #15
 800590e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005910:	4b20      	ldr	r3, [pc, #128]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	0c1b      	lsrs	r3, r3, #16
 8005918:	f003 0303 	and.w	r3, r3, #3
 800591c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	019a      	lsls	r2, r3, #6
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	041b      	lsls	r3, r3, #16
 8005928:	431a      	orrs	r2, r3
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	061b      	lsls	r3, r3, #24
 800592e:	431a      	orrs	r2, r3
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	071b      	lsls	r3, r3, #28
 8005936:	4917      	ldr	r1, [pc, #92]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005938:	4313      	orrs	r3, r2
 800593a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800593e:	4b15      	ldr	r3, [pc, #84]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005944:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800594c:	4911      	ldr	r1, [pc, #68]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800594e:	4313      	orrs	r3, r2
 8005950:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005954:	4b0f      	ldr	r3, [pc, #60]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a0e      	ldr	r2, [pc, #56]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800595a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800595e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005960:	f7fb ff9c 	bl	800189c <HAL_GetTick>
 8005964:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005966:	e008      	b.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005968:	f7fb ff98 	bl	800189c <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	2b64      	cmp	r3, #100	; 0x64
 8005974:	d901      	bls.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005976:	2303      	movs	r3, #3
 8005978:	e007      	b.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800597a:	4b06      	ldr	r3, [pc, #24]	; (8005994 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005982:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005986:	d1ef      	bne.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3720      	adds	r7, #32
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
 8005992:	bf00      	nop
 8005994:	40023800 	.word	0x40023800

08005998 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d101      	bne.n	80059aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80059a6:	2301      	movs	r3, #1
 80059a8:	e040      	b.n	8005a2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d106      	bne.n	80059c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7fb fd60 	bl	8001480 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2224      	movs	r2, #36	; 0x24
 80059c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	681a      	ldr	r2, [r3, #0]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0201 	bic.w	r2, r2, #1
 80059d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fba4 	bl	8006124 <UART_SetConfig>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b01      	cmp	r3, #1
 80059e0:	d101      	bne.n	80059e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	e022      	b.n	8005a2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d002      	beq.n	80059f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 fdfc 	bl	80065ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	689a      	ldr	r2, [r3, #8]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	681a      	ldr	r2, [r3, #0]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	f042 0201 	orr.w	r2, r2, #1
 8005a22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f000 fe83 	bl	8006730 <UART_CheckIdleState>
 8005a2a:	4603      	mov	r3, r0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3708      	adds	r7, #8
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b08a      	sub	sp, #40	; 0x28
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	60b9      	str	r1, [r7, #8]
 8005a3e:	4613      	mov	r3, r2
 8005a40:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d165      	bne.n	8005b16 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d002      	beq.n	8005a56 <HAL_UART_Transmit_DMA+0x22>
 8005a50:	88fb      	ldrh	r3, [r7, #6]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005a56:	2301      	movs	r3, #1
 8005a58:	e05e      	b.n	8005b18 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	68ba      	ldr	r2, [r7, #8]
 8005a5e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	88fa      	ldrh	r2, [r7, #6]
 8005a64:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	2221      	movs	r2, #33	; 0x21
 8005a7c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d027      	beq.n	8005ad6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a8a:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <HAL_UART_Transmit_DMA+0xec>)
 8005a8c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a92:	4a24      	ldr	r2, [pc, #144]	; (8005b24 <HAL_UART_Transmit_DMA+0xf0>)
 8005a94:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a9a:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <HAL_UART_Transmit_DMA+0xf4>)
 8005a9c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005aae:	4619      	mov	r1, r3
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	3328      	adds	r3, #40	; 0x28
 8005ab6:	461a      	mov	r2, r3
 8005ab8:	88fb      	ldrh	r3, [r7, #6]
 8005aba:	f7fc fe1d 	bl	80026f8 <HAL_DMA_Start_IT>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d008      	beq.n	8005ad6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2210      	movs	r2, #16
 8005ac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2220      	movs	r2, #32
 8005ad0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e020      	b.n	8005b18 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2240      	movs	r2, #64	; 0x40
 8005adc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	697b      	ldr	r3, [r7, #20]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	613b      	str	r3, [r7, #16]
   return(result);
 8005aee:	693b      	ldr	r3, [r7, #16]
 8005af0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005afe:	623a      	str	r2, [r7, #32]
 8005b00:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	69f9      	ldr	r1, [r7, #28]
 8005b04:	6a3a      	ldr	r2, [r7, #32]
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e5      	bne.n	8005ade <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005b12:	2300      	movs	r3, #0
 8005b14:	e000      	b.n	8005b18 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
  }
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3728      	adds	r7, #40	; 0x28
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}
 8005b20:	08006a3f 	.word	0x08006a3f
 8005b24:	08006ad5 	.word	0x08006ad5
 8005b28:	08006af1 	.word	0x08006af1

08005b2c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b0ba      	sub	sp, #232	; 0xe8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005b52:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005b56:	f640 030f 	movw	r3, #2063	; 0x80f
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005b60:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d115      	bne.n	8005b94 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005b68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00f      	beq.n	8005b94 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005b74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b78:	f003 0320 	and.w	r3, r3, #32
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d009      	beq.n	8005b94 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	f000 8297 	beq.w	80060b8 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	4798      	blx	r3
      }
      return;
 8005b92:	e291      	b.n	80060b8 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005b94:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	f000 8117 	beq.w	8005dcc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ba2:	f003 0301 	and.w	r3, r3, #1
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d106      	bne.n	8005bb8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005baa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005bae:	4b85      	ldr	r3, [pc, #532]	; (8005dc4 <HAL_UART_IRQHandler+0x298>)
 8005bb0:	4013      	ands	r3, r2
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	f000 810a 	beq.w	8005dcc <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005bb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bbc:	f003 0301 	and.w	r3, r3, #1
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d011      	beq.n	8005be8 <HAL_UART_IRQHandler+0xbc>
 8005bc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d00b      	beq.n	8005be8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bde:	f043 0201 	orr.w	r2, r3, #1
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bec:	f003 0302 	and.w	r3, r3, #2
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d011      	beq.n	8005c18 <HAL_UART_IRQHandler+0xec>
 8005bf4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bf8:	f003 0301 	and.w	r3, r3, #1
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d00b      	beq.n	8005c18 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2202      	movs	r2, #2
 8005c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c0e:	f043 0204 	orr.w	r2, r3, #4
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c1c:	f003 0304 	and.w	r3, r3, #4
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d011      	beq.n	8005c48 <HAL_UART_IRQHandler+0x11c>
 8005c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c28:	f003 0301 	and.w	r3, r3, #1
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d00b      	beq.n	8005c48 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2204      	movs	r2, #4
 8005c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c3e:	f043 0202 	orr.w	r2, r3, #2
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4c:	f003 0308 	and.w	r3, r3, #8
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d017      	beq.n	8005c84 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c58:	f003 0320 	and.w	r3, r3, #32
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d105      	bne.n	8005c6c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005c60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c64:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d00b      	beq.n	8005c84 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	2208      	movs	r2, #8
 8005c72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c7a:	f043 0208 	orr.w	r2, r3, #8
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005c84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d012      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x18a>
 8005c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c94:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d00c      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ca4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cac:	f043 0220 	orr.w	r2, r3, #32
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	f000 81fd 	beq.w	80060bc <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cc6:	f003 0320 	and.w	r3, r3, #32
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00d      	beq.n	8005cea <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005cce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd2:	f003 0320 	and.w	r3, r3, #32
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d003      	beq.n	8005cea <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cf0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	689b      	ldr	r3, [r3, #8]
 8005cfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cfe:	2b40      	cmp	r3, #64	; 0x40
 8005d00:	d005      	beq.n	8005d0e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005d02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d06:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d04f      	beq.n	8005dae <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fe31 	bl	8006976 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	689b      	ldr	r3, [r3, #8]
 8005d1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1e:	2b40      	cmp	r3, #64	; 0x40
 8005d20:	d141      	bne.n	8005da6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	3308      	adds	r3, #8
 8005d28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d30:	e853 3f00 	ldrex	r3, [r3]
 8005d34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d38:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d40:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3308      	adds	r3, #8
 8005d4a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d4e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d56:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d5a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d5e:	e841 2300 	strex	r3, r2, [r1]
 8005d62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d66:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d1d9      	bne.n	8005d22 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d013      	beq.n	8005d9e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d7a:	4a13      	ldr	r2, [pc, #76]	; (8005dc8 <HAL_UART_IRQHandler+0x29c>)
 8005d7c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d82:	4618      	mov	r0, r3
 8005d84:	f7fc fd88 	bl	8002898 <HAL_DMA_Abort_IT>
 8005d88:	4603      	mov	r3, r0
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d017      	beq.n	8005dbe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005d98:	4610      	mov	r0, r2
 8005d9a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d9c:	e00f      	b.n	8005dbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f9aa 	bl	80060f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005da4:	e00b      	b.n	8005dbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 f9a6 	bl	80060f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dac:	e007      	b.n	8005dbe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f9a2 	bl	80060f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005dbc:	e17e      	b.n	80060bc <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dbe:	bf00      	nop
    return;
 8005dc0:	e17c      	b.n	80060bc <HAL_UART_IRQHandler+0x590>
 8005dc2:	bf00      	nop
 8005dc4:	04000120 	.word	0x04000120
 8005dc8:	08006b6f 	.word	0x08006b6f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	f040 814c 	bne.w	800606e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dda:	f003 0310 	and.w	r3, r3, #16
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 8145 	beq.w	800606e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005de4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005de8:	f003 0310 	and.w	r3, r3, #16
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 813e 	beq.w	800606e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2210      	movs	r2, #16
 8005df8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	f040 80b6 	bne.w	8005f76 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e16:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f000 8150 	beq.w	80060c0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005e26:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e2a:	429a      	cmp	r2, r3
 8005e2c:	f080 8148 	bcs.w	80060c0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e44:	f000 8086 	beq.w	8005f54 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e5c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e64:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	461a      	mov	r2, r3
 8005e6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e72:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005e76:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e7a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005e7e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005e82:	e841 2300 	strex	r3, r2, [r1]
 8005e86:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005e8a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d1da      	bne.n	8005e48 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	3308      	adds	r3, #8
 8005e98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9c:	e853 3f00 	ldrex	r3, [r3]
 8005ea0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea4:	f023 0301 	bic.w	r3, r3, #1
 8005ea8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	3308      	adds	r3, #8
 8005eb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005eb6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005eba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ebc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ebe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005ec2:	e841 2300 	strex	r3, r2, [r1]
 8005ec6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d1e1      	bne.n	8005e92 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	3308      	adds	r3, #8
 8005ed4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ed8:	e853 3f00 	ldrex	r3, [r3]
 8005edc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005ede:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005ee0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ef2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ef4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ef8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005efa:	e841 2300 	strex	r3, r2, [r1]
 8005efe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d1e3      	bne.n	8005ece <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2220      	movs	r2, #32
 8005f0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f1c:	e853 3f00 	ldrex	r3, [r3]
 8005f20:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f24:	f023 0310 	bic.w	r3, r3, #16
 8005f28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	461a      	mov	r2, r3
 8005f32:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005f36:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f38:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f3c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f3e:	e841 2300 	strex	r3, r2, [r1]
 8005f42:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d1e4      	bne.n	8005f14 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f7fc fc32 	bl	80027b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2202      	movs	r2, #2
 8005f58:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	b29b      	uxth	r3, r3
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 f8cc 	bl	800610c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f74:	e0a4      	b.n	80060c0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	f000 8096 	beq.w	80060c4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005f98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	f000 8091 	beq.w	80060c4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005faa:	e853 3f00 	ldrex	r3, [r3]
 8005fae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	461a      	mov	r2, r3
 8005fc0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fc4:	647b      	str	r3, [r7, #68]	; 0x44
 8005fc6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fc8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fcc:	e841 2300 	strex	r3, r2, [r1]
 8005fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005fd2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1e4      	bne.n	8005fa2 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	3308      	adds	r3, #8
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fe2:	e853 3f00 	ldrex	r3, [r3]
 8005fe6:	623b      	str	r3, [r7, #32]
   return(result);
 8005fe8:	6a3b      	ldr	r3, [r7, #32]
 8005fea:	f023 0301 	bic.w	r3, r3, #1
 8005fee:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	3308      	adds	r3, #8
 8005ff8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005ffc:	633a      	str	r2, [r7, #48]	; 0x30
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006000:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006002:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006004:	e841 2300 	strex	r3, r2, [r1]
 8006008:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	2b00      	cmp	r3, #0
 800600e:	d1e3      	bne.n	8005fd8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2200      	movs	r2, #0
 8006022:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602a:	693b      	ldr	r3, [r7, #16]
 800602c:	e853 3f00 	ldrex	r3, [r3]
 8006030:	60fb      	str	r3, [r7, #12]
   return(result);
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f023 0310 	bic.w	r3, r3, #16
 8006038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	461a      	mov	r2, r3
 8006042:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800604a:	69b9      	ldr	r1, [r7, #24]
 800604c:	69fa      	ldr	r2, [r7, #28]
 800604e:	e841 2300 	strex	r3, r2, [r1]
 8006052:	617b      	str	r3, [r7, #20]
   return(result);
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d1e4      	bne.n	8006024 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2202      	movs	r2, #2
 800605e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006060:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006064:	4619      	mov	r1, r3
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 f850 	bl	800610c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800606c:	e02a      	b.n	80060c4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800606e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006072:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00e      	beq.n	8006098 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800607a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800607e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006082:	2b00      	cmp	r3, #0
 8006084:	d008      	beq.n	8006098 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800608a:	2b00      	cmp	r3, #0
 800608c:	d01c      	beq.n	80060c8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	4798      	blx	r3
    }
    return;
 8006096:	e017      	b.n	80060c8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800609c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d012      	beq.n	80060ca <HAL_UART_IRQHandler+0x59e>
 80060a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d00c      	beq.n	80060ca <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fd72 	bl	8006b9a <UART_EndTransmit_IT>
    return;
 80060b6:	e008      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
      return;
 80060b8:	bf00      	nop
 80060ba:	e006      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
    return;
 80060bc:	bf00      	nop
 80060be:	e004      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
      return;
 80060c0:	bf00      	nop
 80060c2:	e002      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
      return;
 80060c4:	bf00      	nop
 80060c6:	e000      	b.n	80060ca <HAL_UART_IRQHandler+0x59e>
    return;
 80060c8:	bf00      	nop
  }

}
 80060ca:	37e8      	adds	r7, #232	; 0xe8
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr

080060e4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060e4:	b480      	push	{r7}
 80060e6:	b083      	sub	sp, #12
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80060ec:	bf00      	nop
 80060ee:	370c      	adds	r7, #12
 80060f0:	46bd      	mov	sp, r7
 80060f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f6:	4770      	bx	lr

080060f8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b083      	sub	sp, #12
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006100:	bf00      	nop
 8006102:	370c      	adds	r7, #12
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr

0800610c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800610c:	b480      	push	{r7}
 800610e:	b083      	sub	sp, #12
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
 8006114:	460b      	mov	r3, r1
 8006116:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006118:	bf00      	nop
 800611a:	370c      	adds	r7, #12
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr

08006124 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b088      	sub	sp, #32
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800612c:	2300      	movs	r3, #0
 800612e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	689a      	ldr	r2, [r3, #8]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	691b      	ldr	r3, [r3, #16]
 8006138:	431a      	orrs	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	431a      	orrs	r2, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	69db      	ldr	r3, [r3, #28]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4ba6      	ldr	r3, [pc, #664]	; (80063e8 <UART_SetConfig+0x2c4>)
 8006150:	4013      	ands	r3, r2
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	6812      	ldr	r2, [r2, #0]
 8006156:	6979      	ldr	r1, [r7, #20]
 8006158:	430b      	orrs	r3, r1
 800615a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	68da      	ldr	r2, [r3, #12]
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	430a      	orrs	r2, r1
 8006170:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	699b      	ldr	r3, [r3, #24]
 8006176:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a1b      	ldr	r3, [r3, #32]
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	697a      	ldr	r2, [r7, #20]
 8006192:	430a      	orrs	r2, r1
 8006194:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a94      	ldr	r2, [pc, #592]	; (80063ec <UART_SetConfig+0x2c8>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d120      	bne.n	80061e2 <UART_SetConfig+0xbe>
 80061a0:	4b93      	ldr	r3, [pc, #588]	; (80063f0 <UART_SetConfig+0x2cc>)
 80061a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061a6:	f003 0303 	and.w	r3, r3, #3
 80061aa:	2b03      	cmp	r3, #3
 80061ac:	d816      	bhi.n	80061dc <UART_SetConfig+0xb8>
 80061ae:	a201      	add	r2, pc, #4	; (adr r2, 80061b4 <UART_SetConfig+0x90>)
 80061b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061b4:	080061c5 	.word	0x080061c5
 80061b8:	080061d1 	.word	0x080061d1
 80061bc:	080061cb 	.word	0x080061cb
 80061c0:	080061d7 	.word	0x080061d7
 80061c4:	2301      	movs	r3, #1
 80061c6:	77fb      	strb	r3, [r7, #31]
 80061c8:	e150      	b.n	800646c <UART_SetConfig+0x348>
 80061ca:	2302      	movs	r3, #2
 80061cc:	77fb      	strb	r3, [r7, #31]
 80061ce:	e14d      	b.n	800646c <UART_SetConfig+0x348>
 80061d0:	2304      	movs	r3, #4
 80061d2:	77fb      	strb	r3, [r7, #31]
 80061d4:	e14a      	b.n	800646c <UART_SetConfig+0x348>
 80061d6:	2308      	movs	r3, #8
 80061d8:	77fb      	strb	r3, [r7, #31]
 80061da:	e147      	b.n	800646c <UART_SetConfig+0x348>
 80061dc:	2310      	movs	r3, #16
 80061de:	77fb      	strb	r3, [r7, #31]
 80061e0:	e144      	b.n	800646c <UART_SetConfig+0x348>
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4a83      	ldr	r2, [pc, #524]	; (80063f4 <UART_SetConfig+0x2d0>)
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d132      	bne.n	8006252 <UART_SetConfig+0x12e>
 80061ec:	4b80      	ldr	r3, [pc, #512]	; (80063f0 <UART_SetConfig+0x2cc>)
 80061ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061f2:	f003 030c 	and.w	r3, r3, #12
 80061f6:	2b0c      	cmp	r3, #12
 80061f8:	d828      	bhi.n	800624c <UART_SetConfig+0x128>
 80061fa:	a201      	add	r2, pc, #4	; (adr r2, 8006200 <UART_SetConfig+0xdc>)
 80061fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006200:	08006235 	.word	0x08006235
 8006204:	0800624d 	.word	0x0800624d
 8006208:	0800624d 	.word	0x0800624d
 800620c:	0800624d 	.word	0x0800624d
 8006210:	08006241 	.word	0x08006241
 8006214:	0800624d 	.word	0x0800624d
 8006218:	0800624d 	.word	0x0800624d
 800621c:	0800624d 	.word	0x0800624d
 8006220:	0800623b 	.word	0x0800623b
 8006224:	0800624d 	.word	0x0800624d
 8006228:	0800624d 	.word	0x0800624d
 800622c:	0800624d 	.word	0x0800624d
 8006230:	08006247 	.word	0x08006247
 8006234:	2300      	movs	r3, #0
 8006236:	77fb      	strb	r3, [r7, #31]
 8006238:	e118      	b.n	800646c <UART_SetConfig+0x348>
 800623a:	2302      	movs	r3, #2
 800623c:	77fb      	strb	r3, [r7, #31]
 800623e:	e115      	b.n	800646c <UART_SetConfig+0x348>
 8006240:	2304      	movs	r3, #4
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e112      	b.n	800646c <UART_SetConfig+0x348>
 8006246:	2308      	movs	r3, #8
 8006248:	77fb      	strb	r3, [r7, #31]
 800624a:	e10f      	b.n	800646c <UART_SetConfig+0x348>
 800624c:	2310      	movs	r3, #16
 800624e:	77fb      	strb	r3, [r7, #31]
 8006250:	e10c      	b.n	800646c <UART_SetConfig+0x348>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a68      	ldr	r2, [pc, #416]	; (80063f8 <UART_SetConfig+0x2d4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d120      	bne.n	800629e <UART_SetConfig+0x17a>
 800625c:	4b64      	ldr	r3, [pc, #400]	; (80063f0 <UART_SetConfig+0x2cc>)
 800625e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006262:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006266:	2b30      	cmp	r3, #48	; 0x30
 8006268:	d013      	beq.n	8006292 <UART_SetConfig+0x16e>
 800626a:	2b30      	cmp	r3, #48	; 0x30
 800626c:	d814      	bhi.n	8006298 <UART_SetConfig+0x174>
 800626e:	2b20      	cmp	r3, #32
 8006270:	d009      	beq.n	8006286 <UART_SetConfig+0x162>
 8006272:	2b20      	cmp	r3, #32
 8006274:	d810      	bhi.n	8006298 <UART_SetConfig+0x174>
 8006276:	2b00      	cmp	r3, #0
 8006278:	d002      	beq.n	8006280 <UART_SetConfig+0x15c>
 800627a:	2b10      	cmp	r3, #16
 800627c:	d006      	beq.n	800628c <UART_SetConfig+0x168>
 800627e:	e00b      	b.n	8006298 <UART_SetConfig+0x174>
 8006280:	2300      	movs	r3, #0
 8006282:	77fb      	strb	r3, [r7, #31]
 8006284:	e0f2      	b.n	800646c <UART_SetConfig+0x348>
 8006286:	2302      	movs	r3, #2
 8006288:	77fb      	strb	r3, [r7, #31]
 800628a:	e0ef      	b.n	800646c <UART_SetConfig+0x348>
 800628c:	2304      	movs	r3, #4
 800628e:	77fb      	strb	r3, [r7, #31]
 8006290:	e0ec      	b.n	800646c <UART_SetConfig+0x348>
 8006292:	2308      	movs	r3, #8
 8006294:	77fb      	strb	r3, [r7, #31]
 8006296:	e0e9      	b.n	800646c <UART_SetConfig+0x348>
 8006298:	2310      	movs	r3, #16
 800629a:	77fb      	strb	r3, [r7, #31]
 800629c:	e0e6      	b.n	800646c <UART_SetConfig+0x348>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	4a56      	ldr	r2, [pc, #344]	; (80063fc <UART_SetConfig+0x2d8>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d120      	bne.n	80062ea <UART_SetConfig+0x1c6>
 80062a8:	4b51      	ldr	r3, [pc, #324]	; (80063f0 <UART_SetConfig+0x2cc>)
 80062aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062ae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80062b2:	2bc0      	cmp	r3, #192	; 0xc0
 80062b4:	d013      	beq.n	80062de <UART_SetConfig+0x1ba>
 80062b6:	2bc0      	cmp	r3, #192	; 0xc0
 80062b8:	d814      	bhi.n	80062e4 <UART_SetConfig+0x1c0>
 80062ba:	2b80      	cmp	r3, #128	; 0x80
 80062bc:	d009      	beq.n	80062d2 <UART_SetConfig+0x1ae>
 80062be:	2b80      	cmp	r3, #128	; 0x80
 80062c0:	d810      	bhi.n	80062e4 <UART_SetConfig+0x1c0>
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d002      	beq.n	80062cc <UART_SetConfig+0x1a8>
 80062c6:	2b40      	cmp	r3, #64	; 0x40
 80062c8:	d006      	beq.n	80062d8 <UART_SetConfig+0x1b4>
 80062ca:	e00b      	b.n	80062e4 <UART_SetConfig+0x1c0>
 80062cc:	2300      	movs	r3, #0
 80062ce:	77fb      	strb	r3, [r7, #31]
 80062d0:	e0cc      	b.n	800646c <UART_SetConfig+0x348>
 80062d2:	2302      	movs	r3, #2
 80062d4:	77fb      	strb	r3, [r7, #31]
 80062d6:	e0c9      	b.n	800646c <UART_SetConfig+0x348>
 80062d8:	2304      	movs	r3, #4
 80062da:	77fb      	strb	r3, [r7, #31]
 80062dc:	e0c6      	b.n	800646c <UART_SetConfig+0x348>
 80062de:	2308      	movs	r3, #8
 80062e0:	77fb      	strb	r3, [r7, #31]
 80062e2:	e0c3      	b.n	800646c <UART_SetConfig+0x348>
 80062e4:	2310      	movs	r3, #16
 80062e6:	77fb      	strb	r3, [r7, #31]
 80062e8:	e0c0      	b.n	800646c <UART_SetConfig+0x348>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	4a44      	ldr	r2, [pc, #272]	; (8006400 <UART_SetConfig+0x2dc>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d125      	bne.n	8006340 <UART_SetConfig+0x21c>
 80062f4:	4b3e      	ldr	r3, [pc, #248]	; (80063f0 <UART_SetConfig+0x2cc>)
 80062f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006302:	d017      	beq.n	8006334 <UART_SetConfig+0x210>
 8006304:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006308:	d817      	bhi.n	800633a <UART_SetConfig+0x216>
 800630a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800630e:	d00b      	beq.n	8006328 <UART_SetConfig+0x204>
 8006310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006314:	d811      	bhi.n	800633a <UART_SetConfig+0x216>
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <UART_SetConfig+0x1fe>
 800631a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800631e:	d006      	beq.n	800632e <UART_SetConfig+0x20a>
 8006320:	e00b      	b.n	800633a <UART_SetConfig+0x216>
 8006322:	2300      	movs	r3, #0
 8006324:	77fb      	strb	r3, [r7, #31]
 8006326:	e0a1      	b.n	800646c <UART_SetConfig+0x348>
 8006328:	2302      	movs	r3, #2
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e09e      	b.n	800646c <UART_SetConfig+0x348>
 800632e:	2304      	movs	r3, #4
 8006330:	77fb      	strb	r3, [r7, #31]
 8006332:	e09b      	b.n	800646c <UART_SetConfig+0x348>
 8006334:	2308      	movs	r3, #8
 8006336:	77fb      	strb	r3, [r7, #31]
 8006338:	e098      	b.n	800646c <UART_SetConfig+0x348>
 800633a:	2310      	movs	r3, #16
 800633c:	77fb      	strb	r3, [r7, #31]
 800633e:	e095      	b.n	800646c <UART_SetConfig+0x348>
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4a2f      	ldr	r2, [pc, #188]	; (8006404 <UART_SetConfig+0x2e0>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d125      	bne.n	8006396 <UART_SetConfig+0x272>
 800634a:	4b29      	ldr	r3, [pc, #164]	; (80063f0 <UART_SetConfig+0x2cc>)
 800634c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006350:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006354:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006358:	d017      	beq.n	800638a <UART_SetConfig+0x266>
 800635a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800635e:	d817      	bhi.n	8006390 <UART_SetConfig+0x26c>
 8006360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006364:	d00b      	beq.n	800637e <UART_SetConfig+0x25a>
 8006366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800636a:	d811      	bhi.n	8006390 <UART_SetConfig+0x26c>
 800636c:	2b00      	cmp	r3, #0
 800636e:	d003      	beq.n	8006378 <UART_SetConfig+0x254>
 8006370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006374:	d006      	beq.n	8006384 <UART_SetConfig+0x260>
 8006376:	e00b      	b.n	8006390 <UART_SetConfig+0x26c>
 8006378:	2301      	movs	r3, #1
 800637a:	77fb      	strb	r3, [r7, #31]
 800637c:	e076      	b.n	800646c <UART_SetConfig+0x348>
 800637e:	2302      	movs	r3, #2
 8006380:	77fb      	strb	r3, [r7, #31]
 8006382:	e073      	b.n	800646c <UART_SetConfig+0x348>
 8006384:	2304      	movs	r3, #4
 8006386:	77fb      	strb	r3, [r7, #31]
 8006388:	e070      	b.n	800646c <UART_SetConfig+0x348>
 800638a:	2308      	movs	r3, #8
 800638c:	77fb      	strb	r3, [r7, #31]
 800638e:	e06d      	b.n	800646c <UART_SetConfig+0x348>
 8006390:	2310      	movs	r3, #16
 8006392:	77fb      	strb	r3, [r7, #31]
 8006394:	e06a      	b.n	800646c <UART_SetConfig+0x348>
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	4a1b      	ldr	r2, [pc, #108]	; (8006408 <UART_SetConfig+0x2e4>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d138      	bne.n	8006412 <UART_SetConfig+0x2ee>
 80063a0:	4b13      	ldr	r3, [pc, #76]	; (80063f0 <UART_SetConfig+0x2cc>)
 80063a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063a6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80063aa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063ae:	d017      	beq.n	80063e0 <UART_SetConfig+0x2bc>
 80063b0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80063b4:	d82a      	bhi.n	800640c <UART_SetConfig+0x2e8>
 80063b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ba:	d00b      	beq.n	80063d4 <UART_SetConfig+0x2b0>
 80063bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c0:	d824      	bhi.n	800640c <UART_SetConfig+0x2e8>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d003      	beq.n	80063ce <UART_SetConfig+0x2aa>
 80063c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ca:	d006      	beq.n	80063da <UART_SetConfig+0x2b6>
 80063cc:	e01e      	b.n	800640c <UART_SetConfig+0x2e8>
 80063ce:	2300      	movs	r3, #0
 80063d0:	77fb      	strb	r3, [r7, #31]
 80063d2:	e04b      	b.n	800646c <UART_SetConfig+0x348>
 80063d4:	2302      	movs	r3, #2
 80063d6:	77fb      	strb	r3, [r7, #31]
 80063d8:	e048      	b.n	800646c <UART_SetConfig+0x348>
 80063da:	2304      	movs	r3, #4
 80063dc:	77fb      	strb	r3, [r7, #31]
 80063de:	e045      	b.n	800646c <UART_SetConfig+0x348>
 80063e0:	2308      	movs	r3, #8
 80063e2:	77fb      	strb	r3, [r7, #31]
 80063e4:	e042      	b.n	800646c <UART_SetConfig+0x348>
 80063e6:	bf00      	nop
 80063e8:	efff69f3 	.word	0xefff69f3
 80063ec:	40011000 	.word	0x40011000
 80063f0:	40023800 	.word	0x40023800
 80063f4:	40004400 	.word	0x40004400
 80063f8:	40004800 	.word	0x40004800
 80063fc:	40004c00 	.word	0x40004c00
 8006400:	40005000 	.word	0x40005000
 8006404:	40011400 	.word	0x40011400
 8006408:	40007800 	.word	0x40007800
 800640c:	2310      	movs	r3, #16
 800640e:	77fb      	strb	r3, [r7, #31]
 8006410:	e02c      	b.n	800646c <UART_SetConfig+0x348>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a72      	ldr	r2, [pc, #456]	; (80065e0 <UART_SetConfig+0x4bc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d125      	bne.n	8006468 <UART_SetConfig+0x344>
 800641c:	4b71      	ldr	r3, [pc, #452]	; (80065e4 <UART_SetConfig+0x4c0>)
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006422:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006426:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800642a:	d017      	beq.n	800645c <UART_SetConfig+0x338>
 800642c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006430:	d817      	bhi.n	8006462 <UART_SetConfig+0x33e>
 8006432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006436:	d00b      	beq.n	8006450 <UART_SetConfig+0x32c>
 8006438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800643c:	d811      	bhi.n	8006462 <UART_SetConfig+0x33e>
 800643e:	2b00      	cmp	r3, #0
 8006440:	d003      	beq.n	800644a <UART_SetConfig+0x326>
 8006442:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006446:	d006      	beq.n	8006456 <UART_SetConfig+0x332>
 8006448:	e00b      	b.n	8006462 <UART_SetConfig+0x33e>
 800644a:	2300      	movs	r3, #0
 800644c:	77fb      	strb	r3, [r7, #31]
 800644e:	e00d      	b.n	800646c <UART_SetConfig+0x348>
 8006450:	2302      	movs	r3, #2
 8006452:	77fb      	strb	r3, [r7, #31]
 8006454:	e00a      	b.n	800646c <UART_SetConfig+0x348>
 8006456:	2304      	movs	r3, #4
 8006458:	77fb      	strb	r3, [r7, #31]
 800645a:	e007      	b.n	800646c <UART_SetConfig+0x348>
 800645c:	2308      	movs	r3, #8
 800645e:	77fb      	strb	r3, [r7, #31]
 8006460:	e004      	b.n	800646c <UART_SetConfig+0x348>
 8006462:	2310      	movs	r3, #16
 8006464:	77fb      	strb	r3, [r7, #31]
 8006466:	e001      	b.n	800646c <UART_SetConfig+0x348>
 8006468:	2310      	movs	r3, #16
 800646a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	69db      	ldr	r3, [r3, #28]
 8006470:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006474:	d15b      	bne.n	800652e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006476:	7ffb      	ldrb	r3, [r7, #31]
 8006478:	2b08      	cmp	r3, #8
 800647a:	d828      	bhi.n	80064ce <UART_SetConfig+0x3aa>
 800647c:	a201      	add	r2, pc, #4	; (adr r2, 8006484 <UART_SetConfig+0x360>)
 800647e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006482:	bf00      	nop
 8006484:	080064a9 	.word	0x080064a9
 8006488:	080064b1 	.word	0x080064b1
 800648c:	080064b9 	.word	0x080064b9
 8006490:	080064cf 	.word	0x080064cf
 8006494:	080064bf 	.word	0x080064bf
 8006498:	080064cf 	.word	0x080064cf
 800649c:	080064cf 	.word	0x080064cf
 80064a0:	080064cf 	.word	0x080064cf
 80064a4:	080064c7 	.word	0x080064c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064a8:	f7fe fe5e 	bl	8005168 <HAL_RCC_GetPCLK1Freq>
 80064ac:	61b8      	str	r0, [r7, #24]
        break;
 80064ae:	e013      	b.n	80064d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064b0:	f7fe fe6e 	bl	8005190 <HAL_RCC_GetPCLK2Freq>
 80064b4:	61b8      	str	r0, [r7, #24]
        break;
 80064b6:	e00f      	b.n	80064d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064b8:	4b4b      	ldr	r3, [pc, #300]	; (80065e8 <UART_SetConfig+0x4c4>)
 80064ba:	61bb      	str	r3, [r7, #24]
        break;
 80064bc:	e00c      	b.n	80064d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064be:	f7fe fd41 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 80064c2:	61b8      	str	r0, [r7, #24]
        break;
 80064c4:	e008      	b.n	80064d8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064ca:	61bb      	str	r3, [r7, #24]
        break;
 80064cc:	e004      	b.n	80064d8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80064ce:	2300      	movs	r3, #0
 80064d0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	77bb      	strb	r3, [r7, #30]
        break;
 80064d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064d8:	69bb      	ldr	r3, [r7, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d074      	beq.n	80065c8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80064de:	69bb      	ldr	r3, [r7, #24]
 80064e0:	005a      	lsls	r2, r3, #1
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	685b      	ldr	r3, [r3, #4]
 80064e6:	085b      	lsrs	r3, r3, #1
 80064e8:	441a      	add	r2, r3
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064f4:	693b      	ldr	r3, [r7, #16]
 80064f6:	2b0f      	cmp	r3, #15
 80064f8:	d916      	bls.n	8006528 <UART_SetConfig+0x404>
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006500:	d212      	bcs.n	8006528 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	b29b      	uxth	r3, r3
 8006506:	f023 030f 	bic.w	r3, r3, #15
 800650a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	085b      	lsrs	r3, r3, #1
 8006510:	b29b      	uxth	r3, r3
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	b29a      	uxth	r2, r3
 8006518:	89fb      	ldrh	r3, [r7, #14]
 800651a:	4313      	orrs	r3, r2
 800651c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	89fa      	ldrh	r2, [r7, #14]
 8006524:	60da      	str	r2, [r3, #12]
 8006526:	e04f      	b.n	80065c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	77bb      	strb	r3, [r7, #30]
 800652c:	e04c      	b.n	80065c8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800652e:	7ffb      	ldrb	r3, [r7, #31]
 8006530:	2b08      	cmp	r3, #8
 8006532:	d828      	bhi.n	8006586 <UART_SetConfig+0x462>
 8006534:	a201      	add	r2, pc, #4	; (adr r2, 800653c <UART_SetConfig+0x418>)
 8006536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800653a:	bf00      	nop
 800653c:	08006561 	.word	0x08006561
 8006540:	08006569 	.word	0x08006569
 8006544:	08006571 	.word	0x08006571
 8006548:	08006587 	.word	0x08006587
 800654c:	08006577 	.word	0x08006577
 8006550:	08006587 	.word	0x08006587
 8006554:	08006587 	.word	0x08006587
 8006558:	08006587 	.word	0x08006587
 800655c:	0800657f 	.word	0x0800657f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006560:	f7fe fe02 	bl	8005168 <HAL_RCC_GetPCLK1Freq>
 8006564:	61b8      	str	r0, [r7, #24]
        break;
 8006566:	e013      	b.n	8006590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006568:	f7fe fe12 	bl	8005190 <HAL_RCC_GetPCLK2Freq>
 800656c:	61b8      	str	r0, [r7, #24]
        break;
 800656e:	e00f      	b.n	8006590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006570:	4b1d      	ldr	r3, [pc, #116]	; (80065e8 <UART_SetConfig+0x4c4>)
 8006572:	61bb      	str	r3, [r7, #24]
        break;
 8006574:	e00c      	b.n	8006590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006576:	f7fe fce5 	bl	8004f44 <HAL_RCC_GetSysClockFreq>
 800657a:	61b8      	str	r0, [r7, #24]
        break;
 800657c:	e008      	b.n	8006590 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800657e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006582:	61bb      	str	r3, [r7, #24]
        break;
 8006584:	e004      	b.n	8006590 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006586:	2300      	movs	r3, #0
 8006588:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800658a:	2301      	movs	r3, #1
 800658c:	77bb      	strb	r3, [r7, #30]
        break;
 800658e:	bf00      	nop
    }

    if (pclk != 0U)
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d018      	beq.n	80065c8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	085a      	lsrs	r2, r3, #1
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	441a      	add	r2, r3
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065a8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	2b0f      	cmp	r3, #15
 80065ae:	d909      	bls.n	80065c4 <UART_SetConfig+0x4a0>
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065b6:	d205      	bcs.n	80065c4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	b29a      	uxth	r2, r3
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	60da      	str	r2, [r3, #12]
 80065c2:	e001      	b.n	80065c8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80065c4:	2301      	movs	r3, #1
 80065c6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	2200      	movs	r2, #0
 80065cc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2200      	movs	r2, #0
 80065d2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80065d4:	7fbb      	ldrb	r3, [r7, #30]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3720      	adds	r7, #32
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	40007c00 	.word	0x40007c00
 80065e4:	40023800 	.word	0x40023800
 80065e8:	00f42400 	.word	0x00f42400

080065ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00a      	beq.n	8006616 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661a:	f003 0302 	and.w	r3, r3, #2
 800661e:	2b00      	cmp	r3, #0
 8006620:	d00a      	beq.n	8006638 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d00a      	beq.n	800665a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	430a      	orrs	r2, r1
 8006658:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00a      	beq.n	800667c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	685b      	ldr	r3, [r3, #4]
 800666c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	430a      	orrs	r2, r1
 800667a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006680:	f003 0310 	and.w	r3, r3, #16
 8006684:	2b00      	cmp	r3, #0
 8006686:	d00a      	beq.n	800669e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	430a      	orrs	r2, r1
 800669c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	f003 0320 	and.w	r3, r3, #32
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00a      	beq.n	80066c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	689b      	ldr	r3, [r3, #8]
 80066b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d01a      	beq.n	8006702 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	685b      	ldr	r3, [r3, #4]
 80066d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	430a      	orrs	r2, r1
 80066e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066ea:	d10a      	bne.n	8006702 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800670a:	2b00      	cmp	r3, #0
 800670c:	d00a      	beq.n	8006724 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	430a      	orrs	r2, r1
 8006722:	605a      	str	r2, [r3, #4]
  }
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b086      	sub	sp, #24
 8006734:	af02      	add	r7, sp, #8
 8006736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2200      	movs	r2, #0
 800673c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006740:	f7fb f8ac 	bl	800189c <HAL_GetTick>
 8006744:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	f003 0308 	and.w	r3, r3, #8
 8006750:	2b08      	cmp	r3, #8
 8006752:	d10e      	bne.n	8006772 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006754:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006758:	9300      	str	r3, [sp, #0]
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	2200      	movs	r2, #0
 800675e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 f81b 	bl	800679e <UART_WaitOnFlagUntilTimeout>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800676e:	2303      	movs	r3, #3
 8006770:	e011      	b.n	8006796 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2220      	movs	r2, #32
 8006776:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2220      	movs	r2, #32
 800677c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2200      	movs	r2, #0
 8006784:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006794:	2300      	movs	r3, #0
}
 8006796:	4618      	mov	r0, r3
 8006798:	3710      	adds	r7, #16
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b09c      	sub	sp, #112	; 0x70
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	603b      	str	r3, [r7, #0]
 80067aa:	4613      	mov	r3, r2
 80067ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067ae:	e0a7      	b.n	8006900 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067b0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b6:	f000 80a3 	beq.w	8006900 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067ba:	f7fb f86f 	bl	800189c <HAL_GetTick>
 80067be:	4602      	mov	r2, r0
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	1ad3      	subs	r3, r2, r3
 80067c4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d302      	bcc.n	80067d0 <UART_WaitOnFlagUntilTimeout+0x32>
 80067ca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d13f      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d8:	e853 3f00 	ldrex	r3, [r3]
 80067dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80067de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80067e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067e4:	667b      	str	r3, [r7, #100]	; 0x64
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067f0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067f2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067f4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067f6:	e841 2300 	strex	r3, r2, [r1]
 80067fa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d1e6      	bne.n	80067d0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3308      	adds	r3, #8
 8006808:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800680a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800680c:	e853 3f00 	ldrex	r3, [r3]
 8006810:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006814:	f023 0301 	bic.w	r3, r3, #1
 8006818:	663b      	str	r3, [r7, #96]	; 0x60
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006822:	64ba      	str	r2, [r7, #72]	; 0x48
 8006824:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006826:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006828:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800682a:	e841 2300 	strex	r3, r2, [r1]
 800682e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1e5      	bne.n	8006802 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2220      	movs	r2, #32
 800683a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2220      	movs	r2, #32
 8006840:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	2200      	movs	r2, #0
 8006848:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800684c:	2303      	movs	r3, #3
 800684e:	e068      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f003 0304 	and.w	r3, r3, #4
 800685a:	2b00      	cmp	r3, #0
 800685c:	d050      	beq.n	8006900 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	69db      	ldr	r3, [r3, #28]
 8006864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006868:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800686c:	d148      	bne.n	8006900 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006876:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006880:	e853 3f00 	ldrex	r3, [r3]
 8006884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006888:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800688c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	461a      	mov	r2, r3
 8006894:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006896:	637b      	str	r3, [r7, #52]	; 0x34
 8006898:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800689c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800689e:	e841 2300 	strex	r3, r2, [r1]
 80068a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80068a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d1e6      	bne.n	8006878 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	3308      	adds	r3, #8
 80068b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b2:	697b      	ldr	r3, [r7, #20]
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	613b      	str	r3, [r7, #16]
   return(result);
 80068ba:	693b      	ldr	r3, [r7, #16]
 80068bc:	f023 0301 	bic.w	r3, r3, #1
 80068c0:	66bb      	str	r3, [r7, #104]	; 0x68
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80068ca:	623a      	str	r2, [r7, #32]
 80068cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ce:	69f9      	ldr	r1, [r7, #28]
 80068d0:	6a3a      	ldr	r2, [r7, #32]
 80068d2:	e841 2300 	strex	r3, r2, [r1]
 80068d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80068d8:	69bb      	ldr	r3, [r7, #24]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1e5      	bne.n	80068aa <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2220      	movs	r2, #32
 80068e2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2220      	movs	r2, #32
 80068e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	2220      	movs	r2, #32
 80068f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2200      	movs	r2, #0
 80068f8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	e010      	b.n	8006922 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	69da      	ldr	r2, [r3, #28]
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	4013      	ands	r3, r2
 800690a:	68ba      	ldr	r2, [r7, #8]
 800690c:	429a      	cmp	r2, r3
 800690e:	bf0c      	ite	eq
 8006910:	2301      	moveq	r3, #1
 8006912:	2300      	movne	r3, #0
 8006914:	b2db      	uxtb	r3, r3
 8006916:	461a      	mov	r2, r3
 8006918:	79fb      	ldrb	r3, [r7, #7]
 800691a:	429a      	cmp	r2, r3
 800691c:	f43f af48 	beq.w	80067b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006920:	2300      	movs	r3, #0
}
 8006922:	4618      	mov	r0, r3
 8006924:	3770      	adds	r7, #112	; 0x70
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}

0800692a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800692a:	b480      	push	{r7}
 800692c:	b089      	sub	sp, #36	; 0x24
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006946:	61fb      	str	r3, [r7, #28]
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	461a      	mov	r2, r3
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	61bb      	str	r3, [r7, #24]
 8006952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6979      	ldr	r1, [r7, #20]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	613b      	str	r3, [r7, #16]
   return(result);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e6      	bne.n	8006932 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800696a:	bf00      	nop
 800696c:	3724      	adds	r7, #36	; 0x24
 800696e:	46bd      	mov	sp, r7
 8006970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006974:	4770      	bx	lr

08006976 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006976:	b480      	push	{r7}
 8006978:	b095      	sub	sp, #84	; 0x54
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	e853 3f00 	ldrex	r3, [r3]
 800698a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800698c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800698e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006992:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	461a      	mov	r2, r3
 800699a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800699c:	643b      	str	r3, [r7, #64]	; 0x40
 800699e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069a4:	e841 2300 	strex	r3, r2, [r1]
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1e6      	bne.n	800697e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	3308      	adds	r3, #8
 80069b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069b8:	6a3b      	ldr	r3, [r7, #32]
 80069ba:	e853 3f00 	ldrex	r3, [r3]
 80069be:	61fb      	str	r3, [r7, #28]
   return(result);
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	f023 0301 	bic.w	r3, r3, #1
 80069c6:	64bb      	str	r3, [r7, #72]	; 0x48
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	3308      	adds	r3, #8
 80069ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80069d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80069d8:	e841 2300 	strex	r3, r2, [r1]
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1e5      	bne.n	80069b0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d118      	bne.n	8006a1e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	e853 3f00 	ldrex	r3, [r3]
 80069f8:	60bb      	str	r3, [r7, #8]
   return(result);
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	f023 0310 	bic.w	r3, r3, #16
 8006a00:	647b      	str	r3, [r7, #68]	; 0x44
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	461a      	mov	r2, r3
 8006a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a0a:	61bb      	str	r3, [r7, #24]
 8006a0c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0e:	6979      	ldr	r1, [r7, #20]
 8006a10:	69ba      	ldr	r2, [r7, #24]
 8006a12:	e841 2300 	strex	r3, r2, [r1]
 8006a16:	613b      	str	r3, [r7, #16]
   return(result);
 8006a18:	693b      	ldr	r3, [r7, #16]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d1e6      	bne.n	80069ec <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2220      	movs	r2, #32
 8006a22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006a32:	bf00      	nop
 8006a34:	3754      	adds	r7, #84	; 0x54
 8006a36:	46bd      	mov	sp, r7
 8006a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3c:	4770      	bx	lr

08006a3e <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b090      	sub	sp, #64	; 0x40
 8006a42:	af00      	add	r7, sp, #0
 8006a44:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a4a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	69db      	ldr	r3, [r3, #28]
 8006a50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a54:	d037      	beq.n	8006ac6 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006a56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a58:	2200      	movs	r2, #0
 8006a5a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3308      	adds	r3, #8
 8006a64:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	e853 3f00 	ldrex	r3, [r3]
 8006a6c:	623b      	str	r3, [r7, #32]
   return(result);
 8006a6e:	6a3b      	ldr	r3, [r7, #32]
 8006a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a74:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3308      	adds	r3, #8
 8006a7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a7e:	633a      	str	r2, [r7, #48]	; 0x30
 8006a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a86:	e841 2300 	strex	r3, r2, [r1]
 8006a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d1e5      	bne.n	8006a5e <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	e853 3f00 	ldrex	r3, [r3]
 8006a9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006aa6:	637b      	str	r3, [r7, #52]	; 0x34
 8006aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ab0:	61fb      	str	r3, [r7, #28]
 8006ab2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab4:	69b9      	ldr	r1, [r7, #24]
 8006ab6:	69fa      	ldr	r2, [r7, #28]
 8006ab8:	e841 2300 	strex	r3, r2, [r1]
 8006abc:	617b      	str	r3, [r7, #20]
   return(result);
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1e6      	bne.n	8006a92 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ac4:	e002      	b.n	8006acc <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8006ac6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006ac8:	f7ff fb02 	bl	80060d0 <HAL_UART_TxCpltCallback>
}
 8006acc:	bf00      	nop
 8006ace:	3740      	adds	r7, #64	; 0x40
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bd80      	pop	{r7, pc}

08006ad4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ae2:	68f8      	ldr	r0, [r7, #12]
 8006ae4:	f7ff fafe 	bl	80060e4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006ae8:	bf00      	nop
 8006aea:	3710      	adds	r7, #16
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}

08006af0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b086      	sub	sp, #24
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006afc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b02:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006b0c:	697b      	ldr	r3, [r7, #20]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b16:	2b80      	cmp	r3, #128	; 0x80
 8006b18:	d109      	bne.n	8006b2e <UART_DMAError+0x3e>
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	2b21      	cmp	r3, #33	; 0x21
 8006b1e:	d106      	bne.n	8006b2e <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	2200      	movs	r2, #0
 8006b24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 8006b28:	6978      	ldr	r0, [r7, #20]
 8006b2a:	f7ff fefe 	bl	800692a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b38:	2b40      	cmp	r3, #64	; 0x40
 8006b3a:	d109      	bne.n	8006b50 <UART_DMAError+0x60>
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2b22      	cmp	r3, #34	; 0x22
 8006b40:	d106      	bne.n	8006b50 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8006b4a:	6978      	ldr	r0, [r7, #20]
 8006b4c:	f7ff ff13 	bl	8006976 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006b56:	f043 0210 	orr.w	r2, r3, #16
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b60:	6978      	ldr	r0, [r7, #20]
 8006b62:	f7ff fac9 	bl	80060f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b66:	bf00      	nop
 8006b68:	3718      	adds	r7, #24
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b084      	sub	sp, #16
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f7ff fab3 	bl	80060f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b92:	bf00      	nop
 8006b94:	3710      	adds	r7, #16
 8006b96:	46bd      	mov	sp, r7
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b088      	sub	sp, #32
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	e853 3f00 	ldrex	r3, [r3]
 8006bae:	60bb      	str	r3, [r7, #8]
   return(result);
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006bb6:	61fb      	str	r3, [r7, #28]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	61bb      	str	r3, [r7, #24]
 8006bc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	6979      	ldr	r1, [r7, #20]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	613b      	str	r3, [r7, #16]
   return(result);
 8006bce:	693b      	ldr	r3, [r7, #16]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e6      	bne.n	8006ba2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2220      	movs	r2, #32
 8006bd8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006be0:	6878      	ldr	r0, [r7, #4]
 8006be2:	f7ff fa75 	bl	80060d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006be6:	bf00      	nop
 8006be8:	3720      	adds	r7, #32
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
	...

08006bf0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006bf0:	b084      	sub	sp, #16
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b084      	sub	sp, #16
 8006bf6:	af00      	add	r7, sp, #0
 8006bf8:	6078      	str	r0, [r7, #4]
 8006bfa:	f107 001c 	add.w	r0, r7, #28
 8006bfe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006c02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d120      	bne.n	8006c4a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	68da      	ldr	r2, [r3, #12]
 8006c18:	4b20      	ldr	r3, [pc, #128]	; (8006c9c <USB_CoreInit+0xac>)
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	687a      	ldr	r2, [r7, #4]
 8006c1e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	68db      	ldr	r3, [r3, #12]
 8006c24:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006c2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c2e:	2b01      	cmp	r3, #1
 8006c30:	d105      	bne.n	8006c3e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	68db      	ldr	r3, [r3, #12]
 8006c36:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fa96 	bl	8007170 <USB_CoreReset>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73fb      	strb	r3, [r7, #15]
 8006c48:	e010      	b.n	8006c6c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	68db      	ldr	r3, [r3, #12]
 8006c4e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fa8a 	bl	8007170 <USB_CoreReset>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c64:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8006c6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d10b      	bne.n	8006c8a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f043 0206 	orr.w	r2, r3, #6
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	689b      	ldr	r3, [r3, #8]
 8006c82:	f043 0220 	orr.w	r2, r3, #32
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3710      	adds	r7, #16
 8006c90:	46bd      	mov	sp, r7
 8006c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c96:	b004      	add	sp, #16
 8006c98:	4770      	bx	lr
 8006c9a:	bf00      	nop
 8006c9c:	ffbdffbf 	.word	0xffbdffbf

08006ca0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	f023 0201 	bic.w	r2, r3, #1
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006cb4:	2300      	movs	r3, #0
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	370c      	adds	r7, #12
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr

08006cc2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b084      	sub	sp, #16
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	6078      	str	r0, [r7, #4]
 8006cca:	460b      	mov	r3, r1
 8006ccc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	68db      	ldr	r3, [r3, #12]
 8006cd6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006cde:	78fb      	ldrb	r3, [r7, #3]
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d115      	bne.n	8006d10 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006cf0:	2001      	movs	r0, #1
 8006cf2:	f7fa fddf 	bl	80018b4 <HAL_Delay>
      ms++;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006cfc:	6878      	ldr	r0, [r7, #4]
 8006cfe:	f000 fa29 	bl	8007154 <USB_GetMode>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d01e      	beq.n	8006d46 <USB_SetCurrentMode+0x84>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2b31      	cmp	r3, #49	; 0x31
 8006d0c:	d9f0      	bls.n	8006cf0 <USB_SetCurrentMode+0x2e>
 8006d0e:	e01a      	b.n	8006d46 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006d10:	78fb      	ldrb	r3, [r7, #3]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d115      	bne.n	8006d42 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68db      	ldr	r3, [r3, #12]
 8006d1a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006d22:	2001      	movs	r0, #1
 8006d24:	f7fa fdc6 	bl	80018b4 <HAL_Delay>
      ms++;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	3301      	adds	r3, #1
 8006d2c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f000 fa10 	bl	8007154 <USB_GetMode>
 8006d34:	4603      	mov	r3, r0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d005      	beq.n	8006d46 <USB_SetCurrentMode+0x84>
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	2b31      	cmp	r3, #49	; 0x31
 8006d3e:	d9f0      	bls.n	8006d22 <USB_SetCurrentMode+0x60>
 8006d40:	e001      	b.n	8006d46 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d42:	2301      	movs	r3, #1
 8006d44:	e005      	b.n	8006d52 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2b32      	cmp	r3, #50	; 0x32
 8006d4a:	d101      	bne.n	8006d50 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d50:	2300      	movs	r3, #0
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
	...

08006d5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006d5c:	b084      	sub	sp, #16
 8006d5e:	b580      	push	{r7, lr}
 8006d60:	b086      	sub	sp, #24
 8006d62:	af00      	add	r7, sp, #0
 8006d64:	6078      	str	r0, [r7, #4]
 8006d66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006d6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006d76:	2300      	movs	r3, #0
 8006d78:	613b      	str	r3, [r7, #16]
 8006d7a:	e009      	b.n	8006d90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	3340      	adds	r3, #64	; 0x40
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	4413      	add	r3, r2
 8006d86:	2200      	movs	r2, #0
 8006d88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b0e      	cmp	r3, #14
 8006d94:	d9f2      	bls.n	8006d7c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006d96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d11c      	bne.n	8006dd6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	68fa      	ldr	r2, [r7, #12]
 8006da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006daa:	f043 0302 	orr.w	r3, r3, #2
 8006dae:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006db4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e005      	b.n	8006de2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dda:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006de8:	461a      	mov	r2, r3
 8006dea:	2300      	movs	r3, #0
 8006dec:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006df4:	4619      	mov	r1, r3
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dfc:	461a      	mov	r2, r3
 8006dfe:	680b      	ldr	r3, [r1, #0]
 8006e00:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d10c      	bne.n	8006e22 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006e08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d104      	bne.n	8006e18 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006e0e:	2100      	movs	r1, #0
 8006e10:	6878      	ldr	r0, [r7, #4]
 8006e12:	f000 f965 	bl	80070e0 <USB_SetDevSpeed>
 8006e16:	e008      	b.n	8006e2a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006e18:	2101      	movs	r1, #1
 8006e1a:	6878      	ldr	r0, [r7, #4]
 8006e1c:	f000 f960 	bl	80070e0 <USB_SetDevSpeed>
 8006e20:	e003      	b.n	8006e2a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006e22:	2103      	movs	r1, #3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 f95b 	bl	80070e0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006e2a:	2110      	movs	r1, #16
 8006e2c:	6878      	ldr	r0, [r7, #4]
 8006e2e:	f000 f8f3 	bl	8007018 <USB_FlushTxFifo>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d001      	beq.n	8006e3c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006e3c:	6878      	ldr	r0, [r7, #4]
 8006e3e:	f000 f91f 	bl	8007080 <USB_FlushRxFifo>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d001      	beq.n	8006e4c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006e48:	2301      	movs	r3, #1
 8006e4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	461a      	mov	r2, r3
 8006e54:	2300      	movs	r3, #0
 8006e56:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e5e:	461a      	mov	r2, r3
 8006e60:	2300      	movs	r3, #0
 8006e62:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	2300      	movs	r3, #0
 8006e6e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006e70:	2300      	movs	r3, #0
 8006e72:	613b      	str	r3, [r7, #16]
 8006e74:	e043      	b.n	8006efe <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006e76:	693b      	ldr	r3, [r7, #16]
 8006e78:	015a      	lsls	r2, r3, #5
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	4413      	add	r3, r2
 8006e7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e8c:	d118      	bne.n	8006ec0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d10a      	bne.n	8006eaa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006e94:	693b      	ldr	r3, [r7, #16]
 8006e96:	015a      	lsls	r2, r3, #5
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ea0:	461a      	mov	r2, r3
 8006ea2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006ea6:	6013      	str	r3, [r2, #0]
 8006ea8:	e013      	b.n	8006ed2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	015a      	lsls	r2, r3, #5
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	4413      	add	r3, r2
 8006eb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006eb6:	461a      	mov	r2, r3
 8006eb8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006ebc:	6013      	str	r3, [r2, #0]
 8006ebe:	e008      	b.n	8006ed2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006ec0:	693b      	ldr	r3, [r7, #16]
 8006ec2:	015a      	lsls	r2, r3, #5
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ecc:	461a      	mov	r2, r3
 8006ece:	2300      	movs	r3, #0
 8006ed0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	015a      	lsls	r2, r3, #5
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	4413      	add	r3, r2
 8006eda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ede:	461a      	mov	r2, r3
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006ee4:	693b      	ldr	r3, [r7, #16]
 8006ee6:	015a      	lsls	r2, r3, #5
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	4413      	add	r3, r2
 8006eec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006ef6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	3301      	adds	r3, #1
 8006efc:	613b      	str	r3, [r7, #16]
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	693a      	ldr	r2, [r7, #16]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d3b7      	bcc.n	8006e76 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f06:	2300      	movs	r3, #0
 8006f08:	613b      	str	r3, [r7, #16]
 8006f0a:	e043      	b.n	8006f94 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	015a      	lsls	r2, r3, #5
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	4413      	add	r3, r2
 8006f14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f22:	d118      	bne.n	8006f56 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d10a      	bne.n	8006f40 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	015a      	lsls	r2, r3, #5
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	4413      	add	r3, r2
 8006f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f36:	461a      	mov	r2, r3
 8006f38:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f3c:	6013      	str	r3, [r2, #0]
 8006f3e:	e013      	b.n	8006f68 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006f40:	693b      	ldr	r3, [r7, #16]
 8006f42:	015a      	lsls	r2, r3, #5
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f4c:	461a      	mov	r2, r3
 8006f4e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006f52:	6013      	str	r3, [r2, #0]
 8006f54:	e008      	b.n	8006f68 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f62:	461a      	mov	r2, r3
 8006f64:	2300      	movs	r3, #0
 8006f66:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006f68:	693b      	ldr	r3, [r7, #16]
 8006f6a:	015a      	lsls	r2, r3, #5
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4413      	add	r3, r2
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	461a      	mov	r2, r3
 8006f76:	2300      	movs	r3, #0
 8006f78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006f7a:	693b      	ldr	r3, [r7, #16]
 8006f7c:	015a      	lsls	r2, r3, #5
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	4413      	add	r3, r2
 8006f82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f86:	461a      	mov	r2, r3
 8006f88:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006f8c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	3301      	adds	r3, #1
 8006f92:	613b      	str	r3, [r7, #16]
 8006f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f96:	693a      	ldr	r2, [r7, #16]
 8006f98:	429a      	cmp	r2, r3
 8006f9a:	d3b7      	bcc.n	8006f0c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006faa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fae:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006fbc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d105      	bne.n	8006fd0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	f043 0210 	orr.w	r2, r3, #16
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	699a      	ldr	r2, [r3, #24]
 8006fd4:	4b0e      	ldr	r3, [pc, #56]	; (8007010 <USB_DevInit+0x2b4>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006fdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d005      	beq.n	8006fee <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	f043 0208 	orr.w	r2, r3, #8
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006fee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d105      	bne.n	8007000 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	699a      	ldr	r2, [r3, #24]
 8006ff8:	4b06      	ldr	r3, [pc, #24]	; (8007014 <USB_DevInit+0x2b8>)
 8006ffa:	4313      	orrs	r3, r2
 8006ffc:	687a      	ldr	r2, [r7, #4]
 8006ffe:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007000:	7dfb      	ldrb	r3, [r7, #23]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3718      	adds	r7, #24
 8007006:	46bd      	mov	sp, r7
 8007008:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800700c:	b004      	add	sp, #16
 800700e:	4770      	bx	lr
 8007010:	803c3800 	.word	0x803c3800
 8007014:	40000004 	.word	0x40000004

08007018 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007018:	b480      	push	{r7}
 800701a:	b085      	sub	sp, #20
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
 8007020:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007022:	2300      	movs	r3, #0
 8007024:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4a13      	ldr	r2, [pc, #76]	; (800707c <USB_FlushTxFifo+0x64>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d901      	bls.n	8007038 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e01b      	b.n	8007070 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	2b00      	cmp	r3, #0
 800703e:	daf2      	bge.n	8007026 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007040:	2300      	movs	r3, #0
 8007042:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	019b      	lsls	r3, r3, #6
 8007048:	f043 0220 	orr.w	r2, r3, #32
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	3301      	adds	r3, #1
 8007054:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4a08      	ldr	r2, [pc, #32]	; (800707c <USB_FlushTxFifo+0x64>)
 800705a:	4293      	cmp	r3, r2
 800705c:	d901      	bls.n	8007062 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e006      	b.n	8007070 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	f003 0320 	and.w	r3, r3, #32
 800706a:	2b20      	cmp	r3, #32
 800706c:	d0f0      	beq.n	8007050 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800706e:	2300      	movs	r3, #0
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr
 800707c:	00030d40 	.word	0x00030d40

08007080 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007088:	2300      	movs	r3, #0
 800708a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	3301      	adds	r3, #1
 8007090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	4a11      	ldr	r2, [pc, #68]	; (80070dc <USB_FlushRxFifo+0x5c>)
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e018      	b.n	80070d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	691b      	ldr	r3, [r3, #16]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	daf2      	bge.n	800708c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80070a6:	2300      	movs	r3, #0
 80070a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2210      	movs	r2, #16
 80070ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	3301      	adds	r3, #1
 80070b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4a08      	ldr	r2, [pc, #32]	; (80070dc <USB_FlushRxFifo+0x5c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d901      	bls.n	80070c2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e006      	b.n	80070d0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	f003 0310 	and.w	r3, r3, #16
 80070ca:	2b10      	cmp	r3, #16
 80070cc:	d0f0      	beq.n	80070b0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80070ce:	2300      	movs	r3, #0
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	3714      	adds	r7, #20
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	00030d40 	.word	0x00030d40

080070e0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80070e0:	b480      	push	{r7}
 80070e2:	b085      	sub	sp, #20
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f6:	681a      	ldr	r2, [r3, #0]
 80070f8:	78fb      	ldrb	r3, [r7, #3]
 80070fa:	68f9      	ldr	r1, [r7, #12]
 80070fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007100:	4313      	orrs	r3, r2
 8007102:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007104:	2300      	movs	r3, #0
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr

08007112 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007112:	b480      	push	{r7}
 8007114:	b085      	sub	sp, #20
 8007116:	af00      	add	r7, sp, #0
 8007118:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800712c:	f023 0303 	bic.w	r3, r3, #3
 8007130:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007140:	f043 0302 	orr.w	r3, r3, #2
 8007144:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007146:	2300      	movs	r3, #0
}
 8007148:	4618      	mov	r0, r3
 800714a:	3714      	adds	r7, #20
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	695b      	ldr	r3, [r3, #20]
 8007160:	f003 0301 	and.w	r3, r3, #1
}
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007170:	b480      	push	{r7}
 8007172:	b085      	sub	sp, #20
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007178:	2300      	movs	r3, #0
 800717a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	3301      	adds	r3, #1
 8007180:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	4a13      	ldr	r2, [pc, #76]	; (80071d4 <USB_CoreReset+0x64>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d901      	bls.n	800718e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800718a:	2303      	movs	r3, #3
 800718c:	e01b      	b.n	80071c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	691b      	ldr	r3, [r3, #16]
 8007192:	2b00      	cmp	r3, #0
 8007194:	daf2      	bge.n	800717c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007196:	2300      	movs	r3, #0
 8007198:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	691b      	ldr	r3, [r3, #16]
 800719e:	f043 0201 	orr.w	r2, r3, #1
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	3301      	adds	r3, #1
 80071aa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	4a09      	ldr	r2, [pc, #36]	; (80071d4 <USB_CoreReset+0x64>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d901      	bls.n	80071b8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80071b4:	2303      	movs	r3, #3
 80071b6:	e006      	b.n	80071c6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	f003 0301 	and.w	r3, r3, #1
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d0f0      	beq.n	80071a6 <USB_CoreReset+0x36>

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3714      	adds	r7, #20
 80071ca:	46bd      	mov	sp, r7
 80071cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d0:	4770      	bx	lr
 80071d2:	bf00      	nop
 80071d4:	00030d40 	.word	0x00030d40

080071d8 <arm_rfft_fast_init_f32>:
 80071d8:	084b      	lsrs	r3, r1, #1
 80071da:	2b80      	cmp	r3, #128	; 0x80
 80071dc:	b430      	push	{r4, r5}
 80071de:	8201      	strh	r1, [r0, #16]
 80071e0:	8003      	strh	r3, [r0, #0]
 80071e2:	d06f      	beq.n	80072c4 <arm_rfft_fast_init_f32+0xec>
 80071e4:	d916      	bls.n	8007214 <arm_rfft_fast_init_f32+0x3c>
 80071e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80071ea:	d05e      	beq.n	80072aa <arm_rfft_fast_init_f32+0xd2>
 80071ec:	d935      	bls.n	800725a <arm_rfft_fast_init_f32+0x82>
 80071ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80071f2:	d025      	beq.n	8007240 <arm_rfft_fast_init_f32+0x68>
 80071f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071f8:	d112      	bne.n	8007220 <arm_rfft_fast_init_f32+0x48>
 80071fa:	f44f 656e 	mov.w	r5, #3808	; 0xee0
 80071fe:	4c37      	ldr	r4, [pc, #220]	; (80072dc <arm_rfft_fast_init_f32+0x104>)
 8007200:	4937      	ldr	r1, [pc, #220]	; (80072e0 <arm_rfft_fast_init_f32+0x108>)
 8007202:	2300      	movs	r3, #0
 8007204:	4a37      	ldr	r2, [pc, #220]	; (80072e4 <arm_rfft_fast_init_f32+0x10c>)
 8007206:	8185      	strh	r5, [r0, #12]
 8007208:	6084      	str	r4, [r0, #8]
 800720a:	6041      	str	r1, [r0, #4]
 800720c:	6142      	str	r2, [r0, #20]
 800720e:	b258      	sxtb	r0, r3
 8007210:	bc30      	pop	{r4, r5}
 8007212:	4770      	bx	lr
 8007214:	2b20      	cmp	r3, #32
 8007216:	d030      	beq.n	800727a <arm_rfft_fast_init_f32+0xa2>
 8007218:	2b40      	cmp	r3, #64	; 0x40
 800721a:	d005      	beq.n	8007228 <arm_rfft_fast_init_f32+0x50>
 800721c:	2b10      	cmp	r3, #16
 800721e:	d038      	beq.n	8007292 <arm_rfft_fast_init_f32+0xba>
 8007220:	23ff      	movs	r3, #255	; 0xff
 8007222:	bc30      	pop	{r4, r5}
 8007224:	b258      	sxtb	r0, r3
 8007226:	4770      	bx	lr
 8007228:	2538      	movs	r5, #56	; 0x38
 800722a:	4c2f      	ldr	r4, [pc, #188]	; (80072e8 <arm_rfft_fast_init_f32+0x110>)
 800722c:	492f      	ldr	r1, [pc, #188]	; (80072ec <arm_rfft_fast_init_f32+0x114>)
 800722e:	2300      	movs	r3, #0
 8007230:	4a2f      	ldr	r2, [pc, #188]	; (80072f0 <arm_rfft_fast_init_f32+0x118>)
 8007232:	8185      	strh	r5, [r0, #12]
 8007234:	6084      	str	r4, [r0, #8]
 8007236:	6041      	str	r1, [r0, #4]
 8007238:	6142      	str	r2, [r0, #20]
 800723a:	b258      	sxtb	r0, r3
 800723c:	bc30      	pop	{r4, r5}
 800723e:	4770      	bx	lr
 8007240:	f44f 65e1 	mov.w	r5, #1800	; 0x708
 8007244:	4c2b      	ldr	r4, [pc, #172]	; (80072f4 <arm_rfft_fast_init_f32+0x11c>)
 8007246:	492c      	ldr	r1, [pc, #176]	; (80072f8 <arm_rfft_fast_init_f32+0x120>)
 8007248:	2300      	movs	r3, #0
 800724a:	4a2c      	ldr	r2, [pc, #176]	; (80072fc <arm_rfft_fast_init_f32+0x124>)
 800724c:	8185      	strh	r5, [r0, #12]
 800724e:	6084      	str	r4, [r0, #8]
 8007250:	6041      	str	r1, [r0, #4]
 8007252:	6142      	str	r2, [r0, #20]
 8007254:	b258      	sxtb	r0, r3
 8007256:	bc30      	pop	{r4, r5}
 8007258:	4770      	bx	lr
 800725a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800725e:	d1df      	bne.n	8007220 <arm_rfft_fast_init_f32+0x48>
 8007260:	f44f 75dc 	mov.w	r5, #440	; 0x1b8
 8007264:	4c26      	ldr	r4, [pc, #152]	; (8007300 <arm_rfft_fast_init_f32+0x128>)
 8007266:	4927      	ldr	r1, [pc, #156]	; (8007304 <arm_rfft_fast_init_f32+0x12c>)
 8007268:	2300      	movs	r3, #0
 800726a:	4a27      	ldr	r2, [pc, #156]	; (8007308 <arm_rfft_fast_init_f32+0x130>)
 800726c:	8185      	strh	r5, [r0, #12]
 800726e:	6084      	str	r4, [r0, #8]
 8007270:	6041      	str	r1, [r0, #4]
 8007272:	6142      	str	r2, [r0, #20]
 8007274:	b258      	sxtb	r0, r3
 8007276:	bc30      	pop	{r4, r5}
 8007278:	4770      	bx	lr
 800727a:	2530      	movs	r5, #48	; 0x30
 800727c:	4c23      	ldr	r4, [pc, #140]	; (800730c <arm_rfft_fast_init_f32+0x134>)
 800727e:	4924      	ldr	r1, [pc, #144]	; (8007310 <arm_rfft_fast_init_f32+0x138>)
 8007280:	2300      	movs	r3, #0
 8007282:	4a24      	ldr	r2, [pc, #144]	; (8007314 <arm_rfft_fast_init_f32+0x13c>)
 8007284:	8185      	strh	r5, [r0, #12]
 8007286:	6084      	str	r4, [r0, #8]
 8007288:	6041      	str	r1, [r0, #4]
 800728a:	6142      	str	r2, [r0, #20]
 800728c:	b258      	sxtb	r0, r3
 800728e:	bc30      	pop	{r4, r5}
 8007290:	4770      	bx	lr
 8007292:	2514      	movs	r5, #20
 8007294:	4c20      	ldr	r4, [pc, #128]	; (8007318 <arm_rfft_fast_init_f32+0x140>)
 8007296:	4921      	ldr	r1, [pc, #132]	; (800731c <arm_rfft_fast_init_f32+0x144>)
 8007298:	2300      	movs	r3, #0
 800729a:	4a21      	ldr	r2, [pc, #132]	; (8007320 <arm_rfft_fast_init_f32+0x148>)
 800729c:	8185      	strh	r5, [r0, #12]
 800729e:	6084      	str	r4, [r0, #8]
 80072a0:	6041      	str	r1, [r0, #4]
 80072a2:	6142      	str	r2, [r0, #20]
 80072a4:	b258      	sxtb	r0, r3
 80072a6:	bc30      	pop	{r4, r5}
 80072a8:	4770      	bx	lr
 80072aa:	f44f 75e0 	mov.w	r5, #448	; 0x1c0
 80072ae:	4c1d      	ldr	r4, [pc, #116]	; (8007324 <arm_rfft_fast_init_f32+0x14c>)
 80072b0:	491d      	ldr	r1, [pc, #116]	; (8007328 <arm_rfft_fast_init_f32+0x150>)
 80072b2:	2300      	movs	r3, #0
 80072b4:	4a1d      	ldr	r2, [pc, #116]	; (800732c <arm_rfft_fast_init_f32+0x154>)
 80072b6:	8185      	strh	r5, [r0, #12]
 80072b8:	6084      	str	r4, [r0, #8]
 80072ba:	6041      	str	r1, [r0, #4]
 80072bc:	6142      	str	r2, [r0, #20]
 80072be:	b258      	sxtb	r0, r3
 80072c0:	bc30      	pop	{r4, r5}
 80072c2:	4770      	bx	lr
 80072c4:	25d0      	movs	r5, #208	; 0xd0
 80072c6:	4c1a      	ldr	r4, [pc, #104]	; (8007330 <arm_rfft_fast_init_f32+0x158>)
 80072c8:	491a      	ldr	r1, [pc, #104]	; (8007334 <arm_rfft_fast_init_f32+0x15c>)
 80072ca:	2300      	movs	r3, #0
 80072cc:	4a1a      	ldr	r2, [pc, #104]	; (8007338 <arm_rfft_fast_init_f32+0x160>)
 80072ce:	8185      	strh	r5, [r0, #12]
 80072d0:	6084      	str	r4, [r0, #8]
 80072d2:	6041      	str	r1, [r0, #4]
 80072d4:	6142      	str	r2, [r0, #20]
 80072d6:	b258      	sxtb	r0, r3
 80072d8:	bc30      	pop	{r4, r5}
 80072da:	4770      	bx	lr
 80072dc:	080173a8 	.word	0x080173a8
 80072e0:	080085a0 	.word	0x080085a0
 80072e4:	0800e710 	.word	0x0800e710
 80072e8:	0800c6a0 	.word	0x0800c6a0
 80072ec:	08019168 	.word	0x08019168
 80072f0:	0801b658 	.word	0x0801b658
 80072f4:	08015090 	.word	0x08015090
 80072f8:	08012f90 	.word	0x08012f90
 80072fc:	0800c710 	.word	0x0800c710
 8007300:	0801b2e8 	.word	0x0801b2e8
 8007304:	08012710 	.word	0x08012710
 8007308:	08019368 	.word	0x08019368
 800730c:	08015f48 	.word	0x08015f48
 8007310:	08014f90 	.word	0x08014f90
 8007314:	0800c5a0 	.word	0x0800c5a0
 8007318:	08015ea0 	.word	0x08015ea0
 800731c:	08012f10 	.word	0x08012f10
 8007320:	08015ec8 	.word	0x08015ec8
 8007324:	08019b68 	.word	0x08019b68
 8007328:	080163a8 	.word	0x080163a8
 800732c:	08019ee8 	.word	0x08019ee8
 8007330:	0801b858 	.word	0x0801b858
 8007334:	08015fa8 	.word	0x08015fa8
 8007338:	0801aee8 	.word	0x0801aee8

0800733c <arm_rfft_fast_f32>:
 800733c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007340:	8a05      	ldrh	r5, [r0, #16]
 8007342:	4606      	mov	r6, r0
 8007344:	4690      	mov	r8, r2
 8007346:	460c      	mov	r4, r1
 8007348:	086d      	lsrs	r5, r5, #1
 800734a:	8005      	strh	r5, [r0, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d15e      	bne.n	800740e <arm_rfft_fast_f32+0xd2>
 8007350:	461a      	mov	r2, r3
 8007352:	2301      	movs	r3, #1
 8007354:	f000 fbe0 	bl	8007b18 <arm_cfft_f32>
 8007358:	edd4 7a00 	vldr	s15, [r4]
 800735c:	ed94 7a01 	vldr	s14, [r4, #4]
 8007360:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8007364:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8007368:	8837      	ldrh	r7, [r6, #0]
 800736a:	ee37 7a07 	vadd.f32	s14, s14, s14
 800736e:	6975      	ldr	r5, [r6, #20]
 8007370:	3f01      	subs	r7, #1
 8007372:	eef0 3a46 	vmov.f32	s7, s12
 8007376:	3510      	adds	r5, #16
 8007378:	f108 0610 	add.w	r6, r8, #16
 800737c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8007380:	eb04 00c7 	add.w	r0, r4, r7, lsl #3
 8007384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007388:	f104 0310 	add.w	r3, r4, #16
 800738c:	3808      	subs	r0, #8
 800738e:	ee26 7a86 	vmul.f32	s14, s13, s12
 8007392:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007396:	ed88 7a00 	vstr	s14, [r8]
 800739a:	edc8 7a01 	vstr	s15, [r8, #4]
 800739e:	edd0 6a02 	vldr	s13, [r0, #8]
 80073a2:	3f01      	subs	r7, #1
 80073a4:	ed13 5a02 	vldr	s10, [r3, #-8]
 80073a8:	f1a0 0008 	sub.w	r0, r0, #8
 80073ac:	ed13 7a01 	vldr	s14, [r3, #-4]
 80073b0:	f105 0508 	add.w	r5, r5, #8
 80073b4:	ee76 7ac5 	vsub.f32	s15, s13, s10
 80073b8:	ed15 6a04 	vldr	s12, [r5, #-16]
 80073bc:	edd0 5a05 	vldr	s11, [r0, #20]
 80073c0:	ee36 5a85 	vadd.f32	s10, s13, s10
 80073c4:	ed55 6a03 	vldr	s13, [r5, #-12]
 80073c8:	f103 0308 	add.w	r3, r3, #8
 80073cc:	ee35 4a87 	vadd.f32	s8, s11, s14
 80073d0:	f106 0608 	add.w	r6, r6, #8
 80073d4:	ee66 4a27 	vmul.f32	s9, s12, s15
 80073d8:	ee77 5a65 	vsub.f32	s11, s14, s11
 80073dc:	ee26 7aa7 	vmul.f32	s14, s13, s15
 80073e0:	ee34 5a85 	vadd.f32	s10, s9, s10
 80073e4:	ee26 6a04 	vmul.f32	s12, s12, s8
 80073e8:	ee66 6a84 	vmul.f32	s13, s13, s8
 80073ec:	ee77 7a25 	vadd.f32	s15, s14, s11
 80073f0:	ee76 6a85 	vadd.f32	s13, s13, s10
 80073f4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 80073f8:	ee66 6aa3 	vmul.f32	s13, s13, s7
 80073fc:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007400:	ed46 6a04 	vstr	s13, [r6, #-16]
 8007404:	ed46 7a03 	vstr	s15, [r6, #-12]
 8007408:	d1c9      	bne.n	800739e <arm_rfft_fast_f32+0x62>
 800740a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800740e:	edd1 7a00 	vldr	s15, [r1]
 8007412:	eef6 3a00 	vmov.f32	s7, #96	; 0x3f000000  0.5
 8007416:	edd1 6a01 	vldr	s13, [r1, #4]
 800741a:	1e68      	subs	r0, r5, #1
 800741c:	6975      	ldr	r5, [r6, #20]
 800741e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8007422:	00c1      	lsls	r1, r0, #3
 8007424:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007428:	ee27 7a23 	vmul.f32	s14, s14, s7
 800742c:	ee67 7aa3 	vmul.f32	s15, s15, s7
 8007430:	ed82 7a00 	vstr	s14, [r2]
 8007434:	edc2 7a01 	vstr	s15, [r2, #4]
 8007438:	b3e0      	cbz	r0, 80074b4 <arm_rfft_fast_f32+0x178>
 800743a:	3908      	subs	r1, #8
 800743c:	f104 0210 	add.w	r2, r4, #16
 8007440:	3510      	adds	r5, #16
 8007442:	440c      	add	r4, r1
 8007444:	f108 0110 	add.w	r1, r8, #16
 8007448:	ed94 7a02 	vldr	s14, [r4, #8]
 800744c:	3801      	subs	r0, #1
 800744e:	ed52 6a02 	vldr	s13, [r2, #-8]
 8007452:	f1a4 0408 	sub.w	r4, r4, #8
 8007456:	ed15 6a02 	vldr	s12, [r5, #-8]
 800745a:	f102 0208 	add.w	r2, r2, #8
 800745e:	ee76 7ac7 	vsub.f32	s15, s13, s14
 8007462:	ed94 4a05 	vldr	s8, [r4, #20]
 8007466:	ed12 5a03 	vldr	s10, [r2, #-12]
 800746a:	ee77 6a26 	vadd.f32	s13, s14, s13
 800746e:	ed55 5a01 	vldr	s11, [r5, #-4]
 8007472:	f101 0108 	add.w	r1, r1, #8
 8007476:	ee26 3a27 	vmul.f32	s6, s12, s15
 800747a:	f105 0508 	add.w	r5, r5, #8
 800747e:	ee74 4a05 	vadd.f32	s9, s8, s10
 8007482:	ee25 7aa7 	vmul.f32	s14, s11, s15
 8007486:	ee35 5a44 	vsub.f32	s10, s10, s8
 800748a:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800748e:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007492:	ee77 7a05 	vadd.f32	s15, s14, s10
 8007496:	ee65 5aa4 	vmul.f32	s11, s11, s9
 800749a:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800749e:	ee36 7ae5 	vsub.f32	s14, s13, s11
 80074a2:	ee67 7aa3 	vmul.f32	s15, s15, s7
 80074a6:	ee27 7a23 	vmul.f32	s14, s14, s7
 80074aa:	ed41 7a03 	vstr	s15, [r1, #-12]
 80074ae:	ed01 7a04 	vstr	s14, [r1, #-16]
 80074b2:	d1c9      	bne.n	8007448 <arm_rfft_fast_f32+0x10c>
 80074b4:	4630      	mov	r0, r6
 80074b6:	4641      	mov	r1, r8
 80074b8:	461a      	mov	r2, r3
 80074ba:	2301      	movs	r3, #1
 80074bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074c0:	f000 bb2a 	b.w	8007b18 <arm_cfft_f32>

080074c4 <arm_cfft_radix8by2_f32>:
 80074c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074c8:	ed2d 8b06 	vpush	{d8-d10}
 80074cc:	f8b0 e000 	ldrh.w	lr, [r0]
 80074d0:	4607      	mov	r7, r0
 80074d2:	6842      	ldr	r2, [r0, #4]
 80074d4:	ea4f 0c5e 	mov.w	ip, lr, lsr #1
 80074d8:	eb01 088e 	add.w	r8, r1, lr, lsl #2
 80074dc:	ea5f 0ede 	movs.w	lr, lr, lsr #3
 80074e0:	ea4f 038c 	mov.w	r3, ip, lsl #2
 80074e4:	f000 80af 	beq.w	8007646 <arm_cfft_radix8by2_f32+0x182>
 80074e8:	3310      	adds	r3, #16
 80074ea:	3210      	adds	r2, #16
 80074ec:	f101 0610 	add.w	r6, r1, #16
 80074f0:	f108 0510 	add.w	r5, r8, #16
 80074f4:	18cc      	adds	r4, r1, r3
 80074f6:	4443      	add	r3, r8
 80074f8:	ed55 6a04 	vldr	s13, [r5, #-16]
 80074fc:	f1be 0e01 	subs.w	lr, lr, #1
 8007500:	ed56 4a04 	vldr	s9, [r6, #-16]
 8007504:	f104 0410 	add.w	r4, r4, #16
 8007508:	ed55 7a02 	vldr	s15, [r5, #-8]
 800750c:	f106 0610 	add.w	r6, r6, #16
 8007510:	ee74 9aa6 	vadd.f32	s19, s9, s13
 8007514:	ed53 0a04 	vldr	s1, [r3, #-16]
 8007518:	ed13 5a03 	vldr	s10, [r3, #-12]
 800751c:	ee74 4ae6 	vsub.f32	s9, s9, s13
 8007520:	ed13 3a02 	vldr	s6, [r3, #-8]
 8007524:	f102 0210 	add.w	r2, r2, #16
 8007528:	ed15 7a03 	vldr	s14, [r5, #-12]
 800752c:	f103 0310 	add.w	r3, r3, #16
 8007530:	ed55 2a01 	vldr	s5, [r5, #-4]
 8007534:	f105 0510 	add.w	r5, r5, #16
 8007538:	ed54 3a06 	vldr	s7, [r4, #-24]	; 0xffffffe8
 800753c:	ed14 4a05 	vldr	s8, [r4, #-20]	; 0xffffffec
 8007540:	ed13 6a05 	vldr	s12, [r3, #-20]	; 0xffffffec
 8007544:	ee33 8a83 	vadd.f32	s16, s7, s6
 8007548:	ed56 6a07 	vldr	s13, [r6, #-28]	; 0xffffffe4
 800754c:	ed16 2a05 	vldr	s4, [r6, #-20]	; 0xffffffec
 8007550:	ee34 0a06 	vadd.f32	s0, s8, s12
 8007554:	ed54 5a08 	vldr	s11, [r4, #-32]	; 0xffffffe0
 8007558:	ee76 aa87 	vadd.f32	s21, s13, s14
 800755c:	ed14 1a07 	vldr	s2, [r4, #-28]	; 0xffffffe4
 8007560:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007564:	ed56 1a06 	vldr	s3, [r6, #-24]	; 0xffffffe8
 8007568:	ee35 9aa0 	vadd.f32	s18, s11, s1
 800756c:	ed46 9a08 	vstr	s19, [r6, #-32]	; 0xffffffe0
 8007570:	ee71 8a05 	vadd.f32	s17, s2, s10
 8007574:	ee31 aaa7 	vadd.f32	s20, s3, s15
 8007578:	ed46 aa07 	vstr	s21, [r6, #-28]	; 0xffffffe4
 800757c:	ee72 9a22 	vadd.f32	s19, s4, s5
 8007580:	ee70 5ae5 	vsub.f32	s11, s1, s11
 8007584:	ee35 5a41 	vsub.f32	s10, s10, s2
 8007588:	ed06 aa06 	vstr	s20, [r6, #-24]	; 0xffffffe8
 800758c:	ed46 9a05 	vstr	s19, [r6, #-20]	; 0xffffffec
 8007590:	ee36 6a44 	vsub.f32	s12, s12, s8
 8007594:	ed04 9a08 	vstr	s18, [r4, #-32]	; 0xffffffe0
 8007598:	ee71 1ae7 	vsub.f32	s3, s3, s15
 800759c:	ed44 8a07 	vstr	s17, [r4, #-28]	; 0xffffffe4
 80075a0:	ee72 7a62 	vsub.f32	s15, s4, s5
 80075a4:	ed04 8a06 	vstr	s16, [r4, #-24]	; 0xffffffe8
 80075a8:	ee73 2a63 	vsub.f32	s5, s6, s7
 80075ac:	ed04 0a05 	vstr	s0, [r4, #-20]	; 0xffffffec
 80075b0:	ed12 4a08 	vldr	s8, [r2, #-32]	; 0xffffffe0
 80075b4:	ed52 6a07 	vldr	s13, [r2, #-28]	; 0xffffffe4
 80075b8:	ee24 3a84 	vmul.f32	s6, s9, s8
 80075bc:	ee27 2a26 	vmul.f32	s4, s14, s13
 80075c0:	ee64 4aa6 	vmul.f32	s9, s9, s13
 80075c4:	ee65 3aa6 	vmul.f32	s7, s11, s13
 80075c8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80075cc:	ee65 5a84 	vmul.f32	s11, s11, s8
 80075d0:	ee65 6a26 	vmul.f32	s13, s10, s13
 80075d4:	ee25 5a04 	vmul.f32	s10, s10, s8
 80075d8:	ee37 7a64 	vsub.f32	s14, s14, s9
 80075dc:	ee76 6aa5 	vadd.f32	s13, s13, s11
 80075e0:	ee33 4a02 	vadd.f32	s8, s6, s4
 80075e4:	ee33 5ac5 	vsub.f32	s10, s7, s10
 80075e8:	ed05 7a07 	vstr	s14, [r5, #-28]	; 0xffffffe4
 80075ec:	ed05 4a08 	vstr	s8, [r5, #-32]	; 0xffffffe0
 80075f0:	ed03 5a08 	vstr	s10, [r3, #-32]	; 0xffffffe0
 80075f4:	ed43 6a07 	vstr	s13, [r3, #-28]	; 0xffffffe4
 80075f8:	ed52 6a06 	vldr	s13, [r2, #-24]	; 0xffffffe8
 80075fc:	ed12 7a05 	vldr	s14, [r2, #-20]	; 0xffffffec
 8007600:	ee61 4aa6 	vmul.f32	s9, s3, s13
 8007604:	ee27 4a87 	vmul.f32	s8, s15, s14
 8007608:	ee61 5a87 	vmul.f32	s11, s3, s14
 800760c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007610:	ee22 5a87 	vmul.f32	s10, s5, s14
 8007614:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007618:	ee26 6a26 	vmul.f32	s12, s12, s13
 800761c:	ee62 6aa6 	vmul.f32	s13, s5, s13
 8007620:	ee74 4a84 	vadd.f32	s9, s9, s8
 8007624:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8007628:	ee35 6a46 	vsub.f32	s12, s10, s12
 800762c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007630:	ed45 4a06 	vstr	s9, [r5, #-24]	; 0xffffffe8
 8007634:	ed45 7a05 	vstr	s15, [r5, #-20]	; 0xffffffec
 8007638:	ed03 6a06 	vstr	s12, [r3, #-24]	; 0xffffffe8
 800763c:	ed03 7a05 	vstr	s14, [r3, #-20]	; 0xffffffec
 8007640:	f47f af5a 	bne.w	80074f8 <arm_cfft_radix8by2_f32+0x34>
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	fa1f f48c 	uxth.w	r4, ip
 800764a:	4608      	mov	r0, r1
 800764c:	2302      	movs	r3, #2
 800764e:	4621      	mov	r1, r4
 8007650:	f000 fada 	bl	8007c08 <arm_radix8_butterfly_f32>
 8007654:	4640      	mov	r0, r8
 8007656:	4621      	mov	r1, r4
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	2302      	movs	r3, #2
 800765c:	ecbd 8b06 	vpop	{d8-d10}
 8007660:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007664:	f000 bad0 	b.w	8007c08 <arm_radix8_butterfly_f32>

08007668 <arm_cfft_radix8by4_f32>:
 8007668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800766c:	ed2d 8b06 	vpush	{d8-d10}
 8007670:	8804      	ldrh	r4, [r0, #0]
 8007672:	b08f      	sub	sp, #60	; 0x3c
 8007674:	ed91 6a00 	vldr	s12, [r1]
 8007678:	460a      	mov	r2, r1
 800767a:	0864      	lsrs	r4, r4, #1
 800767c:	ed91 7a01 	vldr	s14, [r1, #4]
 8007680:	9101      	str	r1, [sp, #4]
 8007682:	00a3      	lsls	r3, r4, #2
 8007684:	9104      	str	r1, [sp, #16]
 8007686:	0864      	lsrs	r4, r4, #1
 8007688:	6841      	ldr	r1, [r0, #4]
 800768a:	900c      	str	r0, [sp, #48]	; 0x30
 800768c:	4625      	mov	r5, r4
 800768e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007690:	f101 0408 	add.w	r4, r1, #8
 8007694:	f101 0610 	add.w	r6, r1, #16
 8007698:	9406      	str	r4, [sp, #24]
 800769a:	18d4      	adds	r4, r2, r3
 800769c:	1eaa      	subs	r2, r5, #2
 800769e:	f101 0518 	add.w	r5, r1, #24
 80076a2:	18e0      	adds	r0, r4, r3
 80076a4:	ed94 4a00 	vldr	s8, [r4]
 80076a8:	edd4 3a01 	vldr	s7, [r4, #4]
 80076ac:	46a6      	mov	lr, r4
 80076ae:	edd0 6a00 	vldr	s13, [r0]
 80076b2:	18c7      	adds	r7, r0, r3
 80076b4:	edd0 7a01 	vldr	s15, [r0, #4]
 80076b8:	46a0      	mov	r8, r4
 80076ba:	ee76 5a26 	vadd.f32	s11, s12, s13
 80076be:	edd7 4a00 	vldr	s9, [r7]
 80076c2:	9402      	str	r4, [sp, #8]
 80076c4:	4604      	mov	r4, r0
 80076c6:	9507      	str	r5, [sp, #28]
 80076c8:	4605      	mov	r5, r0
 80076ca:	ee75 2a84 	vadd.f32	s5, s11, s8
 80076ce:	900a      	str	r0, [sp, #40]	; 0x28
 80076d0:	9801      	ldr	r0, [sp, #4]
 80076d2:	ee76 6a66 	vsub.f32	s13, s12, s13
 80076d6:	ee37 6a27 	vadd.f32	s12, s14, s15
 80076da:	ed97 5a01 	vldr	s10, [r7, #4]
 80076de:	ee74 2aa2 	vadd.f32	s5, s9, s5
 80076e2:	46bc      	mov	ip, r7
 80076e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076e8:	9605      	str	r6, [sp, #20]
 80076ea:	ee36 7a63 	vsub.f32	s14, s12, s7
 80076ee:	9703      	str	r7, [sp, #12]
 80076f0:	ee12 9a90 	vmov	r9, s5
 80076f4:	ee33 3aa6 	vadd.f32	s6, s7, s13
 80076f8:	ee75 5ac4 	vsub.f32	s11, s11, s8
 80076fc:	1f3e      	subs	r6, r7, #4
 80076fe:	f840 9b08 	str.w	r9, [r0], #8
 8007702:	ee76 6ae3 	vsub.f32	s13, s13, s7
 8007706:	edde 2a01 	vldr	s5, [lr, #4]
 800770a:	ee77 3ac4 	vsub.f32	s7, s15, s8
 800770e:	ee77 7a84 	vadd.f32	s15, s15, s8
 8007712:	ed9c 4a01 	vldr	s8, [ip, #4]
 8007716:	ee36 6a22 	vadd.f32	s12, s12, s5
 800771a:	9001      	str	r0, [sp, #4]
 800771c:	ee37 7a45 	vsub.f32	s14, s14, s10
 8007720:	9804      	ldr	r0, [sp, #16]
 8007722:	ee75 6a26 	vadd.f32	s13, s10, s13
 8007726:	f1ae 0704 	sub.w	r7, lr, #4
 800772a:	ee36 6a04 	vadd.f32	s12, s12, s8
 800772e:	ee33 4a45 	vsub.f32	s8, s6, s10
 8007732:	ee75 5ae4 	vsub.f32	s11, s11, s9
 8007736:	ee33 5aa4 	vadd.f32	s10, s7, s9
 800773a:	ed80 6a01 	vstr	s12, [r0, #4]
 800773e:	ee14 9a10 	vmov	r9, s8
 8007742:	ee77 7ae4 	vsub.f32	s15, s15, s9
 8007746:	f848 9b08 	str.w	r9, [r8], #8
 800774a:	ed8e 5a01 	vstr	s10, [lr, #4]
 800774e:	ee15 ea90 	vmov	lr, s11
 8007752:	f844 eb08 	str.w	lr, [r4], #8
 8007756:	ee16 ea90 	vmov	lr, s13
 800775a:	9408      	str	r4, [sp, #32]
 800775c:	462c      	mov	r4, r5
 800775e:	ed85 7a01 	vstr	s14, [r5, #4]
 8007762:	9d03      	ldr	r5, [sp, #12]
 8007764:	f84c eb08 	str.w	lr, [ip], #8
 8007768:	edc5 7a01 	vstr	s15, [r5, #4]
 800776c:	0855      	lsrs	r5, r2, #1
 800776e:	9509      	str	r5, [sp, #36]	; 0x24
 8007770:	f000 8130 	beq.w	80079d4 <arm_cfft_radix8by4_f32+0x36c>
 8007774:	9804      	ldr	r0, [sp, #16]
 8007776:	3b08      	subs	r3, #8
 8007778:	46ab      	mov	fp, r5
 800777a:	f1a4 020c 	sub.w	r2, r4, #12
 800777e:	f100 0510 	add.w	r5, r0, #16
 8007782:	f101 0920 	add.w	r9, r1, #32
 8007786:	f101 0e30 	add.w	lr, r1, #48	; 0x30
 800778a:	f8dd a014 	ldr.w	sl, [sp, #20]
 800778e:	4433      	add	r3, r6
 8007790:	3410      	adds	r4, #16
 8007792:	4660      	mov	r0, ip
 8007794:	4641      	mov	r1, r8
 8007796:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800779a:	ed54 6a02 	vldr	s13, [r4, #-8]
 800779e:	f1bb 0b01 	subs.w	fp, fp, #1
 80077a2:	ed55 5a02 	vldr	s11, [r5, #-8]
 80077a6:	f10a 0a08 	add.w	sl, sl, #8
 80077aa:	edd1 7a00 	vldr	s15, [r1]
 80077ae:	f105 0508 	add.w	r5, r5, #8
 80077b2:	ee75 3aa6 	vadd.f32	s7, s11, s13
 80077b6:	edd0 2a00 	vldr	s5, [r0]
 80077ba:	ed14 7a01 	vldr	s14, [r4, #-4]
 80077be:	ee75 5ae6 	vsub.f32	s11, s11, s13
 80077c2:	ed55 6a03 	vldr	s13, [r5, #-12]
 80077c6:	f1a2 0208 	sub.w	r2, r2, #8
 80077ca:	ee73 4aa7 	vadd.f32	s9, s7, s15
 80077ce:	ed90 2a01 	vldr	s4, [r0, #4]
 80077d2:	ee36 5a87 	vadd.f32	s10, s13, s14
 80077d6:	ed91 6a01 	vldr	s12, [r1, #4]
 80077da:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80077de:	f109 0910 	add.w	r9, r9, #16
 80077e2:	ee72 6aa4 	vadd.f32	s13, s5, s9
 80077e6:	f104 0408 	add.w	r4, r4, #8
 80077ea:	ee73 3ae7 	vsub.f32	s7, s7, s15
 80077ee:	f10e 0e18 	add.w	lr, lr, #24
 80077f2:	ee37 3a67 	vsub.f32	s6, s14, s15
 80077f6:	f1a3 0308 	sub.w	r3, r3, #8
 80077fa:	ed45 6a04 	vstr	s13, [r5, #-16]
 80077fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007802:	edd1 6a01 	vldr	s13, [r1, #4]
 8007806:	ee76 1a25 	vadd.f32	s3, s12, s11
 800780a:	edd0 4a01 	vldr	s9, [r0, #4]
 800780e:	ee33 3a22 	vadd.f32	s6, s6, s5
 8007812:	ee75 6a26 	vadd.f32	s13, s10, s13
 8007816:	ee35 5a46 	vsub.f32	s10, s10, s12
 800781a:	ee35 6ac6 	vsub.f32	s12, s11, s12
 800781e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8007822:	ee71 1ac2 	vsub.f32	s3, s3, s4
 8007826:	ee35 5a42 	vsub.f32	s10, s10, s4
 800782a:	ed45 6a03 	vstr	s13, [r5, #-12]
 800782e:	ee32 2a06 	vadd.f32	s4, s4, s12
 8007832:	edd6 7a00 	vldr	s15, [r6]
 8007836:	ee73 3ae2 	vsub.f32	s7, s7, s5
 800783a:	ed97 1a00 	vldr	s2, [r7]
 800783e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8007842:	ed92 8a04 	vldr	s16, [r2, #16]
 8007846:	ee71 8a27 	vadd.f32	s17, s2, s15
 800784a:	ed93 aa04 	vldr	s20, [r3, #16]
 800784e:	ed16 7a01 	vldr	s14, [r6, #-4]
 8007852:	ee71 7a67 	vsub.f32	s15, s2, s15
 8007856:	ed57 0a01 	vldr	s1, [r7, #-4]
 800785a:	ee38 1a4a 	vsub.f32	s2, s16, s20
 800785e:	ee38 6a88 	vadd.f32	s12, s17, s16
 8007862:	edd3 9a03 	vldr	s19, [r3, #12]
 8007866:	ee30 0a87 	vadd.f32	s0, s1, s14
 800786a:	ed92 9a03 	vldr	s18, [r2, #12]
 800786e:	ee78 5ac8 	vsub.f32	s11, s17, s16
 8007872:	ee3a 6a06 	vadd.f32	s12, s20, s12
 8007876:	ee30 7ac7 	vsub.f32	s14, s1, s14
 800787a:	ee37 4ac9 	vsub.f32	s8, s15, s18
 800787e:	ee16 ca10 	vmov	ip, s12
 8007882:	ee30 6a49 	vsub.f32	s12, s0, s18
 8007886:	ee71 4a07 	vadd.f32	s9, s2, s14
 800788a:	f847 c908 	str.w	ip, [r7], #-8
 800788e:	ee34 4a29 	vadd.f32	s8, s8, s19
 8007892:	edd2 8a03 	vldr	s17, [r2, #12]
 8007896:	ee39 9ac9 	vsub.f32	s18, s19, s18
 800789a:	ed93 8a03 	vldr	s16, [r3, #12]
 800789e:	ee71 0a47 	vsub.f32	s1, s2, s14
 80078a2:	ee30 0a28 	vadd.f32	s0, s0, s17
 80078a6:	ee39 1a67 	vsub.f32	s2, s18, s15
 80078aa:	ee36 6a69 	vsub.f32	s12, s12, s19
 80078ae:	ee30 0a08 	vadd.f32	s0, s0, s16
 80078b2:	ee75 5aca 	vsub.f32	s11, s11, s20
 80078b6:	ed87 0a01 	vstr	s0, [r7, #4]
 80078ba:	ed1a 0a04 	vldr	s0, [sl, #-16]
 80078be:	ed5a 6a03 	vldr	s13, [sl, #-12]
 80078c2:	ee21 8a80 	vmul.f32	s16, s3, s0
 80078c6:	ee23 7a26 	vmul.f32	s14, s6, s13
 80078ca:	ee64 7a26 	vmul.f32	s15, s8, s13
 80078ce:	ee61 1aa6 	vmul.f32	s3, s3, s13
 80078d2:	ee24 4a00 	vmul.f32	s8, s8, s0
 80078d6:	ee23 3a00 	vmul.f32	s6, s6, s0
 80078da:	ee64 6aa6 	vmul.f32	s13, s9, s13
 80078de:	ee24 0a80 	vmul.f32	s0, s9, s0
 80078e2:	ee38 7a07 	vadd.f32	s14, s16, s14
 80078e6:	ee76 6a84 	vadd.f32	s13, s13, s8
 80078ea:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80078ee:	ee33 3a61 	vsub.f32	s6, s6, s3
 80078f2:	ee17 ca10 	vmov	ip, s14
 80078f6:	f841 cb08 	str.w	ip, [r1], #8
 80078fa:	ed01 3a01 	vstr	s6, [r1, #-4]
 80078fe:	ed82 0a04 	vstr	s0, [r2, #16]
 8007902:	edc2 6a03 	vstr	s13, [r2, #12]
 8007906:	ed59 6a08 	vldr	s13, [r9, #-32]	; 0xffffffe0
 800790a:	ed59 7a07 	vldr	s15, [r9, #-28]	; 0xffffffe4
 800790e:	ee25 7ae6 	vnmul.f32	s14, s11, s13
 8007912:	ee23 4aa6 	vmul.f32	s8, s7, s13
 8007916:	ee65 4a27 	vmul.f32	s9, s10, s15
 800791a:	ee65 5aa7 	vmul.f32	s11, s11, s15
 800791e:	ee63 3aa7 	vmul.f32	s7, s7, s15
 8007922:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007926:	ee25 5a26 	vmul.f32	s10, s10, s13
 800792a:	ee66 6a26 	vmul.f32	s13, s12, s13
 800792e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007932:	ee34 6a24 	vadd.f32	s12, s8, s9
 8007936:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800793a:	ee35 5a63 	vsub.f32	s10, s10, s7
 800793e:	ee17 ca90 	vmov	ip, s15
 8007942:	ed04 6a04 	vstr	s12, [r4, #-16]
 8007946:	ed04 5a03 	vstr	s10, [r4, #-12]
 800794a:	f846 c908 	str.w	ip, [r6], #-8
 800794e:	edc6 6a01 	vstr	s13, [r6, #4]
 8007952:	ed5e 7a0c 	vldr	s15, [lr, #-48]	; 0xffffffd0
 8007956:	ed1e 7a0b 	vldr	s14, [lr, #-44]	; 0xffffffd4
 800795a:	ee62 5a27 	vmul.f32	s11, s4, s15
 800795e:	ee22 6a87 	vmul.f32	s12, s5, s14
 8007962:	ee22 2a07 	vmul.f32	s4, s4, s14
 8007966:	ee62 2aa7 	vmul.f32	s5, s5, s15
 800796a:	ee61 6a07 	vmul.f32	s13, s2, s14
 800796e:	ee20 7a87 	vmul.f32	s14, s1, s14
 8007972:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8007976:	ee61 7a27 	vmul.f32	s15, s2, s15
 800797a:	ee35 6a86 	vadd.f32	s12, s11, s12
 800797e:	ee72 2ac2 	vsub.f32	s5, s5, s4
 8007982:	ee76 0ae0 	vsub.f32	s1, s13, s1
 8007986:	ee77 7a27 	vadd.f32	s15, s14, s15
 800798a:	ee16 ca10 	vmov	ip, s12
 800798e:	f840 cb08 	str.w	ip, [r0], #8
 8007992:	ed40 2a01 	vstr	s5, [r0, #-4]
 8007996:	edc3 0a04 	vstr	s1, [r3, #16]
 800799a:	edc3 7a03 	vstr	s15, [r3, #12]
 800799e:	f47f aefc 	bne.w	800779a <arm_cfft_radix8by4_f32+0x132>
 80079a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80079a4:	9805      	ldr	r0, [sp, #20]
 80079a6:	00cb      	lsls	r3, r1, #3
 80079a8:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 80079ac:	eb01 0241 	add.w	r2, r1, r1, lsl #1
 80079b0:	eb00 1101 	add.w	r1, r0, r1, lsl #4
 80079b4:	4498      	add	r8, r3
 80079b6:	449c      	add	ip, r3
 80079b8:	9105      	str	r1, [sp, #20]
 80079ba:	9901      	ldr	r1, [sp, #4]
 80079bc:	4419      	add	r1, r3
 80079be:	9101      	str	r1, [sp, #4]
 80079c0:	9906      	ldr	r1, [sp, #24]
 80079c2:	4419      	add	r1, r3
 80079c4:	9106      	str	r1, [sp, #24]
 80079c6:	9908      	ldr	r1, [sp, #32]
 80079c8:	4419      	add	r1, r3
 80079ca:	9b07      	ldr	r3, [sp, #28]
 80079cc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80079d0:	9108      	str	r1, [sp, #32]
 80079d2:	9307      	str	r3, [sp, #28]
 80079d4:	9a01      	ldr	r2, [sp, #4]
 80079d6:	2304      	movs	r3, #4
 80079d8:	9e08      	ldr	r6, [sp, #32]
 80079da:	edd2 6a00 	vldr	s13, [r2]
 80079de:	ed96 4a00 	vldr	s8, [r6]
 80079e2:	edd8 7a00 	vldr	s15, [r8]
 80079e6:	ee36 6a84 	vadd.f32	s12, s13, s8
 80079ea:	eddc 2a00 	vldr	s5, [ip]
 80079ee:	ed96 7a01 	vldr	s14, [r6, #4]
 80079f2:	ee36 4ac4 	vsub.f32	s8, s13, s8
 80079f6:	edd2 6a01 	vldr	s13, [r2, #4]
 80079fa:	ee76 4a27 	vadd.f32	s9, s12, s15
 80079fe:	ed98 2a01 	vldr	s4, [r8, #4]
 8007a02:	ee76 5a87 	vadd.f32	s11, s13, s14
 8007a06:	ed9c 5a01 	vldr	s10, [ip, #4]
 8007a0a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8007a0e:	9d05      	ldr	r5, [sp, #20]
 8007a10:	ee72 6aa4 	vadd.f32	s13, s5, s9
 8007a14:	f8bd 402c 	ldrh.w	r4, [sp, #44]	; 0x2c
 8007a18:	ee72 3a04 	vadd.f32	s7, s4, s8
 8007a1c:	9804      	ldr	r0, [sp, #16]
 8007a1e:	ee77 4a67 	vsub.f32	s9, s14, s15
 8007a22:	4621      	mov	r1, r4
 8007a24:	edc2 6a00 	vstr	s13, [r2]
 8007a28:	ee76 6a67 	vsub.f32	s13, s12, s15
 8007a2c:	ed98 3a01 	vldr	s6, [r8, #4]
 8007a30:	ee35 6ac2 	vsub.f32	s12, s11, s4
 8007a34:	eddc 1a01 	vldr	s3, [ip, #4]
 8007a38:	ee74 4aa2 	vadd.f32	s9, s9, s5
 8007a3c:	ee35 3a83 	vadd.f32	s6, s11, s6
 8007a40:	ee34 4a42 	vsub.f32	s8, s8, s4
 8007a44:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8007a48:	ee73 5a21 	vadd.f32	s11, s6, s3
 8007a4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a50:	ee36 6a45 	vsub.f32	s12, s12, s10
 8007a54:	edc2 5a01 	vstr	s11, [r2, #4]
 8007a58:	ee35 5a04 	vadd.f32	s10, s10, s8
 8007a5c:	9a06      	ldr	r2, [sp, #24]
 8007a5e:	ee76 6ae2 	vsub.f32	s13, s13, s5
 8007a62:	edd2 7a00 	vldr	s15, [r2]
 8007a66:	edd2 5a01 	vldr	s11, [r2, #4]
 8007a6a:	ee23 4aa7 	vmul.f32	s8, s7, s15
 8007a6e:	ee63 3aa5 	vmul.f32	s7, s7, s11
 8007a72:	ee64 5aa5 	vmul.f32	s11, s9, s11
 8007a76:	ee64 4aa7 	vmul.f32	s9, s9, s15
 8007a7a:	ee77 7a62 	vsub.f32	s15, s14, s5
 8007a7e:	ee74 5a25 	vadd.f32	s11, s8, s11
 8007a82:	ee74 4ae3 	vsub.f32	s9, s9, s7
 8007a86:	edc8 5a00 	vstr	s11, [r8]
 8007a8a:	edc8 4a01 	vstr	s9, [r8, #4]
 8007a8e:	edd5 4a01 	vldr	s9, [r5, #4]
 8007a92:	ed95 7a00 	vldr	s14, [r5]
 8007a96:	9d07      	ldr	r5, [sp, #28]
 8007a98:	ee66 5a87 	vmul.f32	s11, s13, s14
 8007a9c:	ee66 6aa4 	vmul.f32	s13, s13, s9
 8007aa0:	ee26 7a07 	vmul.f32	s14, s12, s14
 8007aa4:	ee26 6a24 	vmul.f32	s12, s12, s9
 8007aa8:	ee77 6a66 	vsub.f32	s13, s14, s13
 8007aac:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007ab0:	edc6 6a01 	vstr	s13, [r6, #4]
 8007ab4:	ed86 6a00 	vstr	s12, [r6]
 8007ab8:	ed95 6a01 	vldr	s12, [r5, #4]
 8007abc:	ed95 7a00 	vldr	s14, [r5]
 8007ac0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007ac2:	ee65 6a07 	vmul.f32	s13, s10, s14
 8007ac6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8007aca:	ee25 5a06 	vmul.f32	s10, s10, s12
 8007ace:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007ad2:	ee37 5a45 	vsub.f32	s10, s14, s10
 8007ad6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ada:	ed8c 5a01 	vstr	s10, [ip, #4]
 8007ade:	edcc 7a00 	vstr	s15, [ip]
 8007ae2:	6872      	ldr	r2, [r6, #4]
 8007ae4:	f000 f890 	bl	8007c08 <arm_radix8_butterfly_f32>
 8007ae8:	9802      	ldr	r0, [sp, #8]
 8007aea:	4621      	mov	r1, r4
 8007aec:	6872      	ldr	r2, [r6, #4]
 8007aee:	2304      	movs	r3, #4
 8007af0:	f000 f88a 	bl	8007c08 <arm_radix8_butterfly_f32>
 8007af4:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007af6:	4621      	mov	r1, r4
 8007af8:	6872      	ldr	r2, [r6, #4]
 8007afa:	2304      	movs	r3, #4
 8007afc:	f000 f884 	bl	8007c08 <arm_radix8_butterfly_f32>
 8007b00:	9803      	ldr	r0, [sp, #12]
 8007b02:	4621      	mov	r1, r4
 8007b04:	6872      	ldr	r2, [r6, #4]
 8007b06:	2304      	movs	r3, #4
 8007b08:	b00f      	add	sp, #60	; 0x3c
 8007b0a:	ecbd 8b06 	vpop	{d8-d10}
 8007b0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b12:	f000 b879 	b.w	8007c08 <arm_radix8_butterfly_f32>
 8007b16:	bf00      	nop

08007b18 <arm_cfft_f32>:
 8007b18:	2a01      	cmp	r2, #1
 8007b1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1e:	4606      	mov	r6, r0
 8007b20:	4617      	mov	r7, r2
 8007b22:	460c      	mov	r4, r1
 8007b24:	4698      	mov	r8, r3
 8007b26:	8805      	ldrh	r5, [r0, #0]
 8007b28:	d053      	beq.n	8007bd2 <arm_cfft_f32+0xba>
 8007b2a:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007b2e:	d04b      	beq.n	8007bc8 <arm_cfft_f32+0xb0>
 8007b30:	d916      	bls.n	8007b60 <arm_cfft_f32+0x48>
 8007b32:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8007b36:	d01a      	beq.n	8007b6e <arm_cfft_f32+0x56>
 8007b38:	d95a      	bls.n	8007bf0 <arm_cfft_f32+0xd8>
 8007b3a:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8007b3e:	d043      	beq.n	8007bc8 <arm_cfft_f32+0xb0>
 8007b40:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
 8007b44:	d105      	bne.n	8007b52 <arm_cfft_f32+0x3a>
 8007b46:	4620      	mov	r0, r4
 8007b48:	4629      	mov	r1, r5
 8007b4a:	6872      	ldr	r2, [r6, #4]
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	f000 f85b 	bl	8007c08 <arm_radix8_butterfly_f32>
 8007b52:	f1b8 0f00 	cmp.w	r8, #0
 8007b56:	d111      	bne.n	8007b7c <arm_cfft_f32+0x64>
 8007b58:	2f01      	cmp	r7, #1
 8007b5a:	d016      	beq.n	8007b8a <arm_cfft_f32+0x72>
 8007b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b60:	2d20      	cmp	r5, #32
 8007b62:	d031      	beq.n	8007bc8 <arm_cfft_f32+0xb0>
 8007b64:	d948      	bls.n	8007bf8 <arm_cfft_f32+0xe0>
 8007b66:	2d40      	cmp	r5, #64	; 0x40
 8007b68:	d0ed      	beq.n	8007b46 <arm_cfft_f32+0x2e>
 8007b6a:	2d80      	cmp	r5, #128	; 0x80
 8007b6c:	d1f1      	bne.n	8007b52 <arm_cfft_f32+0x3a>
 8007b6e:	4630      	mov	r0, r6
 8007b70:	4621      	mov	r1, r4
 8007b72:	f7ff fca7 	bl	80074c4 <arm_cfft_radix8by2_f32>
 8007b76:	f1b8 0f00 	cmp.w	r8, #0
 8007b7a:	d0ed      	beq.n	8007b58 <arm_cfft_f32+0x40>
 8007b7c:	4620      	mov	r0, r4
 8007b7e:	89b1      	ldrh	r1, [r6, #12]
 8007b80:	68b2      	ldr	r2, [r6, #8]
 8007b82:	f7f8 fb41 	bl	8000208 <arm_bitreversal_32>
 8007b86:	2f01      	cmp	r7, #1
 8007b88:	d1e8      	bne.n	8007b5c <arm_cfft_f32+0x44>
 8007b8a:	ee07 5a90 	vmov	s15, r5
 8007b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b92:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8007b96:	eec7 6aa6 	vdiv.f32	s13, s15, s13
 8007b9a:	2d00      	cmp	r5, #0
 8007b9c:	d0de      	beq.n	8007b5c <arm_cfft_f32+0x44>
 8007b9e:	f104 0108 	add.w	r1, r4, #8
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	ed11 7a02 	vldr	s14, [r1, #-8]
 8007ba8:	3301      	adds	r3, #1
 8007baa:	ed51 7a01 	vldr	s15, [r1, #-4]
 8007bae:	3108      	adds	r1, #8
 8007bb0:	429d      	cmp	r5, r3
 8007bb2:	ee27 7a26 	vmul.f32	s14, s14, s13
 8007bb6:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8007bba:	ed01 7a04 	vstr	s14, [r1, #-16]
 8007bbe:	ed41 7a03 	vstr	s15, [r1, #-12]
 8007bc2:	d1ef      	bne.n	8007ba4 <arm_cfft_f32+0x8c>
 8007bc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007bc8:	4630      	mov	r0, r6
 8007bca:	4621      	mov	r1, r4
 8007bcc:	f7ff fd4c 	bl	8007668 <arm_cfft_radix8by4_f32>
 8007bd0:	e7bf      	b.n	8007b52 <arm_cfft_f32+0x3a>
 8007bd2:	b1a5      	cbz	r5, 8007bfe <arm_cfft_f32+0xe6>
 8007bd4:	f101 030c 	add.w	r3, r1, #12
 8007bd8:	2200      	movs	r2, #0
 8007bda:	ed53 7a02 	vldr	s15, [r3, #-8]
 8007bde:	3201      	adds	r2, #1
 8007be0:	3308      	adds	r3, #8
 8007be2:	eef1 7a67 	vneg.f32	s15, s15
 8007be6:	4295      	cmp	r5, r2
 8007be8:	ed43 7a04 	vstr	s15, [r3, #-16]
 8007bec:	d1f5      	bne.n	8007bda <arm_cfft_f32+0xc2>
 8007bee:	e79c      	b.n	8007b2a <arm_cfft_f32+0x12>
 8007bf0:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
 8007bf4:	d0a7      	beq.n	8007b46 <arm_cfft_f32+0x2e>
 8007bf6:	e7ac      	b.n	8007b52 <arm_cfft_f32+0x3a>
 8007bf8:	2d10      	cmp	r5, #16
 8007bfa:	d0b8      	beq.n	8007b6e <arm_cfft_f32+0x56>
 8007bfc:	e7a9      	b.n	8007b52 <arm_cfft_f32+0x3a>
 8007bfe:	f5b5 7f80 	cmp.w	r5, #256	; 0x100
 8007c02:	d896      	bhi.n	8007b32 <arm_cfft_f32+0x1a>
 8007c04:	e7ac      	b.n	8007b60 <arm_cfft_f32+0x48>
 8007c06:	bf00      	nop

08007c08 <arm_radix8_butterfly_f32>:
 8007c08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0c:	469e      	mov	lr, r3
 8007c0e:	1d03      	adds	r3, r0, #4
 8007c10:	4683      	mov	fp, r0
 8007c12:	468a      	mov	sl, r1
 8007c14:	4688      	mov	r8, r1
 8007c16:	469c      	mov	ip, r3
 8007c18:	ed2d 8b10 	vpush	{d8-d15}
 8007c1c:	ed9f 9ac4 	vldr	s18, [pc, #784]	; 8007f30 <arm_radix8_butterfly_f32+0x328>
 8007c20:	b09f      	sub	sp, #124	; 0x7c
 8007c22:	921c      	str	r2, [sp, #112]	; 0x70
 8007c24:	931d      	str	r3, [sp, #116]	; 0x74
 8007c26:	ea4f 03d8 	mov.w	r3, r8, lsr #3
 8007c2a:	f04f 0900 	mov.w	r9, #0
 8007c2e:	461a      	mov	r2, r3
 8007c30:	930e      	str	r3, [sp, #56]	; 0x38
 8007c32:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8007c36:	0051      	lsls	r1, r2, #1
 8007c38:	4608      	mov	r0, r1
 8007c3a:	9103      	str	r1, [sp, #12]
 8007c3c:	00d1      	lsls	r1, r2, #3
 8007c3e:	1885      	adds	r5, r0, r2
 8007c40:	0110      	lsls	r0, r2, #4
 8007c42:	eb0b 0601 	add.w	r6, fp, r1
 8007c46:	9101      	str	r1, [sp, #4]
 8007c48:	18ac      	adds	r4, r5, r2
 8007c4a:	9002      	str	r0, [sp, #8]
 8007c4c:	1877      	adds	r7, r6, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	4422      	add	r2, r4
 8007c52:	eb0b 05c5 	add.w	r5, fp, r5, lsl #3
 8007c56:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8007c5a:	1850      	adds	r0, r2, r1
 8007c5c:	eb0b 02c2 	add.w	r2, fp, r2, lsl #3
 8007c60:	4401      	add	r1, r0
 8007c62:	3204      	adds	r2, #4
 8007c64:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
 8007c68:	eb0b 01c1 	add.w	r1, fp, r1, lsl #3
 8007c6c:	3104      	adds	r1, #4
 8007c6e:	ed1c 7a01 	vldr	s14, [ip, #-4]
 8007c72:	44c1      	add	r9, r8
 8007c74:	edd4 6a00 	vldr	s13, [r4]
 8007c78:	ed97 6a00 	vldr	s12, [r7]
 8007c7c:	45ca      	cmp	sl, r9
 8007c7e:	edd0 7a00 	vldr	s15, [r0]
 8007c82:	ee37 5a66 	vsub.f32	s10, s14, s13
 8007c86:	edd6 5a00 	vldr	s11, [r6]
 8007c8a:	ee37 2a26 	vadd.f32	s4, s14, s13
 8007c8e:	ee76 2a67 	vsub.f32	s5, s12, s15
 8007c92:	edd5 6a00 	vldr	s13, [r5]
 8007c96:	ed12 7a01 	vldr	s14, [r2, #-4]
 8007c9a:	ee76 4a27 	vadd.f32	s9, s12, s15
 8007c9e:	ed11 6a01 	vldr	s12, [r1, #-4]
 8007ca2:	ee75 1a87 	vadd.f32	s3, s11, s14
 8007ca6:	ee36 4a86 	vadd.f32	s8, s13, s12
 8007caa:	ee72 7a24 	vadd.f32	s15, s4, s9
 8007cae:	ee35 7ac7 	vsub.f32	s14, s11, s14
 8007cb2:	ee76 5ac6 	vsub.f32	s11, s13, s12
 8007cb6:	ee31 6a84 	vadd.f32	s12, s3, s8
 8007cba:	ee32 2a64 	vsub.f32	s4, s4, s9
 8007cbe:	ee77 6a65 	vsub.f32	s13, s14, s11
 8007cc2:	ee77 4a86 	vadd.f32	s9, s15, s12
 8007cc6:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8007cca:	ee37 7a25 	vadd.f32	s14, s14, s11
 8007cce:	ed4c 4a01 	vstr	s9, [ip, #-4]
 8007cd2:	ee71 1ac4 	vsub.f32	s3, s3, s8
 8007cd6:	edc4 7a00 	vstr	s15, [r4]
 8007cda:	ee66 6a89 	vmul.f32	s13, s13, s18
 8007cde:	edd6 5a01 	vldr	s11, [r6, #4]
 8007ce2:	ee27 6a09 	vmul.f32	s12, s14, s18
 8007ce6:	edd5 3a01 	vldr	s7, [r5, #4]
 8007cea:	ed92 4a00 	vldr	s8, [r2]
 8007cee:	ee35 1a26 	vadd.f32	s2, s10, s13
 8007cf2:	edd1 4a00 	vldr	s9, [r1]
 8007cf6:	ee75 6a66 	vsub.f32	s13, s10, s13
 8007cfa:	ee35 3ac4 	vsub.f32	s6, s11, s8
 8007cfe:	ed94 0a01 	vldr	s0, [r4, #4]
 8007d02:	ee73 7ae4 	vsub.f32	s15, s7, s9
 8007d06:	ed9c 7a00 	vldr	s14, [ip]
 8007d0a:	edd0 0a01 	vldr	s1, [r0, #4]
 8007d0e:	ee35 4a84 	vadd.f32	s8, s11, s8
 8007d12:	ed97 5a01 	vldr	s10, [r7, #4]
 8007d16:	ee73 4aa4 	vadd.f32	s9, s7, s9
 8007d1a:	ee73 5a27 	vadd.f32	s11, s6, s15
 8007d1e:	ee77 3a00 	vadd.f32	s7, s14, s0
 8007d22:	ee33 3a67 	vsub.f32	s6, s6, s15
 8007d26:	ee37 7a40 	vsub.f32	s14, s14, s0
 8007d2a:	ee35 0a20 	vadd.f32	s0, s10, s1
 8007d2e:	ee63 7a09 	vmul.f32	s15, s6, s18
 8007d32:	ee35 5a60 	vsub.f32	s10, s10, s1
 8007d36:	ee33 3a80 	vadd.f32	s6, s7, s0
 8007d3a:	ee74 0a24 	vadd.f32	s1, s8, s9
 8007d3e:	ee65 5a89 	vmul.f32	s11, s11, s18
 8007d42:	ee74 4a64 	vsub.f32	s9, s8, s9
 8007d46:	ee33 4ac0 	vsub.f32	s8, s7, s0
 8007d4a:	ee75 3a25 	vadd.f32	s7, s10, s11
 8007d4e:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007d52:	ee37 5a27 	vadd.f32	s10, s14, s15
 8007d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007d5a:	ee32 7a86 	vadd.f32	s14, s5, s12
 8007d5e:	ee32 6ac6 	vsub.f32	s12, s5, s12
 8007d62:	ee73 2a20 	vadd.f32	s5, s6, s1
 8007d66:	ee33 3a60 	vsub.f32	s6, s6, s1
 8007d6a:	ee72 0a24 	vadd.f32	s1, s4, s9
 8007d6e:	edcc 2a00 	vstr	s5, [ip]
 8007d72:	ee72 4a64 	vsub.f32	s9, s4, s9
 8007d76:	ed84 3a01 	vstr	s6, [r4, #4]
 8007d7a:	ee74 2a61 	vsub.f32	s5, s8, s3
 8007d7e:	ee31 3a23 	vadd.f32	s6, s2, s7
 8007d82:	edc7 0a00 	vstr	s1, [r7]
 8007d86:	ee31 1a63 	vsub.f32	s2, s2, s7
 8007d8a:	edc0 4a00 	vstr	s9, [r0]
 8007d8e:	ee76 3aa5 	vadd.f32	s7, s13, s11
 8007d92:	edc7 2a01 	vstr	s5, [r7, #4]
 8007d96:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8007d9a:	441c      	add	r4, r3
 8007d9c:	ee75 5a47 	vsub.f32	s11, s10, s14
 8007da0:	449c      	add	ip, r3
 8007da2:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007da6:	441f      	add	r7, r3
 8007da8:	ee37 7ac6 	vsub.f32	s14, s15, s12
 8007dac:	ee34 4a21 	vadd.f32	s8, s8, s3
 8007db0:	ee77 7a86 	vadd.f32	s15, s15, s12
 8007db4:	ed80 4a01 	vstr	s8, [r0, #4]
 8007db8:	4418      	add	r0, r3
 8007dba:	ed86 3a00 	vstr	s6, [r6]
 8007dbe:	ed01 1a01 	vstr	s2, [r1, #-4]
 8007dc2:	ed42 3a01 	vstr	s7, [r2, #-4]
 8007dc6:	edc5 6a00 	vstr	s13, [r5]
 8007dca:	edc6 5a01 	vstr	s11, [r6, #4]
 8007dce:	441e      	add	r6, r3
 8007dd0:	ed81 5a00 	vstr	s10, [r1]
 8007dd4:	4419      	add	r1, r3
 8007dd6:	ed82 7a00 	vstr	s14, [r2]
 8007dda:	441a      	add	r2, r3
 8007ddc:	edc5 7a01 	vstr	s15, [r5, #4]
 8007de0:	441d      	add	r5, r3
 8007de2:	f63f af44 	bhi.w	8007c6e <arm_radix8_butterfly_f32+0x66>
 8007de6:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007de8:	2f07      	cmp	r7, #7
 8007dea:	f240 81e8 	bls.w	80081be <arm_radix8_butterfly_f32+0x5b6>
 8007dee:	9903      	ldr	r1, [sp, #12]
 8007df0:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
 8007df4:	9e01      	ldr	r6, [sp, #4]
 8007df6:	eb07 0087 	add.w	r0, r7, r7, lsl #2
 8007dfa:	19ca      	adds	r2, r1, r7
 8007dfc:	1c4c      	adds	r4, r1, #1
 8007dfe:	eb05 010e 	add.w	r1, r5, lr
 8007e02:	00ed      	lsls	r5, r5, #3
 8007e04:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 8007e08:	3608      	adds	r6, #8
 8007e0a:	950f      	str	r5, [sp, #60]	; 0x3c
 8007e0c:	eb01 050e 	add.w	r5, r1, lr
 8007e10:	00c9      	lsls	r1, r1, #3
 8007e12:	443c      	add	r4, r7
 8007e14:	9618      	str	r6, [sp, #96]	; 0x60
 8007e16:	00ee      	lsls	r6, r5, #3
 8007e18:	460f      	mov	r7, r1
 8007e1a:	9114      	str	r1, [sp, #80]	; 0x50
 8007e1c:	9902      	ldr	r1, [sp, #8]
 8007e1e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8007e22:	9611      	str	r6, [sp, #68]	; 0x44
 8007e24:	00c0      	lsls	r0, r0, #3
 8007e26:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8007e28:	3108      	adds	r1, #8
 8007e2a:	3404      	adds	r4, #4
 8007e2c:	f04f 0901 	mov.w	r9, #1
 8007e30:	9119      	str	r1, [sp, #100]	; 0x64
 8007e32:	eb05 010e 	add.w	r1, r5, lr
 8007e36:	4635      	mov	r5, r6
 8007e38:	940b      	str	r4, [sp, #44]	; 0x2c
 8007e3a:	9301      	str	r3, [sp, #4]
 8007e3c:	443d      	add	r5, r7
 8007e3e:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8007e40:	9507      	str	r5, [sp, #28]
 8007e42:	eb01 050e 	add.w	r5, r1, lr
 8007e46:	00c9      	lsls	r1, r1, #3
 8007e48:	19f7      	adds	r7, r6, r7
 8007e4a:	00ed      	lsls	r5, r5, #3
 8007e4c:	9110      	str	r1, [sp, #64]	; 0x40
 8007e4e:	00d1      	lsls	r1, r2, #3
 8007e50:	970a      	str	r7, [sp, #40]	; 0x28
 8007e52:	462f      	mov	r7, r5
 8007e54:	9515      	str	r5, [sp, #84]	; 0x54
 8007e56:	0112      	lsls	r2, r2, #4
 8007e58:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8007e5a:	19f4      	adds	r4, r6, r7
 8007e5c:	320c      	adds	r2, #12
 8007e5e:	3108      	adds	r1, #8
 8007e60:	1975      	adds	r5, r6, r5
 8007e62:	9408      	str	r4, [sp, #32]
 8007e64:	9217      	str	r2, [sp, #92]	; 0x5c
 8007e66:	ea4f 04ce 	mov.w	r4, lr, lsl #3
 8007e6a:	9509      	str	r5, [sp, #36]	; 0x24
 8007e6c:	f100 020c 	add.w	r2, r0, #12
 8007e70:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007e72:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8007e74:	1975      	adds	r5, r6, r5
 8007e76:	9216      	str	r2, [sp, #88]	; 0x58
 8007e78:	1932      	adds	r2, r6, r4
 8007e7a:	911b      	str	r1, [sp, #108]	; 0x6c
 8007e7c:	9505      	str	r5, [sp, #20]
 8007e7e:	ea4f 150e 	mov.w	r5, lr, lsl #4
 8007e82:	0179      	lsls	r1, r7, #5
 8007e84:	9204      	str	r2, [sp, #16]
 8007e86:	1972      	adds	r2, r6, r5
 8007e88:	9412      	str	r4, [sp, #72]	; 0x48
 8007e8a:	9513      	str	r5, [sp, #76]	; 0x4c
 8007e8c:	9206      	str	r2, [sp, #24]
 8007e8e:	f101 0208 	add.w	r2, r1, #8
 8007e92:	921a      	str	r2, [sp, #104]	; 0x68
 8007e94:	2200      	movs	r2, #0
 8007e96:	f102 0108 	add.w	r1, r2, #8
 8007e9a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007e9c:	46cc      	mov	ip, r9
 8007e9e:	460f      	mov	r7, r1
 8007ea0:	910c      	str	r1, [sp, #48]	; 0x30
 8007ea2:	991a      	ldr	r1, [sp, #104]	; 0x68
 8007ea4:	eb0b 0e07 	add.w	lr, fp, r7
 8007ea8:	9f04      	ldr	r7, [sp, #16]
 8007eaa:	188e      	adds	r6, r1, r2
 8007eac:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007eae:	edd7 fa00 	vldr	s31, [r7]
 8007eb2:	9f06      	ldr	r7, [sp, #24]
 8007eb4:	188d      	adds	r5, r1, r2
 8007eb6:	9919      	ldr	r1, [sp, #100]	; 0x64
 8007eb8:	445e      	add	r6, fp
 8007eba:	ed97 fa00 	vldr	s30, [r7]
 8007ebe:	445d      	add	r5, fp
 8007ec0:	9f05      	ldr	r7, [sp, #20]
 8007ec2:	188c      	adds	r4, r1, r2
 8007ec4:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8007ec6:	edd7 ea00 	vldr	s29, [r7]
 8007eca:	445c      	add	r4, fp
 8007ecc:	9f07      	ldr	r7, [sp, #28]
 8007ece:	1888      	adds	r0, r1, r2
 8007ed0:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007ed2:	ed97 ea00 	vldr	s28, [r7]
 8007ed6:	4458      	add	r0, fp
 8007ed8:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007eda:	4411      	add	r1, r2
 8007edc:	441a      	add	r2, r3
 8007ede:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ee0:	edd7 da00 	vldr	s27, [r7]
 8007ee4:	4459      	add	r1, fp
 8007ee6:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ee8:	445a      	add	r2, fp
 8007eea:	930d      	str	r3, [sp, #52]	; 0x34
 8007eec:	ed97 da00 	vldr	s26, [r7]
 8007ef0:	9f08      	ldr	r7, [sp, #32]
 8007ef2:	edd7 ca00 	vldr	s25, [r7]
 8007ef6:	9f04      	ldr	r7, [sp, #16]
 8007ef8:	ed97 ca01 	vldr	s24, [r7, #4]
 8007efc:	9f06      	ldr	r7, [sp, #24]
 8007efe:	edd7 ba01 	vldr	s23, [r7, #4]
 8007f02:	9f05      	ldr	r7, [sp, #20]
 8007f04:	ed97 ba01 	vldr	s22, [r7, #4]
 8007f08:	9f07      	ldr	r7, [sp, #28]
 8007f0a:	edd7 aa01 	vldr	s21, [r7, #4]
 8007f0e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8007f10:	ed97 aa01 	vldr	s20, [r7, #4]
 8007f14:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007f16:	9b01      	ldr	r3, [sp, #4]
 8007f18:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f1c:	9f08      	ldr	r7, [sp, #32]
 8007f1e:	edcd 7a02 	vstr	s15, [sp, #8]
 8007f22:	edd7 7a01 	vldr	s15, [r7, #4]
 8007f26:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8007f28:	edcd 7a03 	vstr	s15, [sp, #12]
 8007f2c:	e002      	b.n	8007f34 <arm_radix8_butterfly_f32+0x32c>
 8007f2e:	bf00      	nop
 8007f30:	3f3504f3 	.word	0x3f3504f3
 8007f34:	ed90 2a00 	vldr	s4, [r0]
 8007f38:	44c4      	add	ip, r8
 8007f3a:	ed96 7a00 	vldr	s14, [r6]
 8007f3e:	ed94 8a00 	vldr	s16, [r4]
 8007f42:	45e2      	cmp	sl, ip
 8007f44:	ed52 7a01 	vldr	s15, [r2, #-4]
 8007f48:	ed95 5a00 	vldr	s10, [r5]
 8007f4c:	ed51 5a01 	vldr	s11, [r1, #-4]
 8007f50:	ee38 6a27 	vadd.f32	s12, s16, s15
 8007f54:	ed9e 1a00 	vldr	s2, [lr]
 8007f58:	ee78 2a67 	vsub.f32	s5, s16, s15
 8007f5c:	ed17 4a01 	vldr	s8, [r7, #-4]
 8007f60:	ee75 3a25 	vadd.f32	s7, s10, s11
 8007f64:	ee31 3a07 	vadd.f32	s6, s2, s14
 8007f68:	edde 4a01 	vldr	s9, [lr, #4]
 8007f6c:	ee72 6a04 	vadd.f32	s13, s4, s8
 8007f70:	ee75 5a65 	vsub.f32	s11, s10, s11
 8007f74:	ee73 1a06 	vadd.f32	s3, s6, s12
 8007f78:	ee33 5aa6 	vadd.f32	s10, s7, s13
 8007f7c:	ee32 4a44 	vsub.f32	s8, s4, s8
 8007f80:	ee31 1a47 	vsub.f32	s2, s2, s14
 8007f84:	ee31 7a85 	vadd.f32	s14, s3, s10
 8007f88:	ee75 7a84 	vadd.f32	s15, s11, s8
 8007f8c:	ee33 3a46 	vsub.f32	s6, s6, s12
 8007f90:	ed8e 7a00 	vstr	s14, [lr]
 8007f94:	ee73 3ae6 	vsub.f32	s7, s7, s13
 8007f98:	ee67 7a89 	vmul.f32	s15, s15, s18
 8007f9c:	ed90 2a01 	vldr	s4, [r0, #4]
 8007fa0:	ed95 7a01 	vldr	s14, [r5, #4]
 8007fa4:	ee35 4ac4 	vsub.f32	s8, s11, s8
 8007fa8:	ed91 6a00 	vldr	s12, [r1]
 8007fac:	ee31 5ac5 	vsub.f32	s10, s3, s10
 8007fb0:	edd7 8a00 	vldr	s17, [r7]
 8007fb4:	ee32 8ae7 	vsub.f32	s16, s5, s15
 8007fb8:	ee72 5aa7 	vadd.f32	s11, s5, s15
 8007fbc:	edd2 0a00 	vldr	s1, [r2]
 8007fc0:	ee72 6a68 	vsub.f32	s13, s4, s17
 8007fc4:	edd6 7a01 	vldr	s15, [r6, #4]
 8007fc8:	ee77 2a46 	vsub.f32	s5, s14, s12
 8007fcc:	ee37 0a06 	vadd.f32	s0, s14, s12
 8007fd0:	ed94 7a01 	vldr	s14, [r4, #4]
 8007fd4:	ee32 6a28 	vadd.f32	s12, s4, s17
 8007fd8:	ee72 9ae6 	vsub.f32	s19, s5, s13
 8007fdc:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8007fe0:	ee72 2aa6 	vadd.f32	s5, s5, s13
 8007fe4:	ee77 6a20 	vadd.f32	s13, s14, s1
 8007fe8:	ee74 4ae7 	vsub.f32	s9, s9, s15
 8007fec:	ee37 7a60 	vsub.f32	s14, s14, s1
 8007ff0:	ee24 4a09 	vmul.f32	s8, s8, s18
 8007ff4:	ee70 0a06 	vadd.f32	s1, s0, s12
 8007ff8:	ee69 7a89 	vmul.f32	s15, s19, s18
 8007ffc:	ee62 2a89 	vmul.f32	s5, s5, s18
 8008000:	ee30 6a46 	vsub.f32	s12, s0, s12
 8008004:	ee32 0a26 	vadd.f32	s0, s4, s13
 8008008:	ee72 6a66 	vsub.f32	s13, s4, s13
 800800c:	ee77 8a62 	vsub.f32	s17, s14, s5
 8008010:	ee34 2aa7 	vadd.f32	s4, s9, s15
 8008014:	ee74 7ae7 	vsub.f32	s15, s9, s15
 8008018:	ee77 4a22 	vadd.f32	s9, s14, s5
 800801c:	ee71 2a04 	vadd.f32	s5, s2, s8
 8008020:	ee31 7a44 	vsub.f32	s14, s2, s8
 8008024:	ee30 1a60 	vsub.f32	s2, s0, s1
 8008028:	ee73 1a06 	vadd.f32	s3, s6, s12
 800802c:	ee33 6a46 	vsub.f32	s12, s6, s12
 8008030:	ee36 3ae3 	vsub.f32	s6, s13, s7
 8008034:	ee37 4ac8 	vsub.f32	s8, s15, s16
 8008038:	ee76 6aa3 	vadd.f32	s13, s13, s7
 800803c:	ee77 7a88 	vadd.f32	s15, s15, s16
 8008040:	ee72 3a65 	vsub.f32	s7, s4, s11
 8008044:	ee2a 8a81 	vmul.f32	s16, s21, s2
 8008048:	ee72 5a25 	vadd.f32	s11, s4, s11
 800804c:	ee2e 1a01 	vmul.f32	s2, s28, s2
 8008050:	ee32 2aa4 	vadd.f32	s4, s5, s9
 8008054:	ee72 4ae4 	vsub.f32	s9, s5, s9
 8008058:	ee77 2a28 	vadd.f32	s5, s14, s17
 800805c:	ee37 7a68 	vsub.f32	s14, s14, s17
 8008060:	ee6e 8a05 	vmul.f32	s17, s28, s10
 8008064:	ee2a 5a85 	vmul.f32	s10, s21, s10
 8008068:	ee6f 9a21 	vmul.f32	s19, s30, s3
 800806c:	ee70 0a20 	vadd.f32	s1, s0, s1
 8008070:	ee6b 1aa1 	vmul.f32	s3, s23, s3
 8008074:	ee2b 0a83 	vmul.f32	s0, s23, s6
 8008078:	ee2f 3a03 	vmul.f32	s6, s30, s6
 800807c:	edce 0a01 	vstr	s1, [lr, #4]
 8008080:	ee38 8a88 	vadd.f32	s16, s17, s16
 8008084:	449e      	add	lr, r3
 8008086:	ee6c 8a23 	vmul.f32	s17, s24, s7
 800808a:	ee31 5a45 	vsub.f32	s10, s2, s10
 800808e:	ee6f 3aa3 	vmul.f32	s7, s31, s7
 8008092:	ed86 8a00 	vstr	s16, [r6]
 8008096:	ee39 0a80 	vadd.f32	s0, s19, s0
 800809a:	ee33 3a61 	vsub.f32	s6, s6, s3
 800809e:	ed86 5a01 	vstr	s10, [r6, #4]
 80080a2:	ee6f 0a82 	vmul.f32	s1, s31, s4
 80080a6:	edcd 3a01 	vstr	s7, [sp, #4]
 80080aa:	ed9d 5a03 	vldr	s10, [sp, #12]
 80080ae:	ee2d 8a06 	vmul.f32	s16, s26, s12
 80080b2:	eddd 3a02 	vldr	s7, [sp, #8]
 80080b6:	ee6c 9aa4 	vmul.f32	s19, s25, s9
 80080ba:	ed84 0a00 	vstr	s0, [r4]
 80080be:	ee65 4a24 	vmul.f32	s9, s10, s9
 80080c2:	ed84 3a01 	vstr	s6, [r4, #4]
 80080c6:	ee23 1aa6 	vmul.f32	s2, s7, s13
 80080ca:	ee23 6a86 	vmul.f32	s12, s7, s12
 80080ce:	eddd 3a01 	vldr	s7, [sp, #4]
 80080d2:	ee25 5a25 	vmul.f32	s10, s10, s11
 80080d6:	441e      	add	r6, r3
 80080d8:	ee2d 0aa2 	vmul.f32	s0, s27, s5
 80080dc:	441c      	add	r4, r3
 80080de:	ee6a 1a04 	vmul.f32	s3, s20, s8
 80080e2:	ee70 0aa8 	vadd.f32	s1, s1, s17
 80080e6:	ee2e 3a87 	vmul.f32	s6, s29, s14
 80080ea:	ee6b 8a27 	vmul.f32	s17, s22, s15
 80080ee:	ee2c 2a02 	vmul.f32	s4, s24, s4
 80080f2:	ee6d 6a26 	vmul.f32	s13, s26, s13
 80080f6:	ee6c 5aa5 	vmul.f32	s11, s25, s11
 80080fa:	ee6a 2a22 	vmul.f32	s5, s20, s5
 80080fe:	ee2d 4a84 	vmul.f32	s8, s27, s8
 8008102:	ee2b 7a07 	vmul.f32	s14, s22, s14
 8008106:	ee6e 7aa7 	vmul.f32	s15, s29, s15
 800810a:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800810e:	ee38 8a01 	vadd.f32	s16, s16, s2
 8008112:	ee36 6ac6 	vsub.f32	s12, s13, s12
 8008116:	ee39 5a85 	vadd.f32	s10, s19, s10
 800811a:	ee75 4ae4 	vsub.f32	s9, s11, s9
 800811e:	ed02 8a01 	vstr	s16, [r2, #-4]
 8008122:	ee30 0a21 	vadd.f32	s0, s0, s3
 8008126:	ed82 6a00 	vstr	s12, [r2]
 800812a:	ee74 2a62 	vsub.f32	s5, s8, s5
 800812e:	edc5 0a00 	vstr	s1, [r5]
 8008132:	ee33 3a28 	vadd.f32	s6, s6, s17
 8008136:	edc5 3a01 	vstr	s7, [r5, #4]
 800813a:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800813e:	ed07 5a01 	vstr	s10, [r7, #-4]
 8008142:	edc7 4a00 	vstr	s9, [r7]
 8008146:	441d      	add	r5, r3
 8008148:	ed01 0a01 	vstr	s0, [r1, #-4]
 800814c:	441a      	add	r2, r3
 800814e:	edc1 2a00 	vstr	s5, [r1]
 8008152:	441f      	add	r7, r3
 8008154:	ed80 3a00 	vstr	s6, [r0]
 8008158:	4419      	add	r1, r3
 800815a:	ed80 7a01 	vstr	s14, [r0, #4]
 800815e:	4418      	add	r0, r3
 8008160:	f63f aee8 	bhi.w	8007f34 <arm_radix8_butterfly_f32+0x32c>
 8008164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008166:	f109 0901 	add.w	r9, r9, #1
 800816a:	9301      	str	r3, [sp, #4]
 800816c:	9b04      	ldr	r3, [sp, #16]
 800816e:	4413      	add	r3, r2
 8008170:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008172:	9304      	str	r3, [sp, #16]
 8008174:	9b06      	ldr	r3, [sp, #24]
 8008176:	4413      	add	r3, r2
 8008178:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800817a:	9306      	str	r3, [sp, #24]
 800817c:	9b05      	ldr	r3, [sp, #20]
 800817e:	4413      	add	r3, r2
 8008180:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008182:	9305      	str	r3, [sp, #20]
 8008184:	9b07      	ldr	r3, [sp, #28]
 8008186:	4413      	add	r3, r2
 8008188:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800818a:	9307      	str	r3, [sp, #28]
 800818c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800818e:	4413      	add	r3, r2
 8008190:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8008192:	930a      	str	r3, [sp, #40]	; 0x28
 8008194:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008196:	4413      	add	r3, r2
 8008198:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800819a:	9309      	str	r3, [sp, #36]	; 0x24
 800819c:	9b08      	ldr	r3, [sp, #32]
 800819e:	4413      	add	r3, r2
 80081a0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80081a2:	9308      	str	r3, [sp, #32]
 80081a4:	3208      	adds	r2, #8
 80081a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80081a8:	920b      	str	r2, [sp, #44]	; 0x2c
 80081aa:	4599      	cmp	r9, r3
 80081ac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80081ae:	f47f ae72 	bne.w	8007e96 <arm_radix8_butterfly_f32+0x28e>
 80081b2:	f8bd e048 	ldrh.w	lr, [sp, #72]	; 0x48
 80081b6:	46c8      	mov	r8, r9
 80081b8:	f8dd c074 	ldr.w	ip, [sp, #116]	; 0x74
 80081bc:	e533      	b.n	8007c26 <arm_radix8_butterfly_f32+0x1e>
 80081be:	b01f      	add	sp, #124	; 0x7c
 80081c0:	ecbd 8b10 	vpop	{d8-d15}
 80081c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080081c8 <__errno>:
 80081c8:	4b01      	ldr	r3, [pc, #4]	; (80081d0 <__errno+0x8>)
 80081ca:	6818      	ldr	r0, [r3, #0]
 80081cc:	4770      	bx	lr
 80081ce:	bf00      	nop
 80081d0:	2000002c 	.word	0x2000002c

080081d4 <__libc_init_array>:
 80081d4:	b570      	push	{r4, r5, r6, lr}
 80081d6:	4d0d      	ldr	r5, [pc, #52]	; (800820c <__libc_init_array+0x38>)
 80081d8:	4c0d      	ldr	r4, [pc, #52]	; (8008210 <__libc_init_array+0x3c>)
 80081da:	1b64      	subs	r4, r4, r5
 80081dc:	10a4      	asrs	r4, r4, #2
 80081de:	2600      	movs	r6, #0
 80081e0:	42a6      	cmp	r6, r4
 80081e2:	d109      	bne.n	80081f8 <__libc_init_array+0x24>
 80081e4:	4d0b      	ldr	r5, [pc, #44]	; (8008214 <__libc_init_array+0x40>)
 80081e6:	4c0c      	ldr	r4, [pc, #48]	; (8008218 <__libc_init_array+0x44>)
 80081e8:	f000 f9be 	bl	8008568 <_init>
 80081ec:	1b64      	subs	r4, r4, r5
 80081ee:	10a4      	asrs	r4, r4, #2
 80081f0:	2600      	movs	r6, #0
 80081f2:	42a6      	cmp	r6, r4
 80081f4:	d105      	bne.n	8008202 <__libc_init_array+0x2e>
 80081f6:	bd70      	pop	{r4, r5, r6, pc}
 80081f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081fc:	4798      	blx	r3
 80081fe:	3601      	adds	r6, #1
 8008200:	e7ee      	b.n	80081e0 <__libc_init_array+0xc>
 8008202:	f855 3b04 	ldr.w	r3, [r5], #4
 8008206:	4798      	blx	r3
 8008208:	3601      	adds	r6, #1
 800820a:	e7f2      	b.n	80081f2 <__libc_init_array+0x1e>
 800820c:	0801ba04 	.word	0x0801ba04
 8008210:	0801ba04 	.word	0x0801ba04
 8008214:	0801ba04 	.word	0x0801ba04
 8008218:	0801ba08 	.word	0x0801ba08

0800821c <memset>:
 800821c:	4402      	add	r2, r0
 800821e:	4603      	mov	r3, r0
 8008220:	4293      	cmp	r3, r2
 8008222:	d100      	bne.n	8008226 <memset+0xa>
 8008224:	4770      	bx	lr
 8008226:	f803 1b01 	strb.w	r1, [r3], #1
 800822a:	e7f9      	b.n	8008220 <memset+0x4>

0800822c <log10f>:
 800822c:	b508      	push	{r3, lr}
 800822e:	ed2d 8b02 	vpush	{d8}
 8008232:	eeb0 8a40 	vmov.f32	s16, s0
 8008236:	f000 f845 	bl	80082c4 <__ieee754_log10f>
 800823a:	eeb4 8a48 	vcmp.f32	s16, s16
 800823e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008242:	d60f      	bvs.n	8008264 <log10f+0x38>
 8008244:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800824c:	d80a      	bhi.n	8008264 <log10f+0x38>
 800824e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8008252:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008256:	d108      	bne.n	800826a <log10f+0x3e>
 8008258:	f7ff ffb6 	bl	80081c8 <__errno>
 800825c:	2322      	movs	r3, #34	; 0x22
 800825e:	ed9f 0a08 	vldr	s0, [pc, #32]	; 8008280 <log10f+0x54>
 8008262:	6003      	str	r3, [r0, #0]
 8008264:	ecbd 8b02 	vpop	{d8}
 8008268:	bd08      	pop	{r3, pc}
 800826a:	f7ff ffad 	bl	80081c8 <__errno>
 800826e:	ecbd 8b02 	vpop	{d8}
 8008272:	2321      	movs	r3, #33	; 0x21
 8008274:	6003      	str	r3, [r0, #0]
 8008276:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800827a:	4802      	ldr	r0, [pc, #8]	; (8008284 <log10f+0x58>)
 800827c:	f000 b87e 	b.w	800837c <nanf>
 8008280:	ff800000 	.word	0xff800000
 8008284:	0801b9f8 	.word	0x0801b9f8

08008288 <sqrtf>:
 8008288:	b508      	push	{r3, lr}
 800828a:	ed2d 8b02 	vpush	{d8}
 800828e:	eeb0 8a40 	vmov.f32	s16, s0
 8008292:	f000 f86f 	bl	8008374 <__ieee754_sqrtf>
 8008296:	eeb4 8a48 	vcmp.f32	s16, s16
 800829a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800829e:	d60c      	bvs.n	80082ba <sqrtf+0x32>
 80082a0:	eddf 8a07 	vldr	s17, [pc, #28]	; 80082c0 <sqrtf+0x38>
 80082a4:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80082a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80082ac:	d505      	bpl.n	80082ba <sqrtf+0x32>
 80082ae:	f7ff ff8b 	bl	80081c8 <__errno>
 80082b2:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80082b6:	2321      	movs	r3, #33	; 0x21
 80082b8:	6003      	str	r3, [r0, #0]
 80082ba:	ecbd 8b02 	vpop	{d8}
 80082be:	bd08      	pop	{r3, pc}
 80082c0:	00000000 	.word	0x00000000

080082c4 <__ieee754_log10f>:
 80082c4:	b508      	push	{r3, lr}
 80082c6:	ee10 2a10 	vmov	r2, s0
 80082ca:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 80082ce:	ed2d 8b02 	vpush	{d8}
 80082d2:	d108      	bne.n	80082e6 <__ieee754_log10f+0x22>
 80082d4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800835c <__ieee754_log10f+0x98>
 80082d8:	eddf 7a21 	vldr	s15, [pc, #132]	; 8008360 <__ieee754_log10f+0x9c>
 80082dc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80082e0:	ecbd 8b02 	vpop	{d8}
 80082e4:	bd08      	pop	{r3, pc}
 80082e6:	2a00      	cmp	r2, #0
 80082e8:	da02      	bge.n	80082f0 <__ieee754_log10f+0x2c>
 80082ea:	ee30 7a40 	vsub.f32	s14, s0, s0
 80082ee:	e7f3      	b.n	80082d8 <__ieee754_log10f+0x14>
 80082f0:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80082f4:	db02      	blt.n	80082fc <__ieee754_log10f+0x38>
 80082f6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80082fa:	e7f1      	b.n	80082e0 <__ieee754_log10f+0x1c>
 80082fc:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 8008300:	bfbf      	itttt	lt
 8008302:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 8008364 <__ieee754_log10f+0xa0>
 8008306:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800830a:	f06f 0118 	mvnlt.w	r1, #24
 800830e:	ee17 2a90 	vmovlt	r2, s15
 8008312:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8008316:	bfa8      	it	ge
 8008318:	2100      	movge	r1, #0
 800831a:	3b7f      	subs	r3, #127	; 0x7f
 800831c:	440b      	add	r3, r1
 800831e:	0fd9      	lsrs	r1, r3, #31
 8008320:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8008324:	ee07 3a90 	vmov	s15, r3
 8008328:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800832c:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 8008330:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8008334:	ee00 3a10 	vmov	s0, r3
 8008338:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800833c:	f000 f824 	bl	8008388 <__ieee754_logf>
 8008340:	eddf 7a09 	vldr	s15, [pc, #36]	; 8008368 <__ieee754_log10f+0xa4>
 8008344:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008348:	eddf 7a08 	vldr	s15, [pc, #32]	; 800836c <__ieee754_log10f+0xa8>
 800834c:	eea8 0a27 	vfma.f32	s0, s16, s15
 8008350:	eddf 7a07 	vldr	s15, [pc, #28]	; 8008370 <__ieee754_log10f+0xac>
 8008354:	eea8 0a27 	vfma.f32	s0, s16, s15
 8008358:	e7c2      	b.n	80082e0 <__ieee754_log10f+0x1c>
 800835a:	bf00      	nop
 800835c:	cc000000 	.word	0xcc000000
 8008360:	00000000 	.word	0x00000000
 8008364:	4c000000 	.word	0x4c000000
 8008368:	3ede5bd9 	.word	0x3ede5bd9
 800836c:	355427db 	.word	0x355427db
 8008370:	3e9a2080 	.word	0x3e9a2080

08008374 <__ieee754_sqrtf>:
 8008374:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008378:	4770      	bx	lr
	...

0800837c <nanf>:
 800837c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008384 <nanf+0x8>
 8008380:	4770      	bx	lr
 8008382:	bf00      	nop
 8008384:	7fc00000 	.word	0x7fc00000

08008388 <__ieee754_logf>:
 8008388:	ee10 3a10 	vmov	r3, s0
 800838c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8008390:	d106      	bne.n	80083a0 <__ieee754_logf+0x18>
 8008392:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8008528 <__ieee754_logf+0x1a0>
 8008396:	eddf 7a65 	vldr	s15, [pc, #404]	; 800852c <__ieee754_logf+0x1a4>
 800839a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800839e:	4770      	bx	lr
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	da02      	bge.n	80083aa <__ieee754_logf+0x22>
 80083a4:	ee30 7a40 	vsub.f32	s14, s0, s0
 80083a8:	e7f5      	b.n	8008396 <__ieee754_logf+0xe>
 80083aa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80083ae:	db02      	blt.n	80083b6 <__ieee754_logf+0x2e>
 80083b0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80083b4:	4770      	bx	lr
 80083b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80083ba:	bfb8      	it	lt
 80083bc:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 8008530 <__ieee754_logf+0x1a8>
 80083c0:	485c      	ldr	r0, [pc, #368]	; (8008534 <__ieee754_logf+0x1ac>)
 80083c2:	bfbe      	ittt	lt
 80083c4:	ee60 7a27 	vmullt.f32	s15, s0, s15
 80083c8:	f06f 0118 	mvnlt.w	r1, #24
 80083cc:	ee17 3a90 	vmovlt	r3, s15
 80083d0:	ea4f 52e3 	mov.w	r2, r3, asr #23
 80083d4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80083d8:	4418      	add	r0, r3
 80083da:	bfa8      	it	ge
 80083dc:	2100      	movge	r1, #0
 80083de:	3a7f      	subs	r2, #127	; 0x7f
 80083e0:	440a      	add	r2, r1
 80083e2:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 80083e6:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 80083ea:	4319      	orrs	r1, r3
 80083ec:	ee00 1a10 	vmov	s0, r1
 80083f0:	4951      	ldr	r1, [pc, #324]	; (8008538 <__ieee754_logf+0x1b0>)
 80083f2:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 80083f6:	f103 000f 	add.w	r0, r3, #15
 80083fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80083fe:	4001      	ands	r1, r0
 8008400:	ee30 0a67 	vsub.f32	s0, s0, s15
 8008404:	bb89      	cbnz	r1, 800846a <__ieee754_logf+0xe2>
 8008406:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800840a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800840e:	d10f      	bne.n	8008430 <__ieee754_logf+0xa8>
 8008410:	2a00      	cmp	r2, #0
 8008412:	f000 8085 	beq.w	8008520 <__ieee754_logf+0x198>
 8008416:	ee07 2a90 	vmov	s15, r2
 800841a:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800853c <__ieee754_logf+0x1b4>
 800841e:	ed9f 7a48 	vldr	s14, [pc, #288]	; 8008540 <__ieee754_logf+0x1b8>
 8008422:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008426:	ee27 0a80 	vmul.f32	s0, s15, s0
 800842a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800842e:	4770      	bx	lr
 8008430:	eddf 6a44 	vldr	s13, [pc, #272]	; 8008544 <__ieee754_logf+0x1bc>
 8008434:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8008438:	eee0 7a66 	vfms.f32	s15, s0, s13
 800843c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8008440:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008444:	b912      	cbnz	r2, 800844c <__ieee754_logf+0xc4>
 8008446:	ee30 0a47 	vsub.f32	s0, s0, s14
 800844a:	4770      	bx	lr
 800844c:	ee07 2a90 	vmov	s15, r2
 8008450:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800853c <__ieee754_logf+0x1b4>
 8008454:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008458:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800845c:	ee37 0a40 	vsub.f32	s0, s14, s0
 8008460:	ed9f 7a37 	vldr	s14, [pc, #220]	; 8008540 <__ieee754_logf+0x1b8>
 8008464:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8008468:	4770      	bx	lr
 800846a:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800846e:	ee70 7a27 	vadd.f32	s15, s0, s15
 8008472:	eddf 5a35 	vldr	s11, [pc, #212]	; 8008548 <__ieee754_logf+0x1c0>
 8008476:	eddf 4a35 	vldr	s9, [pc, #212]	; 800854c <__ieee754_logf+0x1c4>
 800847a:	4935      	ldr	r1, [pc, #212]	; (8008550 <__ieee754_logf+0x1c8>)
 800847c:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8008480:	4419      	add	r1, r3
 8008482:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 8008486:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800848a:	430b      	orrs	r3, r1
 800848c:	2b00      	cmp	r3, #0
 800848e:	ee07 2a90 	vmov	s15, r2
 8008492:	ee26 5a06 	vmul.f32	s10, s12, s12
 8008496:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800849a:	ee25 7a05 	vmul.f32	s14, s10, s10
 800849e:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8008554 <__ieee754_logf+0x1cc>
 80084a2:	eee7 7a25 	vfma.f32	s15, s14, s11
 80084a6:	eddf 5a2c 	vldr	s11, [pc, #176]	; 8008558 <__ieee754_logf+0x1d0>
 80084aa:	eee7 5a87 	vfma.f32	s11, s15, s14
 80084ae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800855c <__ieee754_logf+0x1d4>
 80084b2:	eee7 7a24 	vfma.f32	s15, s14, s9
 80084b6:	eddf 4a2a 	vldr	s9, [pc, #168]	; 8008560 <__ieee754_logf+0x1d8>
 80084ba:	eee7 4a87 	vfma.f32	s9, s15, s14
 80084be:	eddf 7a29 	vldr	s15, [pc, #164]	; 8008564 <__ieee754_logf+0x1dc>
 80084c2:	eee4 7a87 	vfma.f32	s15, s9, s14
 80084c6:	ee67 7a85 	vmul.f32	s15, s15, s10
 80084ca:	eee5 7a87 	vfma.f32	s15, s11, s14
 80084ce:	dd1c      	ble.n	800850a <__ieee754_logf+0x182>
 80084d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80084d4:	ee20 7a07 	vmul.f32	s14, s0, s14
 80084d8:	ee27 7a00 	vmul.f32	s14, s14, s0
 80084dc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80084e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80084e4:	b922      	cbnz	r2, 80084f0 <__ieee754_logf+0x168>
 80084e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084ea:	ee30 0a67 	vsub.f32	s0, s0, s15
 80084ee:	4770      	bx	lr
 80084f0:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800853c <__ieee754_logf+0x1b4>
 80084f4:	eee6 7a86 	vfma.f32	s15, s13, s12
 80084f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80084fc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8008500:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8008540 <__ieee754_logf+0x1b8>
 8008504:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8008508:	4770      	bx	lr
 800850a:	ee70 7a67 	vsub.f32	s15, s0, s15
 800850e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008512:	2a00      	cmp	r2, #0
 8008514:	d0e9      	beq.n	80084ea <__ieee754_logf+0x162>
 8008516:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800853c <__ieee754_logf+0x1b4>
 800851a:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800851e:	e7ed      	b.n	80084fc <__ieee754_logf+0x174>
 8008520:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800852c <__ieee754_logf+0x1a4>
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	cc000000 	.word	0xcc000000
 800852c:	00000000 	.word	0x00000000
 8008530:	4c000000 	.word	0x4c000000
 8008534:	004afb20 	.word	0x004afb20
 8008538:	007ffff0 	.word	0x007ffff0
 800853c:	3717f7d1 	.word	0x3717f7d1
 8008540:	3f317180 	.word	0x3f317180
 8008544:	3eaaaaab 	.word	0x3eaaaaab
 8008548:	3e1cd04f 	.word	0x3e1cd04f
 800854c:	3e178897 	.word	0x3e178897
 8008550:	ffcf5c30 	.word	0xffcf5c30
 8008554:	3e638e29 	.word	0x3e638e29
 8008558:	3ecccccd 	.word	0x3ecccccd
 800855c:	3e3a3325 	.word	0x3e3a3325
 8008560:	3e924925 	.word	0x3e924925
 8008564:	3f2aaaab 	.word	0x3f2aaaab

08008568 <_init>:
 8008568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800856a:	bf00      	nop
 800856c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800856e:	bc08      	pop	{r3}
 8008570:	469e      	mov	lr, r3
 8008572:	4770      	bx	lr

08008574 <_fini>:
 8008574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008576:	bf00      	nop
 8008578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800857a:	bc08      	pop	{r3}
 800857c:	469e      	mov	lr, r3
 800857e:	4770      	bx	lr
